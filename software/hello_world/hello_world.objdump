
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000572c memsz 0x0000572c flags r-x
    LOAD off    0x0000674c vaddr 0x0001574c paddr 0x000171b8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00000c24 vaddr 0x00018c24 paddr 0x00018c24 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054dc  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00015700  00015700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0001574c  000171b8  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00018c24  00018c24  00008c24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00018d7c  00018d7c  000081b8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000081b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  000081e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000177d1  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e67  00000000  00000000  000203e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005f9a  00000000  00000000  00027250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000153c  00000000  00000000  0002d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a13  00000000  00000000  0002e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0003013c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000014fc  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041c3  00000000  00000000  000316bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005db  00000000  00000000  0003587f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00038356  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00038359  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00038365  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00038366  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00038367  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00038372  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003837d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00038388  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  00038392  2**0
                  CONTENTS, READONLY
 28 .jdi          00005177  00000000  00000000  000383c1  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000346b2  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
00015700 l    d  .rodata	00000000 .rodata
0001574c l    d  .rwdata	00000000 .rwdata
00018c24 l    d  .bss	00000000 .bss
00018d7c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0001044c l     F .text	00000008 __fp_lock
00010460 l     F .text	00000008 __fp_unlock
00010468 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001574c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013114 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001322c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013350 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001343c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013708 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000171a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013974 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013ab4 l     F .text	00000034 alt_dev_reg
00016120 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013d90 l     F .text	00000214 altera_avalon_jtag_uart_irq
00013fa4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014bd4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014d24 l     F .text	0000003c alt_get_errno
00014d60 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018c50 g     O .bss	00000004 alt_instruction_exception_handler
00012ee0 g     F .text	00000058 _isatty_r
00013644 g     F .text	0000007c alt_main
000102d4 g     F .text	000000d0 _puts_r
00018c7c g     O .bss	00000100 alt_irq
00012b8c g     F .text	00000064 _lseek_r
000171b8 g       *ABS*	00000000 __flash_rwdata_start
00018d7c g       *ABS*	00000000 __alt_heap_start
00012100 g     F .text	0000005c __sseek
00010790 g     F .text	00000010 __sinit
000105d0 g     F .text	00000078 __sfmoreglue
000136e4 g     F .text	00000024 __malloc_unlock
00011770 g     F .text	00000128 memmove
0001077c g     F .text	00000014 _cleanup
0001516c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012e80 g     F .text	00000060 _fstat_r
00018c30 g     O .bss	00000004 errno
00012078 g     F .text	00000008 __seofread
00018c38 g     O .bss	00000004 alt_argv
0001f180 g       *ABS*	00000000 _gp
00015fa0 g     O .rwdata	00000180 alt_fd_list
00015190 g     F .text	00000090 alt_find_dev
00011670 g     F .text	00000100 memcpy
00010454 g     F .text	0000000c _cleanup_r
00014ca8 g     F .text	0000007c alt_io_redirect
00015700 g       *ABS*	00000000 __DTOR_END__
000103a4 g     F .text	00000010 puts
000153e0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000141a8 g     F .text	00000220 altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0001302c g     F .text	00000064 .hidden __udivsi3
0001338c g     F .text	000000b0 isatty
00018c2c g     O .bss	00000004 __malloc_top_pad
000107d8 g     F .text	000004a8 __sfvwrite_r
00011fcc g     F .text	00000058 _sbrk_r
00012e1c g     F .text	00000064 _read_r
000171a0 g     O .rwdata	00000004 alt_max_fd
0001236c g     F .text	000000f8 _fclose_r
000126dc g     F .text	00000084 fflush
00018c28 g     O .bss	00000004 __malloc_max_sbrked_mem
00013564 g     F .text	000000e0 lseek
00017180 g     O .rwdata	00000004 _global_impure_ptr
000119d8 g     F .text	000005f4 _realloc_r
00018d7c g       *ABS*	00000000 __bss_end
00014aec g     F .text	000000e8 alt_iic_isr_register
00015040 g     F .text	0000012c alt_tick
000107b0 g     F .text	00000014 __fp_lock_all
00014aa0 g     F .text	0000004c alt_ic_irq_enabled
00014f9c g     F .text	000000a4 alt_alarm_stop
00018c40 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000c8 alt_irq_handler
00015f78 g     O .rwdata	00000028 alt_dev_null
00014750 g     F .text	00000020 alt_dcache_flush_all
000171b8 g       *ABS*	00000000 __ram_rwdata_end
00017198 g     O .rwdata	00000008 alt_dev_list
000139b0 g     F .text	00000104 write
0001574c g       *ABS*	00000000 __ram_rodata_end
00013294 g     F .text	000000bc fstat
00013090 g     F .text	0000005c .hidden __umodsi3
00018d7c g       *ABS*	00000000 end
00013cd0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00015700 g       *ABS*	00000000 __CTOR_LIST__
0001c000 g       *ABS*	00000000 __alt_stack_pointer
000143c8 g     F .text	00000228 altera_avalon_jtag_uart_write
000107a0 g     F .text	00000004 __sfp_lock_acquire
00011574 g     F .text	000000fc memchr
00012884 g     F .text	00000308 _free_r
000155a4 g     F .text	00000120 __call_exitprocs
00017188 g     O .rwdata	00000004 __malloc_sbrk_base
00010224 g     F .text	0000003c _start
00018c44 g     O .bss	00000004 _alt_tick_rate
00018c48 g     O .bss	00000008 _alt_nticks
00013744 g     F .text	00000108 read
00013b24 g     F .text	00000048 alt_sys_init
00015514 g     F .text	00000090 __register_exitproc
0001404c g     F .text	00000068 altera_avalon_jtag_uart_close
000130ec g     F .text	00000028 .hidden __mulsi3
0001574c g       *ABS*	00000000 __ram_rwdata_start
00015700 g       *ABS*	00000000 __ram_rodata_start
00018c54 g     O .bss	00000028 __malloc_current_mallinfo
00013b6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015328 g     F .text	000000b8 alt_get_fd
00012314 g     F .text	00000058 _close_r
0001549c g     F .text	00000078 memcmp
00013c2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018d7c g       *ABS*	00000000 __alt_stack_base
00013c7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000121c8 g     F .text	0000014c __swsetup_r
00010648 g     F .text	00000134 __sfp
00015b70 g     O .rwdata	00000408 __malloc_av_
000107ac g     F .text	00000004 __sinit_lock_release
00012024 g     F .text	00000054 __sread
00015220 g     F .text	00000108 alt_find_file
000147ac g     F .text	000000a8 alt_dev_llist_insert
000136c0 g     F .text	00000024 __malloc_lock
000138bc g     F .text	000000b8 sbrk
0001267c g     F .text	00000060 _fflush_r
00018c24 g       *ABS*	00000000 __bss_start
00011898 g     F .text	00000140 memset
00010260 g     F .text	00000074 main
00018c3c g     O .bss	00000004 alt_envp
00018c24 g     O .bss	00000004 __malloc_max_total_mem
00013bcc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001215c g     F .text	00000008 __sclose
0001c000 g       *ABS*	00000000 __alt_heap_limit
00012464 g     F .text	00000010 fclose
00010dc0 g     F .text	000007b4 _malloc_r
000171a4 g     O .rwdata	00000004 alt_errno
00010c80 g     F .text	00000098 _fwalk
00012f38 g     F .text	00000080 .hidden __divsi3
00012760 g     F .text	00000124 _malloc_trim_r
00015700 g       *ABS*	00000000 __CTOR_END__
00015700 g       *ABS*	00000000 __flash_rodata_start
00015700 g       *ABS*	00000000 __DTOR_LIST__
00013ae8 g     F .text	0000003c alt_irq_init
0001384c g     F .text	00000070 alt_release_fd
00015454 g     F .text	00000014 atexit
00012164 g     F .text	00000064 _write_r
00017184 g     O .rwdata	00000004 _impure_ptr
00018c34 g     O .bss	00000004 alt_argc
00012474 g     F .text	00000208 __sflush_r
000148b8 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000107c4 g     F .text	00000014 __fp_unlock_all
00017190 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012d90 g     F .text	0000008c __swhatbuf_r
0001493c g     F .text	00000050 alt_ic_isr_register
000171b8 g       *ABS*	00000000 _edata
00018d7c g       *ABS*	00000000 _end
00010224 g       *ABS*	00000000 __ram_exceptions_end
000140b4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014a14 g     F .text	0000008c alt_ic_irq_disable
00012080 g     F .text	00000080 __swrite
0001718c g     O .rwdata	00000004 __malloc_trim_threshold
00015468 g     F .text	00000034 exit
00010d18 g     F .text	000000a8 _fwalk_reent
00012fb8 g     F .text	00000074 .hidden __modsi3
0001c000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000107a4 g     F .text	00000004 __sfp_lock_release
000156c4 g     F .text	0000003c _exit
000145f0 g     F .text	00000160 alt_alarm_start
00012bf0 g     F .text	000001a0 __smakebuf_r
000103b4 g     F .text	00000098 strlen
00014e3c g     F .text	00000160 open
0001491c g     F .text	00000020 alt_icache_flush_all
000171ac g     O .rwdata	00000004 alt_priority_mask
0001498c g     F .text	00000088 alt_ic_irq_enable
000171b0 g     O .rwdata	00000008 alt_alarm_list
00014854 g     F .text	00000064 _do_ctors
00013150 g     F .text	000000dc close
000134a4 g     F .text	00000084 alt_load
000107a8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e31f17 	ldw	r3,-29572(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a32017 	ldw	r2,-29568(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a6b417 	ldw	r2,-25904(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a6b417 	ldw	r2,-25904(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bc6014 	ori	gp,gp,61824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	10a30914 	ori	r2,r2,35876

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18e35f14 	ori	r3,r3,36220

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	00134a40 	call	134a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00136440 	call	13644 <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
   10260:	defffc04 	addi	sp,sp,-16
   10264:	dfc00315 	stw	ra,12(sp)
   10268:	df000215 	stw	fp,8(sp)
   1026c:	df000204 	addi	fp,sp,8
	int count = 0;
   10270:	e03fff15 	stw	zero,-4(fp)
	int delay;

	printf("Hello from Nios II!\n"); // Serial output to JTAG UART
   10274:	01000074 	movhi	r4,1
   10278:	2115c004 	addi	r4,r4,22272
   1027c:	00103a40 	call	103a4 <puts>

	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0xFF); // IO REG READ/WRITE FUNC
   10280:	e0bfff17 	ldw	r2,-4(fp)
   10284:	10c03fcc 	andi	r3,r2,255
   10288:	008000b4 	movhi	r2,2
   1028c:	10c40435 	stwio	r3,4112(r2)
		delay = 0;
   10290:	e03ffe15 	stw	zero,-8(fp)

		while (delay < 2000000) // Delay for 2M clock cycle (0.04s)
   10294:	00000306 	br	102a4 <main+0x44>
		{
			delay++;
   10298:	e0bffe17 	ldw	r2,-8(fp)
   1029c:	10800044 	addi	r2,r2,1
   102a0:	e0bffe15 	stw	r2,-8(fp)
		while (delay < 2000000) // Delay for 2M clock cycle (0.04s)
   102a4:	e0fffe17 	ldw	r3,-8(fp)
   102a8:	008007f4 	movhi	r2,31
   102ac:	10a11fc4 	addi	r2,r2,-31617
   102b0:	10fff90e 	bge	r2,r3,10298 <main+0x38>
		}

		count++;
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800044 	addi	r2,r2,1
   102bc:	e0bfff15 	stw	r2,-4(fp)

		if (count > 0xFF)
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	10804010 	cmplti	r2,r2,256
   102c8:	103fed1e 	bne	r2,zero,10280 <main+0x20>
		{
			count = 0;
   102cc:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count & 0xFF); // IO REG READ/WRITE FUNC
   102d0:	003feb06 	br	10280 <main+0x20>

000102d4 <_puts_r>:
   102d4:	defff504 	addi	sp,sp,-44
   102d8:	dc000815 	stw	r16,32(sp)
   102dc:	2021883a 	mov	r16,r4
   102e0:	2809883a 	mov	r4,r5
   102e4:	dc400915 	stw	r17,36(sp)
   102e8:	dfc00a15 	stw	ra,40(sp)
   102ec:	2823883a 	mov	r17,r5
   102f0:	00103b40 	call	103b4 <strlen>
   102f4:	11000044 	addi	r4,r2,1
   102f8:	d8800515 	stw	r2,20(sp)
   102fc:	00800044 	movi	r2,1
   10300:	00c00074 	movhi	r3,1
   10304:	d8800715 	stw	r2,28(sp)
   10308:	d8800404 	addi	r2,sp,16
   1030c:	18d5c504 	addi	r3,r3,22292
   10310:	d8800115 	stw	r2,4(sp)
   10314:	00800084 	movi	r2,2
   10318:	dc400415 	stw	r17,16(sp)
   1031c:	d8c00615 	stw	r3,24(sp)
   10320:	d9000315 	stw	r4,12(sp)
   10324:	d8800215 	stw	r2,8(sp)
   10328:	81400217 	ldw	r5,8(r16)
   1032c:	80000226 	beq	r16,zero,10338 <_puts_r+0x64>
   10330:	80800e17 	ldw	r2,56(r16)
   10334:	10001426 	beq	r2,zero,10388 <_puts_r+0xb4>
   10338:	2880030b 	ldhu	r2,12(r5)
   1033c:	10c8000c 	andi	r3,r2,8192
   10340:	1800061e 	bne	r3,zero,1035c <_puts_r+0x88>
   10344:	28c01917 	ldw	r3,100(r5)
   10348:	0137ffc4 	movi	r4,-8193
   1034c:	10880014 	ori	r2,r2,8192
   10350:	1906703a 	and	r3,r3,r4
   10354:	2880030d 	sth	r2,12(r5)
   10358:	28c01915 	stw	r3,100(r5)
   1035c:	d9800104 	addi	r6,sp,4
   10360:	8009883a 	mov	r4,r16
   10364:	00107d80 	call	107d8 <__sfvwrite_r>
   10368:	1007883a 	mov	r3,r2
   1036c:	00800284 	movi	r2,10
   10370:	18000a1e 	bne	r3,zero,1039c <_puts_r+0xc8>
   10374:	dfc00a17 	ldw	ra,40(sp)
   10378:	dc400917 	ldw	r17,36(sp)
   1037c:	dc000817 	ldw	r16,32(sp)
   10380:	dec00b04 	addi	sp,sp,44
   10384:	f800283a 	ret
   10388:	8009883a 	mov	r4,r16
   1038c:	d9400015 	stw	r5,0(sp)
   10390:	00107900 	call	10790 <__sinit>
   10394:	d9400017 	ldw	r5,0(sp)
   10398:	003fe706 	br	10338 <_puts_r+0x64>
   1039c:	00bfffc4 	movi	r2,-1
   103a0:	003ff406 	br	10374 <_puts_r+0xa0>

000103a4 <puts>:
   103a4:	00800074 	movhi	r2,1
   103a8:	200b883a 	mov	r5,r4
   103ac:	111c6117 	ldw	r4,29060(r2)
   103b0:	00102d41 	jmpi	102d4 <_puts_r>

000103b4 <strlen>:
   103b4:	208000cc 	andi	r2,r4,3
   103b8:	10000926 	beq	r2,zero,103e0 <strlen+0x2c>
   103bc:	2005883a 	mov	r2,r4
   103c0:	00000306 	br	103d0 <strlen+0x1c>
   103c4:	10800044 	addi	r2,r2,1
   103c8:	10c000cc 	andi	r3,r2,3
   103cc:	18000526 	beq	r3,zero,103e4 <strlen+0x30>
   103d0:	10c00007 	ldb	r3,0(r2)
   103d4:	183ffb1e 	bne	r3,zero,103c4 <strlen+0x10>
   103d8:	1105c83a 	sub	r2,r2,r4
   103dc:	f800283a 	ret
   103e0:	2005883a 	mov	r2,r4
   103e4:	11400017 	ldw	r5,0(r2)
   103e8:	01ffbff4 	movhi	r7,65279
   103ec:	39ffbfc4 	addi	r7,r7,-257
   103f0:	29c7883a 	add	r3,r5,r7
   103f4:	01a02074 	movhi	r6,32897
   103f8:	014a303a 	nor	r5,zero,r5
   103fc:	1946703a 	and	r3,r3,r5
   10400:	31a02004 	addi	r6,r6,-32640
   10404:	1986703a 	and	r3,r3,r6
   10408:	1800071e 	bne	r3,zero,10428 <strlen+0x74>
   1040c:	11400117 	ldw	r5,4(r2)
   10410:	10800104 	addi	r2,r2,4
   10414:	29c7883a 	add	r3,r5,r7
   10418:	014a303a 	nor	r5,zero,r5
   1041c:	1946703a 	and	r3,r3,r5
   10420:	1986703a 	and	r3,r3,r6
   10424:	183ff926 	beq	r3,zero,1040c <strlen+0x58>
   10428:	10c00007 	ldb	r3,0(r2)
   1042c:	183fea26 	beq	r3,zero,103d8 <strlen+0x24>
   10430:	10c00047 	ldb	r3,1(r2)
   10434:	10800044 	addi	r2,r2,1
   10438:	183fe726 	beq	r3,zero,103d8 <strlen+0x24>
   1043c:	10c00047 	ldb	r3,1(r2)
   10440:	10800044 	addi	r2,r2,1
   10444:	183ffa1e 	bne	r3,zero,10430 <strlen+0x7c>
   10448:	003fe306 	br	103d8 <strlen+0x24>

0001044c <__fp_lock>:
   1044c:	0005883a 	mov	r2,zero
   10450:	f800283a 	ret

00010454 <_cleanup_r>:
   10454:	01400074 	movhi	r5,1
   10458:	2948db04 	addi	r5,r5,9068
   1045c:	0010d181 	jmpi	10d18 <_fwalk_reent>

00010460 <__fp_unlock>:
   10460:	0005883a 	mov	r2,zero
   10464:	f800283a 	ret

00010468 <__sinit.part.0>:
   10468:	00c00074 	movhi	r3,1
   1046c:	20800117 	ldw	r2,4(r4)
   10470:	18c11504 	addi	r3,r3,1108
   10474:	20c00f15 	stw	r3,60(r4)
   10478:	2140bb04 	addi	r5,r4,748
   1047c:	00c000c4 	movi	r3,3
   10480:	20c0b915 	stw	r3,740(r4)
   10484:	2140ba15 	stw	r5,744(r4)
   10488:	2000b815 	stw	zero,736(r4)
   1048c:	10001705 	stb	zero,92(r2)
   10490:	10001745 	stb	zero,93(r2)
   10494:	10001785 	stb	zero,94(r2)
   10498:	100017c5 	stb	zero,95(r2)
   1049c:	10001805 	stb	zero,96(r2)
   104a0:	10001845 	stb	zero,97(r2)
   104a4:	10001885 	stb	zero,98(r2)
   104a8:	100018c5 	stb	zero,99(r2)
   104ac:	00c00104 	movi	r3,4
   104b0:	10c00315 	stw	r3,12(r2)
   104b4:	02000074 	movhi	r8,1
   104b8:	20c00217 	ldw	r3,8(r4)
   104bc:	01c00074 	movhi	r7,1
   104c0:	01800074 	movhi	r6,1
   104c4:	01400074 	movhi	r5,1
   104c8:	42080904 	addi	r8,r8,8228
   104cc:	39c82004 	addi	r7,r7,8320
   104d0:	31884004 	addi	r6,r6,8448
   104d4:	29485704 	addi	r5,r5,8540
   104d8:	02400074 	movhi	r9,1
   104dc:	10000015 	stw	zero,0(r2)
   104e0:	10000115 	stw	zero,4(r2)
   104e4:	10000215 	stw	zero,8(r2)
   104e8:	10001915 	stw	zero,100(r2)
   104ec:	10000415 	stw	zero,16(r2)
   104f0:	10000515 	stw	zero,20(r2)
   104f4:	10000615 	stw	zero,24(r2)
   104f8:	10800715 	stw	r2,28(r2)
   104fc:	12000815 	stw	r8,32(r2)
   10500:	11c00915 	stw	r7,36(r2)
   10504:	11800a15 	stw	r6,40(r2)
   10508:	11400b15 	stw	r5,44(r2)
   1050c:	4a400284 	addi	r9,r9,10
   10510:	1a400315 	stw	r9,12(r3)
   10514:	18000015 	stw	zero,0(r3)
   10518:	18000115 	stw	zero,4(r3)
   1051c:	18000215 	stw	zero,8(r3)
   10520:	18001915 	stw	zero,100(r3)
   10524:	18000415 	stw	zero,16(r3)
   10528:	18001705 	stb	zero,92(r3)
   1052c:	18001745 	stb	zero,93(r3)
   10530:	18001785 	stb	zero,94(r3)
   10534:	180017c5 	stb	zero,95(r3)
   10538:	18001805 	stb	zero,96(r3)
   1053c:	18001845 	stb	zero,97(r3)
   10540:	18001885 	stb	zero,98(r3)
   10544:	180018c5 	stb	zero,99(r3)
   10548:	20800317 	ldw	r2,12(r4)
   1054c:	024000b4 	movhi	r9,2
   10550:	18000515 	stw	zero,20(r3)
   10554:	18000615 	stw	zero,24(r3)
   10558:	18c00715 	stw	r3,28(r3)
   1055c:	1a000815 	stw	r8,32(r3)
   10560:	19c00915 	stw	r7,36(r3)
   10564:	19800a15 	stw	r6,40(r3)
   10568:	19400b15 	stw	r5,44(r3)
   1056c:	4a400484 	addi	r9,r9,18
   10570:	10000015 	stw	zero,0(r2)
   10574:	10000115 	stw	zero,4(r2)
   10578:	10000215 	stw	zero,8(r2)
   1057c:	10001915 	stw	zero,100(r2)
   10580:	12400315 	stw	r9,12(r2)
   10584:	10000415 	stw	zero,16(r2)
   10588:	10000515 	stw	zero,20(r2)
   1058c:	10000615 	stw	zero,24(r2)
   10590:	10001705 	stb	zero,92(r2)
   10594:	10001745 	stb	zero,93(r2)
   10598:	10001785 	stb	zero,94(r2)
   1059c:	100017c5 	stb	zero,95(r2)
   105a0:	10001805 	stb	zero,96(r2)
   105a4:	10001845 	stb	zero,97(r2)
   105a8:	10001885 	stb	zero,98(r2)
   105ac:	100018c5 	stb	zero,99(r2)
   105b0:	10800715 	stw	r2,28(r2)
   105b4:	12000815 	stw	r8,32(r2)
   105b8:	11c00915 	stw	r7,36(r2)
   105bc:	11800a15 	stw	r6,40(r2)
   105c0:	11400b15 	stw	r5,44(r2)
   105c4:	00800044 	movi	r2,1
   105c8:	20800e15 	stw	r2,56(r4)
   105cc:	f800283a 	ret

000105d0 <__sfmoreglue>:
   105d0:	defffc04 	addi	sp,sp,-16
   105d4:	dc800215 	stw	r18,8(sp)
   105d8:	2825883a 	mov	r18,r5
   105dc:	dc000015 	stw	r16,0(sp)
   105e0:	01401a04 	movi	r5,104
   105e4:	2021883a 	mov	r16,r4
   105e8:	913fffc4 	addi	r4,r18,-1
   105ec:	dfc00315 	stw	ra,12(sp)
   105f0:	dc400115 	stw	r17,4(sp)
   105f4:	00130ec0 	call	130ec <__mulsi3>
   105f8:	8009883a 	mov	r4,r16
   105fc:	11401d04 	addi	r5,r2,116
   10600:	1023883a 	mov	r17,r2
   10604:	0010dc00 	call	10dc0 <_malloc_r>
   10608:	1021883a 	mov	r16,r2
   1060c:	10000726 	beq	r2,zero,1062c <__sfmoreglue+0x5c>
   10610:	11000304 	addi	r4,r2,12
   10614:	10000015 	stw	zero,0(r2)
   10618:	14800115 	stw	r18,4(r2)
   1061c:	11000215 	stw	r4,8(r2)
   10620:	89801a04 	addi	r6,r17,104
   10624:	000b883a 	mov	r5,zero
   10628:	00118980 	call	11898 <memset>
   1062c:	8005883a 	mov	r2,r16
   10630:	dfc00317 	ldw	ra,12(sp)
   10634:	dc800217 	ldw	r18,8(sp)
   10638:	dc400117 	ldw	r17,4(sp)
   1063c:	dc000017 	ldw	r16,0(sp)
   10640:	dec00404 	addi	sp,sp,16
   10644:	f800283a 	ret

00010648 <__sfp>:
   10648:	defffc04 	addi	sp,sp,-16
   1064c:	00800074 	movhi	r2,1
   10650:	dc400115 	stw	r17,4(sp)
   10654:	145c6017 	ldw	r17,29056(r2)
   10658:	dc800215 	stw	r18,8(sp)
   1065c:	dfc00315 	stw	ra,12(sp)
   10660:	88800e17 	ldw	r2,56(r17)
   10664:	dc000015 	stw	r16,0(sp)
   10668:	2025883a 	mov	r18,r4
   1066c:	10002d26 	beq	r2,zero,10724 <__sfp+0xdc>
   10670:	8c40b804 	addi	r17,r17,736
   10674:	88800117 	ldw	r2,4(r17)
   10678:	8c000217 	ldw	r16,8(r17)
   1067c:	10bfffc4 	addi	r2,r2,-1
   10680:	1000030e 	bge	r2,zero,10690 <__sfp+0x48>
   10684:	00002306 	br	10714 <__sfp+0xcc>
   10688:	84001a04 	addi	r16,r16,104
   1068c:	28002126 	beq	r5,zero,10714 <__sfp+0xcc>
   10690:	80c0030f 	ldh	r3,12(r16)
   10694:	10bfffc4 	addi	r2,r2,-1
   10698:	117fffd8 	cmpnei	r5,r2,-1
   1069c:	183ffa1e 	bne	r3,zero,10688 <__sfp+0x40>
   106a0:	00bffff4 	movhi	r2,65535
   106a4:	10800044 	addi	r2,r2,1
   106a8:	80800315 	stw	r2,12(r16)
   106ac:	80001915 	stw	zero,100(r16)
   106b0:	80000015 	stw	zero,0(r16)
   106b4:	80000215 	stw	zero,8(r16)
   106b8:	80000115 	stw	zero,4(r16)
   106bc:	80000415 	stw	zero,16(r16)
   106c0:	80000515 	stw	zero,20(r16)
   106c4:	80000615 	stw	zero,24(r16)
   106c8:	80001705 	stb	zero,92(r16)
   106cc:	80001745 	stb	zero,93(r16)
   106d0:	80001785 	stb	zero,94(r16)
   106d4:	800017c5 	stb	zero,95(r16)
   106d8:	80001805 	stb	zero,96(r16)
   106dc:	80001845 	stb	zero,97(r16)
   106e0:	80001885 	stb	zero,98(r16)
   106e4:	800018c5 	stb	zero,99(r16)
   106e8:	80000c15 	stw	zero,48(r16)
   106ec:	80000d15 	stw	zero,52(r16)
   106f0:	80001115 	stw	zero,68(r16)
   106f4:	80001215 	stw	zero,72(r16)
   106f8:	8005883a 	mov	r2,r16
   106fc:	dfc00317 	ldw	ra,12(sp)
   10700:	dc800217 	ldw	r18,8(sp)
   10704:	dc400117 	ldw	r17,4(sp)
   10708:	dc000017 	ldw	r16,0(sp)
   1070c:	dec00404 	addi	sp,sp,16
   10710:	f800283a 	ret
   10714:	8c000017 	ldw	r16,0(r17)
   10718:	80000526 	beq	r16,zero,10730 <__sfp+0xe8>
   1071c:	8023883a 	mov	r17,r16
   10720:	003fd406 	br	10674 <__sfp+0x2c>
   10724:	8809883a 	mov	r4,r17
   10728:	00104680 	call	10468 <__sinit.part.0>
   1072c:	003fd006 	br	10670 <__sfp+0x28>
   10730:	01406b04 	movi	r5,428
   10734:	9009883a 	mov	r4,r18
   10738:	0010dc00 	call	10dc0 <_malloc_r>
   1073c:	1021883a 	mov	r16,r2
   10740:	10000a26 	beq	r2,zero,1076c <__sfp+0x124>
   10744:	10000015 	stw	zero,0(r2)
   10748:	11000304 	addi	r4,r2,12
   1074c:	00800104 	movi	r2,4
   10750:	80800115 	stw	r2,4(r16)
   10754:	81000215 	stw	r4,8(r16)
   10758:	01806804 	movi	r6,416
   1075c:	000b883a 	mov	r5,zero
   10760:	00118980 	call	11898 <memset>
   10764:	8c000015 	stw	r16,0(r17)
   10768:	003fec06 	br	1071c <__sfp+0xd4>
   1076c:	88000015 	stw	zero,0(r17)
   10770:	00800304 	movi	r2,12
   10774:	90800015 	stw	r2,0(r18)
   10778:	003fdf06 	br	106f8 <__sfp+0xb0>

0001077c <_cleanup>:
   1077c:	00800074 	movhi	r2,1
   10780:	111c6017 	ldw	r4,29056(r2)
   10784:	01400074 	movhi	r5,1
   10788:	2948db04 	addi	r5,r5,9068
   1078c:	0010d181 	jmpi	10d18 <_fwalk_reent>

00010790 <__sinit>:
   10790:	20800e17 	ldw	r2,56(r4)
   10794:	10000126 	beq	r2,zero,1079c <__sinit+0xc>
   10798:	f800283a 	ret
   1079c:	00104681 	jmpi	10468 <__sinit.part.0>

000107a0 <__sfp_lock_acquire>:
   107a0:	f800283a 	ret

000107a4 <__sfp_lock_release>:
   107a4:	f800283a 	ret

000107a8 <__sinit_lock_acquire>:
   107a8:	f800283a 	ret

000107ac <__sinit_lock_release>:
   107ac:	f800283a 	ret

000107b0 <__fp_lock_all>:
   107b0:	00800074 	movhi	r2,1
   107b4:	111c6117 	ldw	r4,29060(r2)
   107b8:	01400074 	movhi	r5,1
   107bc:	29411304 	addi	r5,r5,1100
   107c0:	0010c801 	jmpi	10c80 <_fwalk>

000107c4 <__fp_unlock_all>:
   107c4:	00800074 	movhi	r2,1
   107c8:	111c6117 	ldw	r4,29060(r2)
   107cc:	01400074 	movhi	r5,1
   107d0:	29411804 	addi	r5,r5,1120
   107d4:	0010c801 	jmpi	10c80 <_fwalk>

000107d8 <__sfvwrite_r>:
   107d8:	30800217 	ldw	r2,8(r6)
   107dc:	1000c426 	beq	r2,zero,10af0 <__sfvwrite_r+0x318>
   107e0:	2a80030b 	ldhu	r10,12(r5)
   107e4:	defff504 	addi	sp,sp,-44
   107e8:	df000915 	stw	fp,36(sp)
   107ec:	dcc00415 	stw	r19,16(sp)
   107f0:	dc000115 	stw	r16,4(sp)
   107f4:	dfc00a15 	stw	ra,40(sp)
   107f8:	ddc00815 	stw	r23,32(sp)
   107fc:	dd800715 	stw	r22,28(sp)
   10800:	dd400615 	stw	r21,24(sp)
   10804:	dd000515 	stw	r20,20(sp)
   10808:	dc800315 	stw	r18,12(sp)
   1080c:	dc400215 	stw	r17,8(sp)
   10810:	5080020c 	andi	r2,r10,8
   10814:	3039883a 	mov	fp,r6
   10818:	2027883a 	mov	r19,r4
   1081c:	2821883a 	mov	r16,r5
   10820:	10002226 	beq	r2,zero,108ac <__sfvwrite_r+0xd4>
   10824:	28800417 	ldw	r2,16(r5)
   10828:	10002026 	beq	r2,zero,108ac <__sfvwrite_r+0xd4>
   1082c:	5080008c 	andi	r2,r10,2
   10830:	e4400017 	ldw	r17,0(fp)
   10834:	10002526 	beq	r2,zero,108cc <__sfvwrite_r+0xf4>
   10838:	80800917 	ldw	r2,36(r16)
   1083c:	81400717 	ldw	r5,28(r16)
   10840:	05600034 	movhi	r21,32768
   10844:	0029883a 	mov	r20,zero
   10848:	0025883a 	mov	r18,zero
   1084c:	ad7f0004 	addi	r21,r21,-1024
   10850:	a00d883a 	mov	r6,r20
   10854:	9809883a 	mov	r4,r19
   10858:	90001026 	beq	r18,zero,1089c <__sfvwrite_r+0xc4>
   1085c:	900f883a 	mov	r7,r18
   10860:	ac80012e 	bgeu	r21,r18,10868 <__sfvwrite_r+0x90>
   10864:	a80f883a 	mov	r7,r21
   10868:	103ee83a 	callr	r2
   1086c:	00809b0e 	bge	zero,r2,10adc <__sfvwrite_r+0x304>
   10870:	e0c00217 	ldw	r3,8(fp)
   10874:	a0a9883a 	add	r20,r20,r2
   10878:	90a5c83a 	sub	r18,r18,r2
   1087c:	1885c83a 	sub	r2,r3,r2
   10880:	e0800215 	stw	r2,8(fp)
   10884:	10008426 	beq	r2,zero,10a98 <__sfvwrite_r+0x2c0>
   10888:	80800917 	ldw	r2,36(r16)
   1088c:	81400717 	ldw	r5,28(r16)
   10890:	a00d883a 	mov	r6,r20
   10894:	9809883a 	mov	r4,r19
   10898:	903ff01e 	bne	r18,zero,1085c <__sfvwrite_r+0x84>
   1089c:	8d000017 	ldw	r20,0(r17)
   108a0:	8c800117 	ldw	r18,4(r17)
   108a4:	8c400204 	addi	r17,r17,8
   108a8:	003fe906 	br	10850 <__sfvwrite_r+0x78>
   108ac:	800b883a 	mov	r5,r16
   108b0:	9809883a 	mov	r4,r19
   108b4:	00121c80 	call	121c8 <__swsetup_r>
   108b8:	10008b1e 	bne	r2,zero,10ae8 <__sfvwrite_r+0x310>
   108bc:	8280030b 	ldhu	r10,12(r16)
   108c0:	e4400017 	ldw	r17,0(fp)
   108c4:	5080008c 	andi	r2,r10,2
   108c8:	103fdb1e 	bne	r2,zero,10838 <__sfvwrite_r+0x60>
   108cc:	5080004c 	andi	r2,r10,1
   108d0:	10004f1e 	bne	r2,zero,10a10 <__sfvwrite_r+0x238>
   108d4:	00a00034 	movhi	r2,32768
   108d8:	81c00017 	ldw	r7,0(r16)
   108dc:	80c00217 	ldw	r3,8(r16)
   108e0:	10bfffc4 	addi	r2,r2,-1
   108e4:	002d883a 	mov	r22,zero
   108e8:	0025883a 	mov	r18,zero
   108ec:	d8800015 	stw	r2,0(sp)
   108f0:	3809883a 	mov	r4,r7
   108f4:	1829883a 	mov	r20,r3
   108f8:	90004126 	beq	r18,zero,10a00 <__sfvwrite_r+0x228>
   108fc:	5080800c 	andi	r2,r10,512
   10900:	10009526 	beq	r2,zero,10b58 <__sfvwrite_r+0x380>
   10904:	182b883a 	mov	r21,r3
   10908:	90c0ba36 	bltu	r18,r3,10bf4 <__sfvwrite_r+0x41c>
   1090c:	5081200c 	andi	r2,r10,1152
   10910:	10002526 	beq	r2,zero,109a8 <__sfvwrite_r+0x1d0>
   10914:	80c00517 	ldw	r3,20(r16)
   10918:	81000417 	ldw	r4,16(r16)
   1091c:	18c5883a 	add	r2,r3,r3
   10920:	10c5883a 	add	r2,r2,r3
   10924:	1012d7fa 	srli	r9,r2,31
   10928:	392fc83a 	sub	r23,r7,r4
   1092c:	b8c00044 	addi	r3,r23,1
   10930:	4893883a 	add	r9,r9,r2
   10934:	4829d07a 	srai	r20,r9,1
   10938:	1c85883a 	add	r2,r3,r18
   1093c:	a00b883a 	mov	r5,r20
   10940:	a080022e 	bgeu	r20,r2,1094c <__sfvwrite_r+0x174>
   10944:	1029883a 	mov	r20,r2
   10948:	100b883a 	mov	r5,r2
   1094c:	5281000c 	andi	r10,r10,1024
   10950:	5000b926 	beq	r10,zero,10c38 <__sfvwrite_r+0x460>
   10954:	9809883a 	mov	r4,r19
   10958:	0010dc00 	call	10dc0 <_malloc_r>
   1095c:	1000c426 	beq	r2,zero,10c70 <__sfvwrite_r+0x498>
   10960:	81400417 	ldw	r5,16(r16)
   10964:	1009883a 	mov	r4,r2
   10968:	b80d883a 	mov	r6,r23
   1096c:	00116700 	call	11670 <memcpy>
   10970:	1007883a 	mov	r3,r2
   10974:	8080030b 	ldhu	r2,12(r16)
   10978:	013edfc4 	movi	r4,-1153
   1097c:	1104703a 	and	r2,r2,r4
   10980:	10802014 	ori	r2,r2,128
   10984:	8080030d 	sth	r2,12(r16)
   10988:	a5cfc83a 	sub	r7,r20,r23
   1098c:	1dc9883a 	add	r4,r3,r23
   10990:	85000515 	stw	r20,20(r16)
   10994:	80c00415 	stw	r3,16(r16)
   10998:	81000015 	stw	r4,0(r16)
   1099c:	9029883a 	mov	r20,r18
   109a0:	81c00215 	stw	r7,8(r16)
   109a4:	902b883a 	mov	r21,r18
   109a8:	a80d883a 	mov	r6,r21
   109ac:	b00b883a 	mov	r5,r22
   109b0:	00117700 	call	11770 <memmove>
   109b4:	80c00217 	ldw	r3,8(r16)
   109b8:	81c00017 	ldw	r7,0(r16)
   109bc:	902f883a 	mov	r23,r18
   109c0:	1d07c83a 	sub	r3,r3,r20
   109c4:	3d4d883a 	add	r6,r7,r21
   109c8:	80c00215 	stw	r3,8(r16)
   109cc:	81800015 	stw	r6,0(r16)
   109d0:	0025883a 	mov	r18,zero
   109d4:	e0800217 	ldw	r2,8(fp)
   109d8:	b5ed883a 	add	r22,r22,r23
   109dc:	15c5c83a 	sub	r2,r2,r23
   109e0:	e0800215 	stw	r2,8(fp)
   109e4:	10002c26 	beq	r2,zero,10a98 <__sfvwrite_r+0x2c0>
   109e8:	81c00017 	ldw	r7,0(r16)
   109ec:	80c00217 	ldw	r3,8(r16)
   109f0:	8280030b 	ldhu	r10,12(r16)
   109f4:	3809883a 	mov	r4,r7
   109f8:	1829883a 	mov	r20,r3
   109fc:	903fbf1e 	bne	r18,zero,108fc <__sfvwrite_r+0x124>
   10a00:	8d800017 	ldw	r22,0(r17)
   10a04:	8c800117 	ldw	r18,4(r17)
   10a08:	8c400204 	addi	r17,r17,8
   10a0c:	003fb806 	br	108f0 <__sfvwrite_r+0x118>
   10a10:	002f883a 	mov	r23,zero
   10a14:	0005883a 	mov	r2,zero
   10a18:	002b883a 	mov	r21,zero
   10a1c:	0029883a 	mov	r20,zero
   10a20:	a0003526 	beq	r20,zero,10af8 <__sfvwrite_r+0x320>
   10a24:	10003926 	beq	r2,zero,10b0c <__sfvwrite_r+0x334>
   10a28:	b805883a 	mov	r2,r23
   10a2c:	a02d883a 	mov	r22,r20
   10a30:	1500012e 	bgeu	r2,r20,10a38 <__sfvwrite_r+0x260>
   10a34:	102d883a 	mov	r22,r2
   10a38:	81000017 	ldw	r4,0(r16)
   10a3c:	80800417 	ldw	r2,16(r16)
   10a40:	84800217 	ldw	r18,8(r16)
   10a44:	81c00517 	ldw	r7,20(r16)
   10a48:	1100022e 	bgeu	r2,r4,10a54 <__sfvwrite_r+0x27c>
   10a4c:	91e5883a 	add	r18,r18,r7
   10a50:	95803616 	blt	r18,r22,10b2c <__sfvwrite_r+0x354>
   10a54:	b1c06a16 	blt	r22,r7,10c00 <__sfvwrite_r+0x428>
   10a58:	80800917 	ldw	r2,36(r16)
   10a5c:	81400717 	ldw	r5,28(r16)
   10a60:	a80d883a 	mov	r6,r21
   10a64:	9809883a 	mov	r4,r19
   10a68:	103ee83a 	callr	r2
   10a6c:	1025883a 	mov	r18,r2
   10a70:	00801a0e 	bge	zero,r2,10adc <__sfvwrite_r+0x304>
   10a74:	bcafc83a 	sub	r23,r23,r18
   10a78:	b8001426 	beq	r23,zero,10acc <__sfvwrite_r+0x2f4>
   10a7c:	00800044 	movi	r2,1
   10a80:	e0c00217 	ldw	r3,8(fp)
   10a84:	acab883a 	add	r21,r21,r18
   10a88:	a4a9c83a 	sub	r20,r20,r18
   10a8c:	1c87c83a 	sub	r3,r3,r18
   10a90:	e0c00215 	stw	r3,8(fp)
   10a94:	183fe21e 	bne	r3,zero,10a20 <__sfvwrite_r+0x248>
   10a98:	0005883a 	mov	r2,zero
   10a9c:	dfc00a17 	ldw	ra,40(sp)
   10aa0:	df000917 	ldw	fp,36(sp)
   10aa4:	ddc00817 	ldw	r23,32(sp)
   10aa8:	dd800717 	ldw	r22,28(sp)
   10aac:	dd400617 	ldw	r21,24(sp)
   10ab0:	dd000517 	ldw	r20,20(sp)
   10ab4:	dcc00417 	ldw	r19,16(sp)
   10ab8:	dc800317 	ldw	r18,12(sp)
   10abc:	dc400217 	ldw	r17,8(sp)
   10ac0:	dc000117 	ldw	r16,4(sp)
   10ac4:	dec00b04 	addi	sp,sp,44
   10ac8:	f800283a 	ret
   10acc:	800b883a 	mov	r5,r16
   10ad0:	9809883a 	mov	r4,r19
   10ad4:	001267c0 	call	1267c <_fflush_r>
   10ad8:	103fe926 	beq	r2,zero,10a80 <__sfvwrite_r+0x2a8>
   10adc:	8080030b 	ldhu	r2,12(r16)
   10ae0:	10801014 	ori	r2,r2,64
   10ae4:	8080030d 	sth	r2,12(r16)
   10ae8:	00bfffc4 	movi	r2,-1
   10aec:	003feb06 	br	10a9c <__sfvwrite_r+0x2c4>
   10af0:	0005883a 	mov	r2,zero
   10af4:	f800283a 	ret
   10af8:	8d000117 	ldw	r20,4(r17)
   10afc:	8805883a 	mov	r2,r17
   10b00:	8c400204 	addi	r17,r17,8
   10b04:	a03ffc26 	beq	r20,zero,10af8 <__sfvwrite_r+0x320>
   10b08:	15400017 	ldw	r21,0(r2)
   10b0c:	a00d883a 	mov	r6,r20
   10b10:	01400284 	movi	r5,10
   10b14:	a809883a 	mov	r4,r21
   10b18:	00115740 	call	11574 <memchr>
   10b1c:	10004326 	beq	r2,zero,10c2c <__sfvwrite_r+0x454>
   10b20:	10800044 	addi	r2,r2,1
   10b24:	156fc83a 	sub	r23,r2,r21
   10b28:	003fbf06 	br	10a28 <__sfvwrite_r+0x250>
   10b2c:	a80b883a 	mov	r5,r21
   10b30:	900d883a 	mov	r6,r18
   10b34:	00117700 	call	11770 <memmove>
   10b38:	80800017 	ldw	r2,0(r16)
   10b3c:	800b883a 	mov	r5,r16
   10b40:	9809883a 	mov	r4,r19
   10b44:	1485883a 	add	r2,r2,r18
   10b48:	80800015 	stw	r2,0(r16)
   10b4c:	001267c0 	call	1267c <_fflush_r>
   10b50:	103fc826 	beq	r2,zero,10a74 <__sfvwrite_r+0x29c>
   10b54:	003fe106 	br	10adc <__sfvwrite_r+0x304>
   10b58:	80800417 	ldw	r2,16(r16)
   10b5c:	11c01236 	bltu	r2,r7,10ba8 <__sfvwrite_r+0x3d0>
   10b60:	81400517 	ldw	r5,20(r16)
   10b64:	91401036 	bltu	r18,r5,10ba8 <__sfvwrite_r+0x3d0>
   10b68:	00a00034 	movhi	r2,32768
   10b6c:	902f883a 	mov	r23,r18
   10b70:	90800136 	bltu	r18,r2,10b78 <__sfvwrite_r+0x3a0>
   10b74:	ddc00017 	ldw	r23,0(sp)
   10b78:	b809883a 	mov	r4,r23
   10b7c:	0012fb80 	call	12fb8 <__modsi3>
   10b80:	80c00917 	ldw	r3,36(r16)
   10b84:	81400717 	ldw	r5,28(r16)
   10b88:	b88fc83a 	sub	r7,r23,r2
   10b8c:	b00d883a 	mov	r6,r22
   10b90:	9809883a 	mov	r4,r19
   10b94:	183ee83a 	callr	r3
   10b98:	102f883a 	mov	r23,r2
   10b9c:	00bfcf0e 	bge	zero,r2,10adc <__sfvwrite_r+0x304>
   10ba0:	95e5c83a 	sub	r18,r18,r23
   10ba4:	003f8b06 	br	109d4 <__sfvwrite_r+0x1fc>
   10ba8:	182f883a 	mov	r23,r3
   10bac:	90c0012e 	bgeu	r18,r3,10bb4 <__sfvwrite_r+0x3dc>
   10bb0:	902f883a 	mov	r23,r18
   10bb4:	3809883a 	mov	r4,r7
   10bb8:	b80d883a 	mov	r6,r23
   10bbc:	b00b883a 	mov	r5,r22
   10bc0:	00117700 	call	11770 <memmove>
   10bc4:	80c00217 	ldw	r3,8(r16)
   10bc8:	81c00017 	ldw	r7,0(r16)
   10bcc:	1dc7c83a 	sub	r3,r3,r23
   10bd0:	3dcf883a 	add	r7,r7,r23
   10bd4:	80c00215 	stw	r3,8(r16)
   10bd8:	81c00015 	stw	r7,0(r16)
   10bdc:	183ff01e 	bne	r3,zero,10ba0 <__sfvwrite_r+0x3c8>
   10be0:	800b883a 	mov	r5,r16
   10be4:	9809883a 	mov	r4,r19
   10be8:	001267c0 	call	1267c <_fflush_r>
   10bec:	103fec26 	beq	r2,zero,10ba0 <__sfvwrite_r+0x3c8>
   10bf0:	003fba06 	br	10adc <__sfvwrite_r+0x304>
   10bf4:	9029883a 	mov	r20,r18
   10bf8:	902b883a 	mov	r21,r18
   10bfc:	003f6a06 	br	109a8 <__sfvwrite_r+0x1d0>
   10c00:	b00d883a 	mov	r6,r22
   10c04:	a80b883a 	mov	r5,r21
   10c08:	00117700 	call	11770 <memmove>
   10c0c:	80c00217 	ldw	r3,8(r16)
   10c10:	80800017 	ldw	r2,0(r16)
   10c14:	b025883a 	mov	r18,r22
   10c18:	1d87c83a 	sub	r3,r3,r22
   10c1c:	1585883a 	add	r2,r2,r22
   10c20:	80c00215 	stw	r3,8(r16)
   10c24:	80800015 	stw	r2,0(r16)
   10c28:	003f9206 	br	10a74 <__sfvwrite_r+0x29c>
   10c2c:	a0800044 	addi	r2,r20,1
   10c30:	102f883a 	mov	r23,r2
   10c34:	003f7d06 	br	10a2c <__sfvwrite_r+0x254>
   10c38:	280d883a 	mov	r6,r5
   10c3c:	200b883a 	mov	r5,r4
   10c40:	9809883a 	mov	r4,r19
   10c44:	00119d80 	call	119d8 <_realloc_r>
   10c48:	1007883a 	mov	r3,r2
   10c4c:	103f4e1e 	bne	r2,zero,10988 <__sfvwrite_r+0x1b0>
   10c50:	81400417 	ldw	r5,16(r16)
   10c54:	9809883a 	mov	r4,r19
   10c58:	00128840 	call	12884 <_free_r>
   10c5c:	8080030b 	ldhu	r2,12(r16)
   10c60:	00c00304 	movi	r3,12
   10c64:	98c00015 	stw	r3,0(r19)
   10c68:	10bfdfcc 	andi	r2,r2,65407
   10c6c:	003f9c06 	br	10ae0 <__sfvwrite_r+0x308>
   10c70:	00c00304 	movi	r3,12
   10c74:	8080030b 	ldhu	r2,12(r16)
   10c78:	98c00015 	stw	r3,0(r19)
   10c7c:	003f9806 	br	10ae0 <__sfvwrite_r+0x308>

00010c80 <_fwalk>:
   10c80:	defffa04 	addi	sp,sp,-24
   10c84:	dd000415 	stw	r20,16(sp)
   10c88:	dcc00315 	stw	r19,12(sp)
   10c8c:	dc800215 	stw	r18,8(sp)
   10c90:	dfc00515 	stw	ra,20(sp)
   10c94:	dc400115 	stw	r17,4(sp)
   10c98:	dc000015 	stw	r16,0(sp)
   10c9c:	2827883a 	mov	r19,r5
   10ca0:	2480b804 	addi	r18,r4,736
   10ca4:	0029883a 	mov	r20,zero
   10ca8:	94400117 	ldw	r17,4(r18)
   10cac:	94000217 	ldw	r16,8(r18)
   10cb0:	8c7fffc4 	addi	r17,r17,-1
   10cb4:	88000d16 	blt	r17,zero,10cec <_fwalk+0x6c>
   10cb8:	8080030b 	ldhu	r2,12(r16)
   10cbc:	8c7fffc4 	addi	r17,r17,-1
   10cc0:	108000b0 	cmpltui	r2,r2,2
   10cc4:	1000061e 	bne	r2,zero,10ce0 <_fwalk+0x60>
   10cc8:	8080038f 	ldh	r2,14(r16)
   10ccc:	8009883a 	mov	r4,r16
   10cd0:	10bfffe0 	cmpeqi	r2,r2,-1
   10cd4:	1000021e 	bne	r2,zero,10ce0 <_fwalk+0x60>
   10cd8:	983ee83a 	callr	r19
   10cdc:	a0a8b03a 	or	r20,r20,r2
   10ce0:	88bfffd8 	cmpnei	r2,r17,-1
   10ce4:	84001a04 	addi	r16,r16,104
   10ce8:	103ff31e 	bne	r2,zero,10cb8 <_fwalk+0x38>
   10cec:	94800017 	ldw	r18,0(r18)
   10cf0:	903fed1e 	bne	r18,zero,10ca8 <_fwalk+0x28>
   10cf4:	a005883a 	mov	r2,r20
   10cf8:	dfc00517 	ldw	ra,20(sp)
   10cfc:	dd000417 	ldw	r20,16(sp)
   10d00:	dcc00317 	ldw	r19,12(sp)
   10d04:	dc800217 	ldw	r18,8(sp)
   10d08:	dc400117 	ldw	r17,4(sp)
   10d0c:	dc000017 	ldw	r16,0(sp)
   10d10:	dec00604 	addi	sp,sp,24
   10d14:	f800283a 	ret

00010d18 <_fwalk_reent>:
   10d18:	defff904 	addi	sp,sp,-28
   10d1c:	dd400515 	stw	r21,20(sp)
   10d20:	dd000415 	stw	r20,16(sp)
   10d24:	dcc00315 	stw	r19,12(sp)
   10d28:	dc800215 	stw	r18,8(sp)
   10d2c:	dfc00615 	stw	ra,24(sp)
   10d30:	dc400115 	stw	r17,4(sp)
   10d34:	dc000015 	stw	r16,0(sp)
   10d38:	2025883a 	mov	r18,r4
   10d3c:	2829883a 	mov	r20,r5
   10d40:	24c0b804 	addi	r19,r4,736
   10d44:	002b883a 	mov	r21,zero
   10d48:	9c400117 	ldw	r17,4(r19)
   10d4c:	9c000217 	ldw	r16,8(r19)
   10d50:	8c7fffc4 	addi	r17,r17,-1
   10d54:	88000e16 	blt	r17,zero,10d90 <_fwalk_reent+0x78>
   10d58:	8080030b 	ldhu	r2,12(r16)
   10d5c:	8c7fffc4 	addi	r17,r17,-1
   10d60:	108000b0 	cmpltui	r2,r2,2
   10d64:	1000071e 	bne	r2,zero,10d84 <_fwalk_reent+0x6c>
   10d68:	8080038f 	ldh	r2,14(r16)
   10d6c:	800b883a 	mov	r5,r16
   10d70:	9009883a 	mov	r4,r18
   10d74:	10bfffe0 	cmpeqi	r2,r2,-1
   10d78:	1000021e 	bne	r2,zero,10d84 <_fwalk_reent+0x6c>
   10d7c:	a03ee83a 	callr	r20
   10d80:	a8aab03a 	or	r21,r21,r2
   10d84:	88bfffd8 	cmpnei	r2,r17,-1
   10d88:	84001a04 	addi	r16,r16,104
   10d8c:	103ff21e 	bne	r2,zero,10d58 <_fwalk_reent+0x40>
   10d90:	9cc00017 	ldw	r19,0(r19)
   10d94:	983fec1e 	bne	r19,zero,10d48 <_fwalk_reent+0x30>
   10d98:	a805883a 	mov	r2,r21
   10d9c:	dfc00617 	ldw	ra,24(sp)
   10da0:	dd400517 	ldw	r21,20(sp)
   10da4:	dd000417 	ldw	r20,16(sp)
   10da8:	dcc00317 	ldw	r19,12(sp)
   10dac:	dc800217 	ldw	r18,8(sp)
   10db0:	dc400117 	ldw	r17,4(sp)
   10db4:	dc000017 	ldw	r16,0(sp)
   10db8:	dec00704 	addi	sp,sp,28
   10dbc:	f800283a 	ret

00010dc0 <_malloc_r>:
   10dc0:	defff604 	addi	sp,sp,-40
   10dc4:	dc400115 	stw	r17,4(sp)
   10dc8:	2c4002c4 	addi	r17,r5,11
   10dcc:	dc800215 	stw	r18,8(sp)
   10dd0:	dfc00915 	stw	ra,36(sp)
   10dd4:	df000815 	stw	fp,32(sp)
   10dd8:	ddc00715 	stw	r23,28(sp)
   10ddc:	dd800615 	stw	r22,24(sp)
   10de0:	dd400515 	stw	r21,20(sp)
   10de4:	dd000415 	stw	r20,16(sp)
   10de8:	dcc00315 	stw	r19,12(sp)
   10dec:	dc000015 	stw	r16,0(sp)
   10df0:	888005e8 	cmpgeui	r2,r17,23
   10df4:	2025883a 	mov	r18,r4
   10df8:	1000261e 	bne	r2,zero,10e94 <_malloc_r+0xd4>
   10dfc:	29400468 	cmpgeui	r5,r5,17
   10e00:	28008d1e 	bne	r5,zero,11038 <_malloc_r+0x278>
   10e04:	00136c00 	call	136c0 <__malloc_lock>
   10e08:	04400404 	movi	r17,16
   10e0c:	00800604 	movi	r2,24
   10e10:	01c00084 	movi	r7,2
   10e14:	04c00074 	movhi	r19,1
   10e18:	9cd6dc04 	addi	r19,r19,23408
   10e1c:	9885883a 	add	r2,r19,r2
   10e20:	14000117 	ldw	r16,4(r2)
   10e24:	10fffe04 	addi	r3,r2,-8
   10e28:	80c0cb26 	beq	r16,r3,11158 <_malloc_r+0x398>
   10e2c:	80800117 	ldw	r2,4(r16)
   10e30:	81000317 	ldw	r4,12(r16)
   10e34:	00ffff04 	movi	r3,-4
   10e38:	10c4703a 	and	r2,r2,r3
   10e3c:	81400217 	ldw	r5,8(r16)
   10e40:	8085883a 	add	r2,r16,r2
   10e44:	10c00117 	ldw	r3,4(r2)
   10e48:	29000315 	stw	r4,12(r5)
   10e4c:	21400215 	stw	r5,8(r4)
   10e50:	18c00054 	ori	r3,r3,1
   10e54:	10c00115 	stw	r3,4(r2)
   10e58:	9009883a 	mov	r4,r18
   10e5c:	00136e40 	call	136e4 <__malloc_unlock>
   10e60:	80800204 	addi	r2,r16,8
   10e64:	dfc00917 	ldw	ra,36(sp)
   10e68:	df000817 	ldw	fp,32(sp)
   10e6c:	ddc00717 	ldw	r23,28(sp)
   10e70:	dd800617 	ldw	r22,24(sp)
   10e74:	dd400517 	ldw	r21,20(sp)
   10e78:	dd000417 	ldw	r20,16(sp)
   10e7c:	dcc00317 	ldw	r19,12(sp)
   10e80:	dc800217 	ldw	r18,8(sp)
   10e84:	dc400117 	ldw	r17,4(sp)
   10e88:	dc000017 	ldw	r16,0(sp)
   10e8c:	dec00a04 	addi	sp,sp,40
   10e90:	f800283a 	ret
   10e94:	00bffe04 	movi	r2,-8
   10e98:	88a2703a 	and	r17,r17,r2
   10e9c:	88006616 	blt	r17,zero,11038 <_malloc_r+0x278>
   10ea0:	89406536 	bltu	r17,r5,11038 <_malloc_r+0x278>
   10ea4:	00136c00 	call	136c0 <__malloc_lock>
   10ea8:	88807e28 	cmpgeui	r2,r17,504
   10eac:	1000ef26 	beq	r2,zero,1126c <_malloc_r+0x4ac>
   10eb0:	8804d27a 	srli	r2,r17,9
   10eb4:	10006426 	beq	r2,zero,11048 <_malloc_r+0x288>
   10eb8:	10c00168 	cmpgeui	r3,r2,5
   10ebc:	1800c31e 	bne	r3,zero,111cc <_malloc_r+0x40c>
   10ec0:	8804d1ba 	srli	r2,r17,6
   10ec4:	11c00e44 	addi	r7,r2,57
   10ec8:	380890fa 	slli	r4,r7,3
   10ecc:	12000e04 	addi	r8,r2,56
   10ed0:	04c00074 	movhi	r19,1
   10ed4:	9cd6dc04 	addi	r19,r19,23408
   10ed8:	9909883a 	add	r4,r19,r4
   10edc:	24000117 	ldw	r16,4(r4)
   10ee0:	213ffe04 	addi	r4,r4,-8
   10ee4:	24000b26 	beq	r4,r16,10f14 <_malloc_r+0x154>
   10ee8:	01bfff04 	movi	r6,-4
   10eec:	00000306 	br	10efc <_malloc_r+0x13c>
   10ef0:	1800970e 	bge	r3,zero,11150 <_malloc_r+0x390>
   10ef4:	84000317 	ldw	r16,12(r16)
   10ef8:	24000626 	beq	r4,r16,10f14 <_malloc_r+0x154>
   10efc:	80800117 	ldw	r2,4(r16)
   10f00:	1184703a 	and	r2,r2,r6
   10f04:	1447c83a 	sub	r3,r2,r17
   10f08:	19400408 	cmpgei	r5,r3,16
   10f0c:	283ff826 	beq	r5,zero,10ef0 <_malloc_r+0x130>
   10f10:	400f883a 	mov	r7,r8
   10f14:	9c000417 	ldw	r16,16(r19)
   10f18:	02400074 	movhi	r9,1
   10f1c:	4a56de04 	addi	r9,r9,23416
   10f20:	82407f26 	beq	r16,r9,11120 <_malloc_r+0x360>
   10f24:	80800117 	ldw	r2,4(r16)
   10f28:	00ffff04 	movi	r3,-4
   10f2c:	10c4703a 	and	r2,r2,r3
   10f30:	1447c83a 	sub	r3,r2,r17
   10f34:	19000410 	cmplti	r4,r3,16
   10f38:	2000cf26 	beq	r4,zero,11278 <_malloc_r+0x4b8>
   10f3c:	9a400515 	stw	r9,20(r19)
   10f40:	9a400415 	stw	r9,16(r19)
   10f44:	1800c10e 	bge	r3,zero,1124c <_malloc_r+0x48c>
   10f48:	10c08028 	cmpgeui	r3,r2,512
   10f4c:	99400117 	ldw	r5,4(r19)
   10f50:	1800851e 	bne	r3,zero,11168 <_malloc_r+0x3a8>
   10f54:	1006d0fa 	srli	r3,r2,3
   10f58:	1008d17a 	srli	r4,r2,5
   10f5c:	18800044 	addi	r2,r3,1
   10f60:	100490fa 	slli	r2,r2,3
   10f64:	00c00044 	movi	r3,1
   10f68:	1906983a 	sll	r3,r3,r4
   10f6c:	9885883a 	add	r2,r19,r2
   10f70:	11000017 	ldw	r4,0(r2)
   10f74:	28cab03a 	or	r5,r5,r3
   10f78:	10fffe04 	addi	r3,r2,-8
   10f7c:	80c00315 	stw	r3,12(r16)
   10f80:	81000215 	stw	r4,8(r16)
   10f84:	99400115 	stw	r5,4(r19)
   10f88:	14000015 	stw	r16,0(r2)
   10f8c:	24000315 	stw	r16,12(r4)
   10f90:	3805d0ba 	srai	r2,r7,2
   10f94:	01000044 	movi	r4,1
   10f98:	2088983a 	sll	r4,r4,r2
   10f9c:	29002e36 	bltu	r5,r4,11058 <_malloc_r+0x298>
   10fa0:	2144703a 	and	r2,r4,r5
   10fa4:	10000a1e 	bne	r2,zero,10fd0 <_malloc_r+0x210>
   10fa8:	2109883a 	add	r4,r4,r4
   10fac:	00bfff04 	movi	r2,-4
   10fb0:	3884703a 	and	r2,r7,r2
   10fb4:	2146703a 	and	r3,r4,r5
   10fb8:	11c00104 	addi	r7,r2,4
   10fbc:	1800041e 	bne	r3,zero,10fd0 <_malloc_r+0x210>
   10fc0:	2109883a 	add	r4,r4,r4
   10fc4:	2144703a 	and	r2,r4,r5
   10fc8:	39c00104 	addi	r7,r7,4
   10fcc:	103ffc26 	beq	r2,zero,10fc0 <_malloc_r+0x200>
   10fd0:	02bfff04 	movi	r10,-4
   10fd4:	381690fa 	slli	r11,r7,3
   10fd8:	3819883a 	mov	r12,r7
   10fdc:	9ad7883a 	add	r11,r19,r11
   10fe0:	5811883a 	mov	r8,r11
   10fe4:	40800317 	ldw	r2,12(r8)
   10fe8:	40808126 	beq	r8,r2,111f0 <_malloc_r+0x430>
   10fec:	10c00117 	ldw	r3,4(r2)
   10ff0:	1021883a 	mov	r16,r2
   10ff4:	10800317 	ldw	r2,12(r2)
   10ff8:	1a86703a 	and	r3,r3,r10
   10ffc:	1c4bc83a 	sub	r5,r3,r17
   11000:	29800410 	cmplti	r6,r5,16
   11004:	30007f26 	beq	r6,zero,11204 <_malloc_r+0x444>
   11008:	283ff716 	blt	r5,zero,10fe8 <_malloc_r+0x228>
   1100c:	80c7883a 	add	r3,r16,r3
   11010:	19400117 	ldw	r5,4(r3)
   11014:	81800217 	ldw	r6,8(r16)
   11018:	9009883a 	mov	r4,r18
   1101c:	29400054 	ori	r5,r5,1
   11020:	19400115 	stw	r5,4(r3)
   11024:	30800315 	stw	r2,12(r6)
   11028:	11800215 	stw	r6,8(r2)
   1102c:	00136e40 	call	136e4 <__malloc_unlock>
   11030:	80800204 	addi	r2,r16,8
   11034:	003f8b06 	br	10e64 <_malloc_r+0xa4>
   11038:	00800304 	movi	r2,12
   1103c:	90800015 	stw	r2,0(r18)
   11040:	0005883a 	mov	r2,zero
   11044:	003f8706 	br	10e64 <_malloc_r+0xa4>
   11048:	01008004 	movi	r4,512
   1104c:	01c01004 	movi	r7,64
   11050:	02000fc4 	movi	r8,63
   11054:	003f9e06 	br	10ed0 <_malloc_r+0x110>
   11058:	9c000217 	ldw	r16,8(r19)
   1105c:	00bfff04 	movi	r2,-4
   11060:	80c00117 	ldw	r3,4(r16)
   11064:	18aa703a 	and	r21,r3,r2
   11068:	ac400336 	bltu	r21,r17,11078 <_malloc_r+0x2b8>
   1106c:	ac47c83a 	sub	r3,r21,r17
   11070:	18800408 	cmpgei	r2,r3,16
   11074:	10002c1e 	bne	r2,zero,11128 <_malloc_r+0x368>
   11078:	00800074 	movhi	r2,1
   1107c:	109c6217 	ldw	r2,29064(r2)
   11080:	00c000b4 	movhi	r3,2
   11084:	1d230b17 	ldw	r20,-29652(r3)
   11088:	10bfffd8 	cmpnei	r2,r2,-1
   1108c:	856f883a 	add	r23,r16,r21
   11090:	8d29883a 	add	r20,r17,r20
   11094:	1000e726 	beq	r2,zero,11434 <_malloc_r+0x674>
   11098:	a50403c4 	addi	r20,r20,4111
   1109c:	00bc0004 	movi	r2,-4096
   110a0:	a0a8703a 	and	r20,r20,r2
   110a4:	a00b883a 	mov	r5,r20
   110a8:	9009883a 	mov	r4,r18
   110ac:	0011fcc0 	call	11fcc <_sbrk_r>
   110b0:	102d883a 	mov	r22,r2
   110b4:	10bfffd8 	cmpnei	r2,r2,-1
   110b8:	10008426 	beq	r2,zero,112cc <_malloc_r+0x50c>
   110bc:	b5c08236 	bltu	r22,r23,112c8 <_malloc_r+0x508>
   110c0:	008000b4 	movhi	r2,2
   110c4:	11231517 	ldw	r4,-29612(r2)
   110c8:	a109883a 	add	r4,r20,r4
   110cc:	11231515 	stw	r4,-29612(r2)
   110d0:	2007883a 	mov	r3,r4
   110d4:	bd80a51e 	bne	r23,r22,1136c <_malloc_r+0x5ac>
   110d8:	b083ffcc 	andi	r2,r22,4095
   110dc:	1000a31e 	bne	r2,zero,1136c <_malloc_r+0x5ac>
   110e0:	9d800217 	ldw	r22,8(r19)
   110e4:	ad07883a 	add	r3,r21,r20
   110e8:	18c00054 	ori	r3,r3,1
   110ec:	b0c00115 	stw	r3,4(r22)
   110f0:	008000b4 	movhi	r2,2
   110f4:	10a30a17 	ldw	r2,-29656(r2)
   110f8:	1100022e 	bgeu	r2,r4,11104 <_malloc_r+0x344>
   110fc:	008000b4 	movhi	r2,2
   11100:	11230a15 	stw	r4,-29656(r2)
   11104:	008000b4 	movhi	r2,2
   11108:	10a30917 	ldw	r2,-29660(r2)
   1110c:	1100022e 	bgeu	r2,r4,11118 <_malloc_r+0x358>
   11110:	008000b4 	movhi	r2,2
   11114:	11230915 	stw	r4,-29660(r2)
   11118:	b021883a 	mov	r16,r22
   1111c:	00006d06 	br	112d4 <_malloc_r+0x514>
   11120:	99400117 	ldw	r5,4(r19)
   11124:	003f9a06 	br	10f90 <_malloc_r+0x1d0>
   11128:	88800054 	ori	r2,r17,1
   1112c:	80800115 	stw	r2,4(r16)
   11130:	8463883a 	add	r17,r16,r17
   11134:	9c400215 	stw	r17,8(r19)
   11138:	18c00054 	ori	r3,r3,1
   1113c:	88c00115 	stw	r3,4(r17)
   11140:	9009883a 	mov	r4,r18
   11144:	00136e40 	call	136e4 <__malloc_unlock>
   11148:	80800204 	addi	r2,r16,8
   1114c:	003f4506 	br	10e64 <_malloc_r+0xa4>
   11150:	81000317 	ldw	r4,12(r16)
   11154:	003f3906 	br	10e3c <_malloc_r+0x7c>
   11158:	14000317 	ldw	r16,12(r2)
   1115c:	143f331e 	bne	r2,r16,10e2c <_malloc_r+0x6c>
   11160:	39c00084 	addi	r7,r7,2
   11164:	003f6b06 	br	10f14 <_malloc_r+0x154>
   11168:	1006d27a 	srli	r3,r2,9
   1116c:	19000168 	cmpgeui	r4,r3,5
   11170:	20005026 	beq	r4,zero,112b4 <_malloc_r+0x4f4>
   11174:	19000568 	cmpgeui	r4,r3,21
   11178:	2000c01e 	bne	r4,zero,1147c <_malloc_r+0x6bc>
   1117c:	19801704 	addi	r6,r3,92
   11180:	300c90fa 	slli	r6,r6,3
   11184:	190016c4 	addi	r4,r3,91
   11188:	998d883a 	add	r6,r19,r6
   1118c:	30c00017 	ldw	r3,0(r6)
   11190:	31bffe04 	addi	r6,r6,-8
   11194:	30c0a926 	beq	r6,r3,1143c <_malloc_r+0x67c>
   11198:	023fff04 	movi	r8,-4
   1119c:	00000206 	br	111a8 <_malloc_r+0x3e8>
   111a0:	18c00217 	ldw	r3,8(r3)
   111a4:	30c00326 	beq	r6,r3,111b4 <_malloc_r+0x3f4>
   111a8:	19000117 	ldw	r4,4(r3)
   111ac:	2208703a 	and	r4,r4,r8
   111b0:	113ffb36 	bltu	r2,r4,111a0 <_malloc_r+0x3e0>
   111b4:	19800317 	ldw	r6,12(r3)
   111b8:	81800315 	stw	r6,12(r16)
   111bc:	80c00215 	stw	r3,8(r16)
   111c0:	34000215 	stw	r16,8(r6)
   111c4:	1c000315 	stw	r16,12(r3)
   111c8:	003f7106 	br	10f90 <_malloc_r+0x1d0>
   111cc:	10c00568 	cmpgeui	r3,r2,21
   111d0:	18004926 	beq	r3,zero,112f8 <_malloc_r+0x538>
   111d4:	10c01568 	cmpgeui	r3,r2,85
   111d8:	1800af1e 	bne	r3,zero,11498 <_malloc_r+0x6d8>
   111dc:	8804d33a 	srli	r2,r17,12
   111e0:	11c01bc4 	addi	r7,r2,111
   111e4:	380890fa 	slli	r4,r7,3
   111e8:	12001b84 	addi	r8,r2,110
   111ec:	003f3806 	br	10ed0 <_malloc_r+0x110>
   111f0:	63000044 	addi	r12,r12,1
   111f4:	608000cc 	andi	r2,r12,3
   111f8:	42000204 	addi	r8,r8,8
   111fc:	103f791e 	bne	r2,zero,10fe4 <_malloc_r+0x224>
   11200:	00004406 	br	11314 <_malloc_r+0x554>
   11204:	81000217 	ldw	r4,8(r16)
   11208:	89800054 	ori	r6,r17,1
   1120c:	81800115 	stw	r6,4(r16)
   11210:	20800315 	stw	r2,12(r4)
   11214:	11000215 	stw	r4,8(r2)
   11218:	8463883a 	add	r17,r16,r17
   1121c:	9c400515 	stw	r17,20(r19)
   11220:	9c400415 	stw	r17,16(r19)
   11224:	28800054 	ori	r2,r5,1
   11228:	88800115 	stw	r2,4(r17)
   1122c:	8a400315 	stw	r9,12(r17)
   11230:	8a400215 	stw	r9,8(r17)
   11234:	80c7883a 	add	r3,r16,r3
   11238:	19400015 	stw	r5,0(r3)
   1123c:	9009883a 	mov	r4,r18
   11240:	00136e40 	call	136e4 <__malloc_unlock>
   11244:	80800204 	addi	r2,r16,8
   11248:	003f0606 	br	10e64 <_malloc_r+0xa4>
   1124c:	8085883a 	add	r2,r16,r2
   11250:	10c00117 	ldw	r3,4(r2)
   11254:	9009883a 	mov	r4,r18
   11258:	18c00054 	ori	r3,r3,1
   1125c:	10c00115 	stw	r3,4(r2)
   11260:	00136e40 	call	136e4 <__malloc_unlock>
   11264:	80800204 	addi	r2,r16,8
   11268:	003efe06 	br	10e64 <_malloc_r+0xa4>
   1126c:	880ed0fa 	srli	r7,r17,3
   11270:	88800204 	addi	r2,r17,8
   11274:	003ee706 	br	10e14 <_malloc_r+0x54>
   11278:	89000054 	ori	r4,r17,1
   1127c:	81000115 	stw	r4,4(r16)
   11280:	8463883a 	add	r17,r16,r17
   11284:	9c400515 	stw	r17,20(r19)
   11288:	9c400415 	stw	r17,16(r19)
   1128c:	19000054 	ori	r4,r3,1
   11290:	89000115 	stw	r4,4(r17)
   11294:	8085883a 	add	r2,r16,r2
   11298:	8a400315 	stw	r9,12(r17)
   1129c:	8a400215 	stw	r9,8(r17)
   112a0:	10c00015 	stw	r3,0(r2)
   112a4:	9009883a 	mov	r4,r18
   112a8:	00136e40 	call	136e4 <__malloc_unlock>
   112ac:	80800204 	addi	r2,r16,8
   112b0:	003eec06 	br	10e64 <_malloc_r+0xa4>
   112b4:	1006d1ba 	srli	r3,r2,6
   112b8:	19800e44 	addi	r6,r3,57
   112bc:	300c90fa 	slli	r6,r6,3
   112c0:	19000e04 	addi	r4,r3,56
   112c4:	003fb006 	br	11188 <_malloc_r+0x3c8>
   112c8:	84c02426 	beq	r16,r19,1135c <_malloc_r+0x59c>
   112cc:	9c000217 	ldw	r16,8(r19)
   112d0:	80c00117 	ldw	r3,4(r16)
   112d4:	00bfff04 	movi	r2,-4
   112d8:	1884703a 	and	r2,r3,r2
   112dc:	1447c83a 	sub	r3,r2,r17
   112e0:	14400236 	bltu	r2,r17,112ec <_malloc_r+0x52c>
   112e4:	18800408 	cmpgei	r2,r3,16
   112e8:	103f8f1e 	bne	r2,zero,11128 <_malloc_r+0x368>
   112ec:	9009883a 	mov	r4,r18
   112f0:	00136e40 	call	136e4 <__malloc_unlock>
   112f4:	003f5206 	br	11040 <_malloc_r+0x280>
   112f8:	11c01704 	addi	r7,r2,92
   112fc:	380890fa 	slli	r4,r7,3
   11300:	120016c4 	addi	r8,r2,91
   11304:	003ef206 	br	10ed0 <_malloc_r+0x110>
   11308:	58800217 	ldw	r2,8(r11)
   1130c:	39ffffc4 	addi	r7,r7,-1
   11310:	12c0961e 	bne	r2,r11,1156c <_malloc_r+0x7ac>
   11314:	388000cc 	andi	r2,r7,3
   11318:	5afffe04 	addi	r11,r11,-8
   1131c:	103ffa1e 	bne	r2,zero,11308 <_malloc_r+0x548>
   11320:	98c00117 	ldw	r3,4(r19)
   11324:	0104303a 	nor	r2,zero,r4
   11328:	10c4703a 	and	r2,r2,r3
   1132c:	98800115 	stw	r2,4(r19)
   11330:	2109883a 	add	r4,r4,r4
   11334:	113f4836 	bltu	r2,r4,11058 <_malloc_r+0x298>
   11338:	203f4726 	beq	r4,zero,11058 <_malloc_r+0x298>
   1133c:	2086703a 	and	r3,r4,r2
   11340:	1800041e 	bne	r3,zero,11354 <_malloc_r+0x594>
   11344:	2109883a 	add	r4,r4,r4
   11348:	2086703a 	and	r3,r4,r2
   1134c:	63000104 	addi	r12,r12,4
   11350:	183ffc26 	beq	r3,zero,11344 <_malloc_r+0x584>
   11354:	600f883a 	mov	r7,r12
   11358:	003f1e06 	br	10fd4 <_malloc_r+0x214>
   1135c:	008000b4 	movhi	r2,2
   11360:	10e31517 	ldw	r3,-29612(r2)
   11364:	a0c7883a 	add	r3,r20,r3
   11368:	10e31515 	stw	r3,-29612(r2)
   1136c:	00800074 	movhi	r2,1
   11370:	109c6217 	ldw	r2,29064(r2)
   11374:	10bfffd8 	cmpnei	r2,r2,-1
   11378:	10004e26 	beq	r2,zero,114b4 <_malloc_r+0x6f4>
   1137c:	b5c5c83a 	sub	r2,r22,r23
   11380:	10c5883a 	add	r2,r2,r3
   11384:	00c000b4 	movhi	r3,2
   11388:	18a31515 	stw	r2,-29612(r3)
   1138c:	b70001cc 	andi	fp,r22,7
   11390:	e0003026 	beq	fp,zero,11454 <_malloc_r+0x694>
   11394:	b72dc83a 	sub	r22,r22,fp
   11398:	b5800204 	addi	r22,r22,8
   1139c:	01040204 	movi	r4,4104
   113a0:	2709c83a 	sub	r4,r4,fp
   113a4:	b529883a 	add	r20,r22,r20
   113a8:	2509c83a 	sub	r4,r4,r20
   113ac:	25c3ffcc 	andi	r23,r4,4095
   113b0:	b80b883a 	mov	r5,r23
   113b4:	9009883a 	mov	r4,r18
   113b8:	0011fcc0 	call	11fcc <_sbrk_r>
   113bc:	10ffffe0 	cmpeqi	r3,r2,-1
   113c0:	1800501e 	bne	r3,zero,11504 <_malloc_r+0x744>
   113c4:	1585c83a 	sub	r2,r2,r22
   113c8:	15e9883a 	add	r20,r2,r23
   113cc:	008000b4 	movhi	r2,2
   113d0:	10a31517 	ldw	r2,-29612(r2)
   113d4:	9d800215 	stw	r22,8(r19)
   113d8:	a0c00054 	ori	r3,r20,1
   113dc:	b889883a 	add	r4,r23,r2
   113e0:	008000b4 	movhi	r2,2
   113e4:	11231515 	stw	r4,-29612(r2)
   113e8:	b0c00115 	stw	r3,4(r22)
   113ec:	84ff4026 	beq	r16,r19,110f0 <_malloc_r+0x330>
   113f0:	a8800428 	cmpgeui	r2,r21,16
   113f4:	10003226 	beq	r2,zero,114c0 <_malloc_r+0x700>
   113f8:	80800117 	ldw	r2,4(r16)
   113fc:	017ffe04 	movi	r5,-8
   11400:	a8fffd04 	addi	r3,r21,-12
   11404:	1946703a 	and	r3,r3,r5
   11408:	1080004c 	andi	r2,r2,1
   1140c:	10c4b03a 	or	r2,r2,r3
   11410:	80800115 	stw	r2,4(r16)
   11414:	01400144 	movi	r5,5
   11418:	80c5883a 	add	r2,r16,r3
   1141c:	11400115 	stw	r5,4(r2)
   11420:	11400215 	stw	r5,8(r2)
   11424:	18c00428 	cmpgeui	r3,r3,16
   11428:	18003b1e 	bne	r3,zero,11518 <_malloc_r+0x758>
   1142c:	b0c00117 	ldw	r3,4(r22)
   11430:	003f2f06 	br	110f0 <_malloc_r+0x330>
   11434:	a5000404 	addi	r20,r20,16
   11438:	003f1a06 	br	110a4 <_malloc_r+0x2e4>
   1143c:	2009d0ba 	srai	r4,r4,2
   11440:	00800044 	movi	r2,1
   11444:	1104983a 	sll	r2,r2,r4
   11448:	288ab03a 	or	r5,r5,r2
   1144c:	99400115 	stw	r5,4(r19)
   11450:	003f5906 	br	111b8 <_malloc_r+0x3f8>
   11454:	b509883a 	add	r4,r22,r20
   11458:	0109c83a 	sub	r4,zero,r4
   1145c:	25c3ffcc 	andi	r23,r4,4095
   11460:	b80b883a 	mov	r5,r23
   11464:	9009883a 	mov	r4,r18
   11468:	0011fcc0 	call	11fcc <_sbrk_r>
   1146c:	10ffffe0 	cmpeqi	r3,r2,-1
   11470:	183fd426 	beq	r3,zero,113c4 <_malloc_r+0x604>
   11474:	002f883a 	mov	r23,zero
   11478:	003fd406 	br	113cc <_malloc_r+0x60c>
   1147c:	19001568 	cmpgeui	r4,r3,85
   11480:	2000121e 	bne	r4,zero,114cc <_malloc_r+0x70c>
   11484:	1006d33a 	srli	r3,r2,12
   11488:	19801bc4 	addi	r6,r3,111
   1148c:	300c90fa 	slli	r6,r6,3
   11490:	19001b84 	addi	r4,r3,110
   11494:	003f3c06 	br	11188 <_malloc_r+0x3c8>
   11498:	10c05568 	cmpgeui	r3,r2,341
   1149c:	1800121e 	bne	r3,zero,114e8 <_malloc_r+0x728>
   114a0:	8804d3fa 	srli	r2,r17,15
   114a4:	11c01e04 	addi	r7,r2,120
   114a8:	380890fa 	slli	r4,r7,3
   114ac:	12001dc4 	addi	r8,r2,119
   114b0:	003e8706 	br	10ed0 <_malloc_r+0x110>
   114b4:	00800074 	movhi	r2,1
   114b8:	159c6215 	stw	r22,29064(r2)
   114bc:	003fb306 	br	1138c <_malloc_r+0x5cc>
   114c0:	00800044 	movi	r2,1
   114c4:	b0800115 	stw	r2,4(r22)
   114c8:	003f8806 	br	112ec <_malloc_r+0x52c>
   114cc:	19005568 	cmpgeui	r4,r3,341
   114d0:	2000181e 	bne	r4,zero,11534 <_malloc_r+0x774>
   114d4:	1006d3fa 	srli	r3,r2,15
   114d8:	19801e04 	addi	r6,r3,120
   114dc:	300c90fa 	slli	r6,r6,3
   114e0:	19001dc4 	addi	r4,r3,119
   114e4:	003f2806 	br	11188 <_malloc_r+0x3c8>
   114e8:	10815568 	cmpgeui	r2,r2,1365
   114ec:	1000181e 	bne	r2,zero,11550 <_malloc_r+0x790>
   114f0:	8804d4ba 	srli	r2,r17,18
   114f4:	11c01f44 	addi	r7,r2,125
   114f8:	380890fa 	slli	r4,r7,3
   114fc:	12001f04 	addi	r8,r2,124
   11500:	003e7306 	br	10ed0 <_malloc_r+0x110>
   11504:	e73ffe04 	addi	fp,fp,-8
   11508:	a729883a 	add	r20,r20,fp
   1150c:	a5a9c83a 	sub	r20,r20,r22
   11510:	002f883a 	mov	r23,zero
   11514:	003fad06 	br	113cc <_malloc_r+0x60c>
   11518:	9009883a 	mov	r4,r18
   1151c:	81400204 	addi	r5,r16,8
   11520:	00128840 	call	12884 <_free_r>
   11524:	008000b4 	movhi	r2,2
   11528:	9d800217 	ldw	r22,8(r19)
   1152c:	11231517 	ldw	r4,-29612(r2)
   11530:	003fbe06 	br	1142c <_malloc_r+0x66c>
   11534:	18c15568 	cmpgeui	r3,r3,1365
   11538:	1800091e 	bne	r3,zero,11560 <_malloc_r+0x7a0>
   1153c:	1006d4ba 	srli	r3,r2,18
   11540:	19801f44 	addi	r6,r3,125
   11544:	300c90fa 	slli	r6,r6,3
   11548:	19001f04 	addi	r4,r3,124
   1154c:	003f0e06 	br	11188 <_malloc_r+0x3c8>
   11550:	0100fe04 	movi	r4,1016
   11554:	01c01fc4 	movi	r7,127
   11558:	02001f84 	movi	r8,126
   1155c:	003e5c06 	br	10ed0 <_malloc_r+0x110>
   11560:	0180fe04 	movi	r6,1016
   11564:	01001f84 	movi	r4,126
   11568:	003f0706 	br	11188 <_malloc_r+0x3c8>
   1156c:	98800117 	ldw	r2,4(r19)
   11570:	003f6f06 	br	11330 <_malloc_r+0x570>

00011574 <memchr>:
   11574:	defffc04 	addi	sp,sp,-16
   11578:	dc000015 	stw	r16,0(sp)
   1157c:	2021883a 	mov	r16,r4
   11580:	dc800215 	stw	r18,8(sp)
   11584:	dfc00315 	stw	ra,12(sp)
   11588:	dc400115 	stw	r17,4(sp)
   1158c:	808000cc 	andi	r2,r16,3
   11590:	2809883a 	mov	r4,r5
   11594:	2825883a 	mov	r18,r5
   11598:	10000e26 	beq	r2,zero,115d4 <memchr+0x60>
   1159c:	347fffc4 	addi	r17,r6,-1
   115a0:	30001726 	beq	r6,zero,11600 <memchr+0x8c>
   115a4:	28c03fcc 	andi	r3,r5,255
   115a8:	00000606 	br	115c4 <memchr+0x50>
   115ac:	84000044 	addi	r16,r16,1
   115b0:	808000cc 	andi	r2,r16,3
   115b4:	10000826 	beq	r2,zero,115d8 <memchr+0x64>
   115b8:	8c7fffc4 	addi	r17,r17,-1
   115bc:	88bfffe0 	cmpeqi	r2,r17,-1
   115c0:	10000f1e 	bne	r2,zero,11600 <memchr+0x8c>
   115c4:	80800003 	ldbu	r2,0(r16)
   115c8:	10fff81e 	bne	r2,r3,115ac <memchr+0x38>
   115cc:	8005883a 	mov	r2,r16
   115d0:	00000c06 	br	11604 <memchr+0x90>
   115d4:	3023883a 	mov	r17,r6
   115d8:	88800130 	cmpltui	r2,r17,4
   115dc:	10000f26 	beq	r2,zero,1161c <memchr+0xa8>
   115e0:	88000726 	beq	r17,zero,11600 <memchr+0x8c>
   115e4:	8463883a 	add	r17,r16,r17
   115e8:	8005883a 	mov	r2,r16
   115ec:	90c03fcc 	andi	r3,r18,255
   115f0:	11000003 	ldbu	r4,0(r2)
   115f4:	20c00326 	beq	r4,r3,11604 <memchr+0x90>
   115f8:	10800044 	addi	r2,r2,1
   115fc:	88bffc1e 	bne	r17,r2,115f0 <memchr+0x7c>
   11600:	0005883a 	mov	r2,zero
   11604:	dfc00317 	ldw	ra,12(sp)
   11608:	dc800217 	ldw	r18,8(sp)
   1160c:	dc400117 	ldw	r17,4(sp)
   11610:	dc000017 	ldw	r16,0(sp)
   11614:	dec00404 	addi	sp,sp,16
   11618:	f800283a 	ret
   1161c:	01404074 	movhi	r5,257
   11620:	29404044 	addi	r5,r5,257
   11624:	21003fcc 	andi	r4,r4,255
   11628:	00130ec0 	call	130ec <__mulsi3>
   1162c:	01bfbff4 	movhi	r6,65279
   11630:	01602074 	movhi	r5,32897
   11634:	31bfbfc4 	addi	r6,r6,-257
   11638:	29602004 	addi	r5,r5,-32640
   1163c:	00000406 	br	11650 <memchr+0xdc>
   11640:	8c7fff04 	addi	r17,r17,-4
   11644:	88c00128 	cmpgeui	r3,r17,4
   11648:	84000104 	addi	r16,r16,4
   1164c:	183fe426 	beq	r3,zero,115e0 <memchr+0x6c>
   11650:	80c00017 	ldw	r3,0(r16)
   11654:	10c6f03a 	xor	r3,r2,r3
   11658:	1989883a 	add	r4,r3,r6
   1165c:	00c6303a 	nor	r3,zero,r3
   11660:	20c6703a 	and	r3,r4,r3
   11664:	1946703a 	and	r3,r3,r5
   11668:	183ff526 	beq	r3,zero,11640 <memchr+0xcc>
   1166c:	003fdc06 	br	115e0 <memchr+0x6c>

00011670 <memcpy>:
   11670:	30c00428 	cmpgeui	r3,r6,16
   11674:	2005883a 	mov	r2,r4
   11678:	18000b1e 	bne	r3,zero,116a8 <memcpy+0x38>
   1167c:	2007883a 	mov	r3,r4
   11680:	31ffffc4 	addi	r7,r6,-1
   11684:	30003426 	beq	r6,zero,11758 <memcpy+0xe8>
   11688:	39c00044 	addi	r7,r7,1
   1168c:	19cf883a 	add	r7,r3,r7
   11690:	29800003 	ldbu	r6,0(r5)
   11694:	18c00044 	addi	r3,r3,1
   11698:	29400044 	addi	r5,r5,1
   1169c:	19bfffc5 	stb	r6,-1(r3)
   116a0:	19fffb1e 	bne	r3,r7,11690 <memcpy+0x20>
   116a4:	f800283a 	ret
   116a8:	2146b03a 	or	r3,r4,r5
   116ac:	18c000cc 	andi	r3,r3,3
   116b0:	18002a1e 	bne	r3,zero,1175c <memcpy+0xec>
   116b4:	333ffc04 	addi	r12,r6,-16
   116b8:	6018d13a 	srli	r12,r12,4
   116bc:	2811883a 	mov	r8,r5
   116c0:	200f883a 	mov	r7,r4
   116c4:	63000044 	addi	r12,r12,1
   116c8:	6018913a 	slli	r12,r12,4
   116cc:	2307883a 	add	r3,r4,r12
   116d0:	42c00017 	ldw	r11,0(r8)
   116d4:	42800117 	ldw	r10,4(r8)
   116d8:	42400217 	ldw	r9,8(r8)
   116dc:	41000317 	ldw	r4,12(r8)
   116e0:	39c00404 	addi	r7,r7,16
   116e4:	3afffc15 	stw	r11,-16(r7)
   116e8:	3abffd15 	stw	r10,-12(r7)
   116ec:	3a7ffe15 	stw	r9,-8(r7)
   116f0:	393fff15 	stw	r4,-4(r7)
   116f4:	42000404 	addi	r8,r8,16
   116f8:	38fff51e 	bne	r7,r3,116d0 <memcpy+0x60>
   116fc:	3100030c 	andi	r4,r6,12
   11700:	2b0b883a 	add	r5,r5,r12
   11704:	324003cc 	andi	r9,r6,15
   11708:	20001726 	beq	r4,zero,11768 <memcpy+0xf8>
   1170c:	2811883a 	mov	r8,r5
   11710:	1809883a 	mov	r4,r3
   11714:	1a57883a 	add	r11,r3,r9
   11718:	42800017 	ldw	r10,0(r8)
   1171c:	21000104 	addi	r4,r4,4
   11720:	590fc83a 	sub	r7,r11,r4
   11724:	39c00128 	cmpgeui	r7,r7,4
   11728:	22bfff15 	stw	r10,-4(r4)
   1172c:	42000104 	addi	r8,r8,4
   11730:	383ff91e 	bne	r7,zero,11718 <memcpy+0xa8>
   11734:	493fff04 	addi	r4,r9,-4
   11738:	2008d0ba 	srli	r4,r4,2
   1173c:	318000cc 	andi	r6,r6,3
   11740:	31ffffc4 	addi	r7,r6,-1
   11744:	21000044 	addi	r4,r4,1
   11748:	200890ba 	slli	r4,r4,2
   1174c:	1907883a 	add	r3,r3,r4
   11750:	290b883a 	add	r5,r5,r4
   11754:	303fcc1e 	bne	r6,zero,11688 <memcpy+0x18>
   11758:	f800283a 	ret
   1175c:	31ffffc4 	addi	r7,r6,-1
   11760:	2007883a 	mov	r3,r4
   11764:	003fc806 	br	11688 <memcpy+0x18>
   11768:	480d883a 	mov	r6,r9
   1176c:	003fc406 	br	11680 <memcpy+0x10>

00011770 <memmove>:
   11770:	2005883a 	mov	r2,r4
   11774:	29000a2e 	bgeu	r5,r4,117a0 <memmove+0x30>
   11778:	298f883a 	add	r7,r5,r6
   1177c:	21c0082e 	bgeu	r4,r7,117a0 <memmove+0x30>
   11780:	2187883a 	add	r3,r4,r6
   11784:	30001226 	beq	r6,zero,117d0 <memmove+0x60>
   11788:	397fffc3 	ldbu	r5,-1(r7)
   1178c:	18ffffc4 	addi	r3,r3,-1
   11790:	39ffffc4 	addi	r7,r7,-1
   11794:	19400005 	stb	r5,0(r3)
   11798:	10fffb1e 	bne	r2,r3,11788 <memmove+0x18>
   1179c:	f800283a 	ret
   117a0:	30c00428 	cmpgeui	r3,r6,16
   117a4:	18000b1e 	bne	r3,zero,117d4 <memmove+0x64>
   117a8:	1007883a 	mov	r3,r2
   117ac:	31ffffc4 	addi	r7,r6,-1
   117b0:	30003626 	beq	r6,zero,1188c <memmove+0x11c>
   117b4:	39c00044 	addi	r7,r7,1
   117b8:	19cf883a 	add	r7,r3,r7
   117bc:	29800003 	ldbu	r6,0(r5)
   117c0:	18c00044 	addi	r3,r3,1
   117c4:	29400044 	addi	r5,r5,1
   117c8:	19bfffc5 	stb	r6,-1(r3)
   117cc:	19fffb1e 	bne	r3,r7,117bc <memmove+0x4c>
   117d0:	f800283a 	ret
   117d4:	1146b03a 	or	r3,r2,r5
   117d8:	18c000cc 	andi	r3,r3,3
   117dc:	1800281e 	bne	r3,zero,11880 <memmove+0x110>
   117e0:	313ffc04 	addi	r4,r6,-16
   117e4:	2008d13a 	srli	r4,r4,4
   117e8:	2811883a 	mov	r8,r5
   117ec:	100f883a 	mov	r7,r2
   117f0:	21000044 	addi	r4,r4,1
   117f4:	2008913a 	slli	r4,r4,4
   117f8:	1107883a 	add	r3,r2,r4
   117fc:	42400017 	ldw	r9,0(r8)
   11800:	42000404 	addi	r8,r8,16
   11804:	39c00404 	addi	r7,r7,16
   11808:	3a7ffc15 	stw	r9,-16(r7)
   1180c:	427ffd17 	ldw	r9,-12(r8)
   11810:	3a7ffd15 	stw	r9,-12(r7)
   11814:	427ffe17 	ldw	r9,-8(r8)
   11818:	3a7ffe15 	stw	r9,-8(r7)
   1181c:	427fff17 	ldw	r9,-4(r8)
   11820:	3a7fff15 	stw	r9,-4(r7)
   11824:	38fff51e 	bne	r7,r3,117fc <memmove+0x8c>
   11828:	31c0030c 	andi	r7,r6,12
   1182c:	290b883a 	add	r5,r5,r4
   11830:	324003cc 	andi	r9,r6,15
   11834:	38001626 	beq	r7,zero,11890 <memmove+0x120>
   11838:	2809883a 	mov	r4,r5
   1183c:	180f883a 	mov	r7,r3
   11840:	1a57883a 	add	r11,r3,r9
   11844:	22800017 	ldw	r10,0(r4)
   11848:	39c00104 	addi	r7,r7,4
   1184c:	59d1c83a 	sub	r8,r11,r7
   11850:	42000128 	cmpgeui	r8,r8,4
   11854:	3abfff15 	stw	r10,-4(r7)
   11858:	21000104 	addi	r4,r4,4
   1185c:	403ff91e 	bne	r8,zero,11844 <memmove+0xd4>
   11860:	493fff04 	addi	r4,r9,-4
   11864:	2008d0ba 	srli	r4,r4,2
   11868:	318000cc 	andi	r6,r6,3
   1186c:	21000044 	addi	r4,r4,1
   11870:	200890ba 	slli	r4,r4,2
   11874:	1907883a 	add	r3,r3,r4
   11878:	290b883a 	add	r5,r5,r4
   1187c:	003fcb06 	br	117ac <memmove+0x3c>
   11880:	31ffffc4 	addi	r7,r6,-1
   11884:	1007883a 	mov	r3,r2
   11888:	003fca06 	br	117b4 <memmove+0x44>
   1188c:	f800283a 	ret
   11890:	480d883a 	mov	r6,r9
   11894:	003fc506 	br	117ac <memmove+0x3c>

00011898 <memset>:
   11898:	defffb04 	addi	sp,sp,-20
   1189c:	dc800215 	stw	r18,8(sp)
   118a0:	dc400115 	stw	r17,4(sp)
   118a4:	dfc00415 	stw	ra,16(sp)
   118a8:	dcc00315 	stw	r19,12(sp)
   118ac:	dc000015 	stw	r16,0(sp)
   118b0:	208000cc 	andi	r2,r4,3
   118b4:	2023883a 	mov	r17,r4
   118b8:	2825883a 	mov	r18,r5
   118bc:	10004026 	beq	r2,zero,119c0 <memset+0x128>
   118c0:	34ffffc4 	addi	r19,r6,-1
   118c4:	30003326 	beq	r6,zero,11994 <memset+0xfc>
   118c8:	280f883a 	mov	r7,r5
   118cc:	2021883a 	mov	r16,r4
   118d0:	00000306 	br	118e0 <memset+0x48>
   118d4:	9cffffc4 	addi	r19,r19,-1
   118d8:	99bfffe0 	cmpeqi	r6,r19,-1
   118dc:	30002d1e 	bne	r6,zero,11994 <memset+0xfc>
   118e0:	84000044 	addi	r16,r16,1
   118e4:	818000cc 	andi	r6,r16,3
   118e8:	81ffffc5 	stb	r7,-1(r16)
   118ec:	303ff91e 	bne	r6,zero,118d4 <memset+0x3c>
   118f0:	98800128 	cmpgeui	r2,r19,4
   118f4:	10002126 	beq	r2,zero,1197c <memset+0xe4>
   118f8:	01404074 	movhi	r5,257
   118fc:	29404044 	addi	r5,r5,257
   11900:	91003fcc 	andi	r4,r18,255
   11904:	00130ec0 	call	130ec <__mulsi3>
   11908:	98c00430 	cmpltui	r3,r19,16
   1190c:	18002f1e 	bne	r3,zero,119cc <memset+0x134>
   11910:	99bffc04 	addi	r6,r19,-16
   11914:	300cd13a 	srli	r6,r6,4
   11918:	31800044 	addi	r6,r6,1
   1191c:	300c913a 	slli	r6,r6,4
   11920:	818d883a 	add	r6,r16,r6
   11924:	80800015 	stw	r2,0(r16)
   11928:	80800115 	stw	r2,4(r16)
   1192c:	80800215 	stw	r2,8(r16)
   11930:	80800315 	stw	r2,12(r16)
   11934:	84000404 	addi	r16,r16,16
   11938:	81bffa1e 	bne	r16,r6,11924 <memset+0x8c>
   1193c:	9900030c 	andi	r4,r19,12
   11940:	98c003cc 	andi	r3,r19,15
   11944:	20001b26 	beq	r4,zero,119b4 <memset+0x11c>
   11948:	3009883a 	mov	r4,r6
   1194c:	30cb883a 	add	r5,r6,r3
   11950:	21000104 	addi	r4,r4,4
   11954:	290fc83a 	sub	r7,r5,r4
   11958:	39c00128 	cmpgeui	r7,r7,4
   1195c:	20bfff15 	stw	r2,-4(r4)
   11960:	383ffb1e 	bne	r7,zero,11950 <memset+0xb8>
   11964:	1c3fff04 	addi	r16,r3,-4
   11968:	8020d0ba 	srli	r16,r16,2
   1196c:	1cc000cc 	andi	r19,r3,3
   11970:	84000044 	addi	r16,r16,1
   11974:	802090ba 	slli	r16,r16,2
   11978:	3421883a 	add	r16,r6,r16
   1197c:	98000526 	beq	r19,zero,11994 <memset+0xfc>
   11980:	900b883a 	mov	r5,r18
   11984:	84c7883a 	add	r3,r16,r19
   11988:	84000044 	addi	r16,r16,1
   1198c:	817fffc5 	stb	r5,-1(r16)
   11990:	1c3ffd1e 	bne	r3,r16,11988 <memset+0xf0>
   11994:	8805883a 	mov	r2,r17
   11998:	dfc00417 	ldw	ra,16(sp)
   1199c:	dcc00317 	ldw	r19,12(sp)
   119a0:	dc800217 	ldw	r18,8(sp)
   119a4:	dc400117 	ldw	r17,4(sp)
   119a8:	dc000017 	ldw	r16,0(sp)
   119ac:	dec00504 	addi	sp,sp,20
   119b0:	f800283a 	ret
   119b4:	1827883a 	mov	r19,r3
   119b8:	983ff11e 	bne	r19,zero,11980 <memset+0xe8>
   119bc:	003ff506 	br	11994 <memset+0xfc>
   119c0:	2021883a 	mov	r16,r4
   119c4:	3027883a 	mov	r19,r6
   119c8:	003fc906 	br	118f0 <memset+0x58>
   119cc:	800d883a 	mov	r6,r16
   119d0:	9807883a 	mov	r3,r19
   119d4:	003fdc06 	br	11948 <memset+0xb0>

000119d8 <_realloc_r>:
   119d8:	defff504 	addi	sp,sp,-44
   119dc:	dd000515 	stw	r20,20(sp)
   119e0:	dfc00a15 	stw	ra,40(sp)
   119e4:	df000915 	stw	fp,36(sp)
   119e8:	ddc00815 	stw	r23,32(sp)
   119ec:	dd800715 	stw	r22,28(sp)
   119f0:	dd400615 	stw	r21,24(sp)
   119f4:	dcc00415 	stw	r19,16(sp)
   119f8:	dc800315 	stw	r18,12(sp)
   119fc:	dc400215 	stw	r17,8(sp)
   11a00:	dc000115 	stw	r16,4(sp)
   11a04:	3029883a 	mov	r20,r6
   11a08:	28008a26 	beq	r5,zero,11c34 <_realloc_r+0x25c>
   11a0c:	2821883a 	mov	r16,r5
   11a10:	202b883a 	mov	r21,r4
   11a14:	00136c00 	call	136c0 <__malloc_lock>
   11a18:	84ffff17 	ldw	r19,-4(r16)
   11a1c:	a44002c4 	addi	r17,r20,11
   11a20:	04bfff04 	movi	r18,-4
   11a24:	888005f0 	cmpltui	r2,r17,23
   11a28:	85bffe04 	addi	r22,r16,-8
   11a2c:	9ca4703a 	and	r18,r19,r18
   11a30:	10005a1e 	bne	r2,zero,11b9c <_realloc_r+0x1c4>
   11a34:	00bffe04 	movi	r2,-8
   11a38:	88a2703a 	and	r17,r17,r2
   11a3c:	88005916 	blt	r17,zero,11ba4 <_realloc_r+0x1cc>
   11a40:	8d005836 	bltu	r17,r20,11ba4 <_realloc_r+0x1cc>
   11a44:	94403b0e 	bge	r18,r17,11b34 <_realloc_r+0x15c>
   11a48:	05c00074 	movhi	r23,1
   11a4c:	bdd6dc04 	addi	r23,r23,23408
   11a50:	b9400217 	ldw	r5,8(r23)
   11a54:	b489883a 	add	r4,r22,r18
   11a58:	20800117 	ldw	r2,4(r4)
   11a5c:	29008e26 	beq	r5,r4,11c98 <_realloc_r+0x2c0>
   11a60:	00ffff84 	movi	r3,-2
   11a64:	10c6703a 	and	r3,r2,r3
   11a68:	20c7883a 	add	r3,r4,r3
   11a6c:	18c00117 	ldw	r3,4(r3)
   11a70:	18c0004c 	andi	r3,r3,1
   11a74:	18004f1e 	bne	r3,zero,11bb4 <_realloc_r+0x1dc>
   11a78:	00ffff04 	movi	r3,-4
   11a7c:	10c4703a 	and	r2,r2,r3
   11a80:	9087883a 	add	r3,r18,r2
   11a84:	1c40c30e 	bge	r3,r17,11d94 <_realloc_r+0x3bc>
   11a88:	9cc0004c 	andi	r19,r19,1
   11a8c:	98004b1e 	bne	r19,zero,11bbc <_realloc_r+0x1e4>
   11a90:	873ffe17 	ldw	fp,-8(r16)
   11a94:	00ffff04 	movi	r3,-4
   11a98:	b739c83a 	sub	fp,r22,fp
   11a9c:	e4c00117 	ldw	r19,4(fp)
   11aa0:	98c6703a 	and	r3,r19,r3
   11aa4:	20000426 	beq	r4,zero,11ab8 <_realloc_r+0xe0>
   11aa8:	90cf883a 	add	r7,r18,r3
   11aac:	388f883a 	add	r7,r7,r2
   11ab0:	2900c226 	beq	r5,r4,11dbc <_realloc_r+0x3e4>
   11ab4:	3c409e0e 	bge	r7,r17,11d30 <_realloc_r+0x358>
   11ab8:	e0004026 	beq	fp,zero,11bbc <_realloc_r+0x1e4>
   11abc:	90ef883a 	add	r23,r18,r3
   11ac0:	bc403e16 	blt	r23,r17,11bbc <_realloc_r+0x1e4>
   11ac4:	e0800317 	ldw	r2,12(fp)
   11ac8:	e0c00217 	ldw	r3,8(fp)
   11acc:	91bfff04 	addi	r6,r18,-4
   11ad0:	31400968 	cmpgeui	r5,r6,37
   11ad4:	18800315 	stw	r2,12(r3)
   11ad8:	10c00215 	stw	r3,8(r2)
   11adc:	e1000204 	addi	r4,fp,8
   11ae0:	2800e71e 	bne	r5,zero,11e80 <_realloc_r+0x4a8>
   11ae4:	30800530 	cmpltui	r2,r6,20
   11ae8:	1000e31e 	bne	r2,zero,11e78 <_realloc_r+0x4a0>
   11aec:	80c00017 	ldw	r3,0(r16)
   11af0:	30800728 	cmpgeui	r2,r6,28
   11af4:	e0c00215 	stw	r3,8(fp)
   11af8:	80c00117 	ldw	r3,4(r16)
   11afc:	e0c00315 	stw	r3,12(fp)
   11b00:	1000fa1e 	bne	r2,zero,11eec <_realloc_r+0x514>
   11b04:	84000204 	addi	r16,r16,8
   11b08:	e0800404 	addi	r2,fp,16
   11b0c:	80c00017 	ldw	r3,0(r16)
   11b10:	b825883a 	mov	r18,r23
   11b14:	10c00015 	stw	r3,0(r2)
   11b18:	80c00117 	ldw	r3,4(r16)
   11b1c:	e02d883a 	mov	r22,fp
   11b20:	10c00115 	stw	r3,4(r2)
   11b24:	80c00217 	ldw	r3,8(r16)
   11b28:	2021883a 	mov	r16,r4
   11b2c:	10c00215 	stw	r3,8(r2)
   11b30:	e4c00117 	ldw	r19,4(fp)
   11b34:	9447c83a 	sub	r3,r18,r17
   11b38:	19000430 	cmpltui	r4,r3,16
   11b3c:	9cc0004c 	andi	r19,r19,1
   11b40:	b485883a 	add	r2,r22,r18
   11b44:	20004826 	beq	r4,zero,11c68 <_realloc_r+0x290>
   11b48:	94e6b03a 	or	r19,r18,r19
   11b4c:	b4c00115 	stw	r19,4(r22)
   11b50:	10c00117 	ldw	r3,4(r2)
   11b54:	18c00054 	ori	r3,r3,1
   11b58:	10c00115 	stw	r3,4(r2)
   11b5c:	a809883a 	mov	r4,r21
   11b60:	00136e40 	call	136e4 <__malloc_unlock>
   11b64:	8029883a 	mov	r20,r16
   11b68:	a005883a 	mov	r2,r20
   11b6c:	dfc00a17 	ldw	ra,40(sp)
   11b70:	df000917 	ldw	fp,36(sp)
   11b74:	ddc00817 	ldw	r23,32(sp)
   11b78:	dd800717 	ldw	r22,28(sp)
   11b7c:	dd400617 	ldw	r21,24(sp)
   11b80:	dd000517 	ldw	r20,20(sp)
   11b84:	dcc00417 	ldw	r19,16(sp)
   11b88:	dc800317 	ldw	r18,12(sp)
   11b8c:	dc400217 	ldw	r17,8(sp)
   11b90:	dc000117 	ldw	r16,4(sp)
   11b94:	dec00b04 	addi	sp,sp,44
   11b98:	f800283a 	ret
   11b9c:	04400404 	movi	r17,16
   11ba0:	8d3fa82e 	bgeu	r17,r20,11a44 <_realloc_r+0x6c>
   11ba4:	00800304 	movi	r2,12
   11ba8:	a8800015 	stw	r2,0(r21)
   11bac:	0029883a 	mov	r20,zero
   11bb0:	003fed06 	br	11b68 <_realloc_r+0x190>
   11bb4:	9cc0004c 	andi	r19,r19,1
   11bb8:	98004e26 	beq	r19,zero,11cf4 <_realloc_r+0x31c>
   11bbc:	a00b883a 	mov	r5,r20
   11bc0:	a809883a 	mov	r4,r21
   11bc4:	0010dc00 	call	10dc0 <_malloc_r>
   11bc8:	1029883a 	mov	r20,r2
   11bcc:	1000bd26 	beq	r2,zero,11ec4 <_realloc_r+0x4ec>
   11bd0:	84ffff17 	ldw	r19,-4(r16)
   11bd4:	10fffe04 	addi	r3,r2,-8
   11bd8:	00bfff84 	movi	r2,-2
   11bdc:	9884703a 	and	r2,r19,r2
   11be0:	b085883a 	add	r2,r22,r2
   11be4:	10c03e26 	beq	r2,r3,11ce0 <_realloc_r+0x308>
   11be8:	91bfff04 	addi	r6,r18,-4
   11bec:	30800968 	cmpgeui	r2,r6,37
   11bf0:	10006e1e 	bne	r2,zero,11dac <_realloc_r+0x3d4>
   11bf4:	30800530 	cmpltui	r2,r6,20
   11bf8:	10004426 	beq	r2,zero,11d0c <_realloc_r+0x334>
   11bfc:	a005883a 	mov	r2,r20
   11c00:	8007883a 	mov	r3,r16
   11c04:	19000017 	ldw	r4,0(r3)
   11c08:	11000015 	stw	r4,0(r2)
   11c0c:	19000117 	ldw	r4,4(r3)
   11c10:	11000115 	stw	r4,4(r2)
   11c14:	18c00217 	ldw	r3,8(r3)
   11c18:	10c00215 	stw	r3,8(r2)
   11c1c:	a809883a 	mov	r4,r21
   11c20:	800b883a 	mov	r5,r16
   11c24:	00128840 	call	12884 <_free_r>
   11c28:	a809883a 	mov	r4,r21
   11c2c:	00136e40 	call	136e4 <__malloc_unlock>
   11c30:	003fcd06 	br	11b68 <_realloc_r+0x190>
   11c34:	300b883a 	mov	r5,r6
   11c38:	dfc00a17 	ldw	ra,40(sp)
   11c3c:	df000917 	ldw	fp,36(sp)
   11c40:	ddc00817 	ldw	r23,32(sp)
   11c44:	dd800717 	ldw	r22,28(sp)
   11c48:	dd400617 	ldw	r21,24(sp)
   11c4c:	dd000517 	ldw	r20,20(sp)
   11c50:	dcc00417 	ldw	r19,16(sp)
   11c54:	dc800317 	ldw	r18,12(sp)
   11c58:	dc400217 	ldw	r17,8(sp)
   11c5c:	dc000117 	ldw	r16,4(sp)
   11c60:	dec00b04 	addi	sp,sp,44
   11c64:	0010dc01 	jmpi	10dc0 <_malloc_r>
   11c68:	8ce6b03a 	or	r19,r17,r19
   11c6c:	b4c00115 	stw	r19,4(r22)
   11c70:	b44b883a 	add	r5,r22,r17
   11c74:	18c00054 	ori	r3,r3,1
   11c78:	28c00115 	stw	r3,4(r5)
   11c7c:	10c00117 	ldw	r3,4(r2)
   11c80:	29400204 	addi	r5,r5,8
   11c84:	a809883a 	mov	r4,r21
   11c88:	18c00054 	ori	r3,r3,1
   11c8c:	10c00115 	stw	r3,4(r2)
   11c90:	00128840 	call	12884 <_free_r>
   11c94:	003fb106 	br	11b5c <_realloc_r+0x184>
   11c98:	00ffff04 	movi	r3,-4
   11c9c:	10c4703a 	and	r2,r2,r3
   11ca0:	1487883a 	add	r3,r2,r18
   11ca4:	89800404 	addi	r6,r17,16
   11ca8:	19bf7716 	blt	r3,r6,11a88 <_realloc_r+0xb0>
   11cac:	b46d883a 	add	r22,r22,r17
   11cb0:	1c45c83a 	sub	r2,r3,r17
   11cb4:	bd800215 	stw	r22,8(r23)
   11cb8:	10800054 	ori	r2,r2,1
   11cbc:	b0800115 	stw	r2,4(r22)
   11cc0:	80bfff17 	ldw	r2,-4(r16)
   11cc4:	a809883a 	mov	r4,r21
   11cc8:	8029883a 	mov	r20,r16
   11ccc:	1080004c 	andi	r2,r2,1
   11cd0:	1444b03a 	or	r2,r2,r17
   11cd4:	80bfff15 	stw	r2,-4(r16)
   11cd8:	00136e40 	call	136e4 <__malloc_unlock>
   11cdc:	003fa206 	br	11b68 <_realloc_r+0x190>
   11ce0:	a0bfff17 	ldw	r2,-4(r20)
   11ce4:	00ffff04 	movi	r3,-4
   11ce8:	10c4703a 	and	r2,r2,r3
   11cec:	90a5883a 	add	r18,r18,r2
   11cf0:	003f9006 	br	11b34 <_realloc_r+0x15c>
   11cf4:	873ffe17 	ldw	fp,-8(r16)
   11cf8:	00bfff04 	movi	r2,-4
   11cfc:	b739c83a 	sub	fp,r22,fp
   11d00:	e0c00117 	ldw	r3,4(fp)
   11d04:	1886703a 	and	r3,r3,r2
   11d08:	003f6b06 	br	11ab8 <_realloc_r+0xe0>
   11d0c:	80c00017 	ldw	r3,0(r16)
   11d10:	30800728 	cmpgeui	r2,r6,28
   11d14:	a0c00015 	stw	r3,0(r20)
   11d18:	80c00117 	ldw	r3,4(r16)
   11d1c:	a0c00115 	stw	r3,4(r20)
   11d20:	10004c1e 	bne	r2,zero,11e54 <_realloc_r+0x47c>
   11d24:	80c00204 	addi	r3,r16,8
   11d28:	a0800204 	addi	r2,r20,8
   11d2c:	003fb506 	br	11c04 <_realloc_r+0x22c>
   11d30:	20800317 	ldw	r2,12(r4)
   11d34:	20c00217 	ldw	r3,8(r4)
   11d38:	91bfff04 	addi	r6,r18,-4
   11d3c:	31400968 	cmpgeui	r5,r6,37
   11d40:	18800315 	stw	r2,12(r3)
   11d44:	10c00215 	stw	r3,8(r2)
   11d48:	e0c00217 	ldw	r3,8(fp)
   11d4c:	e0800317 	ldw	r2,12(fp)
   11d50:	e1000204 	addi	r4,fp,8
   11d54:	18800315 	stw	r2,12(r3)
   11d58:	10c00215 	stw	r3,8(r2)
   11d5c:	2800511e 	bne	r5,zero,11ea4 <_realloc_r+0x4cc>
   11d60:	30800530 	cmpltui	r2,r6,20
   11d64:	10004d1e 	bne	r2,zero,11e9c <_realloc_r+0x4c4>
   11d68:	80c00017 	ldw	r3,0(r16)
   11d6c:	30800728 	cmpgeui	r2,r6,28
   11d70:	e0c00215 	stw	r3,8(fp)
   11d74:	80c00117 	ldw	r3,4(r16)
   11d78:	e0c00315 	stw	r3,12(fp)
   11d7c:	1000641e 	bne	r2,zero,11f10 <_realloc_r+0x538>
   11d80:	84000204 	addi	r16,r16,8
   11d84:	e0800404 	addi	r2,fp,16
   11d88:	80c00017 	ldw	r3,0(r16)
   11d8c:	3825883a 	mov	r18,r7
   11d90:	003f6006 	br	11b14 <_realloc_r+0x13c>
   11d94:	20800317 	ldw	r2,12(r4)
   11d98:	21000217 	ldw	r4,8(r4)
   11d9c:	1825883a 	mov	r18,r3
   11da0:	20800315 	stw	r2,12(r4)
   11da4:	11000215 	stw	r4,8(r2)
   11da8:	003f6206 	br	11b34 <_realloc_r+0x15c>
   11dac:	800b883a 	mov	r5,r16
   11db0:	a009883a 	mov	r4,r20
   11db4:	00117700 	call	11770 <memmove>
   11db8:	003f9806 	br	11c1c <_realloc_r+0x244>
   11dbc:	88800404 	addi	r2,r17,16
   11dc0:	38bf3d16 	blt	r7,r2,11ab8 <_realloc_r+0xe0>
   11dc4:	e0800317 	ldw	r2,12(fp)
   11dc8:	e0c00217 	ldw	r3,8(fp)
   11dcc:	91bfff04 	addi	r6,r18,-4
   11dd0:	31000968 	cmpgeui	r4,r6,37
   11dd4:	18800315 	stw	r2,12(r3)
   11dd8:	10c00215 	stw	r3,8(r2)
   11ddc:	e5000204 	addi	r20,fp,8
   11de0:	2000561e 	bne	r4,zero,11f3c <_realloc_r+0x564>
   11de4:	30800530 	cmpltui	r2,r6,20
   11de8:	1000521e 	bne	r2,zero,11f34 <_realloc_r+0x55c>
   11dec:	80c00017 	ldw	r3,0(r16)
   11df0:	30800728 	cmpgeui	r2,r6,28
   11df4:	e0c00215 	stw	r3,8(fp)
   11df8:	80c00117 	ldw	r3,4(r16)
   11dfc:	e0c00315 	stw	r3,12(fp)
   11e00:	1000541e 	bne	r2,zero,11f54 <_realloc_r+0x57c>
   11e04:	84000204 	addi	r16,r16,8
   11e08:	e0800404 	addi	r2,fp,16
   11e0c:	80c00017 	ldw	r3,0(r16)
   11e10:	10c00015 	stw	r3,0(r2)
   11e14:	80c00117 	ldw	r3,4(r16)
   11e18:	10c00115 	stw	r3,4(r2)
   11e1c:	80c00217 	ldw	r3,8(r16)
   11e20:	10c00215 	stw	r3,8(r2)
   11e24:	e447883a 	add	r3,fp,r17
   11e28:	3c45c83a 	sub	r2,r7,r17
   11e2c:	b8c00215 	stw	r3,8(r23)
   11e30:	10800054 	ori	r2,r2,1
   11e34:	18800115 	stw	r2,4(r3)
   11e38:	e0800117 	ldw	r2,4(fp)
   11e3c:	a809883a 	mov	r4,r21
   11e40:	1080004c 	andi	r2,r2,1
   11e44:	1444b03a 	or	r2,r2,r17
   11e48:	e0800115 	stw	r2,4(fp)
   11e4c:	00136e40 	call	136e4 <__malloc_unlock>
   11e50:	003f4506 	br	11b68 <_realloc_r+0x190>
   11e54:	80800217 	ldw	r2,8(r16)
   11e58:	31800920 	cmpeqi	r6,r6,36
   11e5c:	a0800215 	stw	r2,8(r20)
   11e60:	80800317 	ldw	r2,12(r16)
   11e64:	a0800315 	stw	r2,12(r20)
   11e68:	3000191e 	bne	r6,zero,11ed0 <_realloc_r+0x4f8>
   11e6c:	80c00404 	addi	r3,r16,16
   11e70:	a0800404 	addi	r2,r20,16
   11e74:	003f6306 	br	11c04 <_realloc_r+0x22c>
   11e78:	2005883a 	mov	r2,r4
   11e7c:	003f2306 	br	11b0c <_realloc_r+0x134>
   11e80:	800b883a 	mov	r5,r16
   11e84:	00117700 	call	11770 <memmove>
   11e88:	1021883a 	mov	r16,r2
   11e8c:	e4c00117 	ldw	r19,4(fp)
   11e90:	b825883a 	mov	r18,r23
   11e94:	e02d883a 	mov	r22,fp
   11e98:	003f2606 	br	11b34 <_realloc_r+0x15c>
   11e9c:	2005883a 	mov	r2,r4
   11ea0:	003fb906 	br	11d88 <_realloc_r+0x3b0>
   11ea4:	800b883a 	mov	r5,r16
   11ea8:	d9c00015 	stw	r7,0(sp)
   11eac:	00117700 	call	11770 <memmove>
   11eb0:	d9c00017 	ldw	r7,0(sp)
   11eb4:	1021883a 	mov	r16,r2
   11eb8:	e02d883a 	mov	r22,fp
   11ebc:	3825883a 	mov	r18,r7
   11ec0:	003f1c06 	br	11b34 <_realloc_r+0x15c>
   11ec4:	a809883a 	mov	r4,r21
   11ec8:	00136e40 	call	136e4 <__malloc_unlock>
   11ecc:	003f3706 	br	11bac <_realloc_r+0x1d4>
   11ed0:	81000417 	ldw	r4,16(r16)
   11ed4:	80c00604 	addi	r3,r16,24
   11ed8:	a0800604 	addi	r2,r20,24
   11edc:	a1000415 	stw	r4,16(r20)
   11ee0:	81000517 	ldw	r4,20(r16)
   11ee4:	a1000515 	stw	r4,20(r20)
   11ee8:	003f4606 	br	11c04 <_realloc_r+0x22c>
   11eec:	80800217 	ldw	r2,8(r16)
   11ef0:	31800920 	cmpeqi	r6,r6,36
   11ef4:	e0800415 	stw	r2,16(fp)
   11ef8:	80800317 	ldw	r2,12(r16)
   11efc:	e0800515 	stw	r2,20(fp)
   11f00:	30001d1e 	bne	r6,zero,11f78 <_realloc_r+0x5a0>
   11f04:	84000404 	addi	r16,r16,16
   11f08:	e0800604 	addi	r2,fp,24
   11f0c:	003eff06 	br	11b0c <_realloc_r+0x134>
   11f10:	80800217 	ldw	r2,8(r16)
   11f14:	31800920 	cmpeqi	r6,r6,36
   11f18:	e0800415 	stw	r2,16(fp)
   11f1c:	80800317 	ldw	r2,12(r16)
   11f20:	e0800515 	stw	r2,20(fp)
   11f24:	30001b1e 	bne	r6,zero,11f94 <_realloc_r+0x5bc>
   11f28:	84000404 	addi	r16,r16,16
   11f2c:	e0800604 	addi	r2,fp,24
   11f30:	003f9506 	br	11d88 <_realloc_r+0x3b0>
   11f34:	a005883a 	mov	r2,r20
   11f38:	003fb406 	br	11e0c <_realloc_r+0x434>
   11f3c:	800b883a 	mov	r5,r16
   11f40:	a009883a 	mov	r4,r20
   11f44:	d9c00015 	stw	r7,0(sp)
   11f48:	00117700 	call	11770 <memmove>
   11f4c:	d9c00017 	ldw	r7,0(sp)
   11f50:	003fb406 	br	11e24 <_realloc_r+0x44c>
   11f54:	80800217 	ldw	r2,8(r16)
   11f58:	31800920 	cmpeqi	r6,r6,36
   11f5c:	e0800415 	stw	r2,16(fp)
   11f60:	80800317 	ldw	r2,12(r16)
   11f64:	e0800515 	stw	r2,20(fp)
   11f68:	3000111e 	bne	r6,zero,11fb0 <_realloc_r+0x5d8>
   11f6c:	84000404 	addi	r16,r16,16
   11f70:	e0800604 	addi	r2,fp,24
   11f74:	003fa506 	br	11e0c <_realloc_r+0x434>
   11f78:	80c00417 	ldw	r3,16(r16)
   11f7c:	84000604 	addi	r16,r16,24
   11f80:	e0800804 	addi	r2,fp,32
   11f84:	e0c00615 	stw	r3,24(fp)
   11f88:	80ffff17 	ldw	r3,-4(r16)
   11f8c:	e0c00715 	stw	r3,28(fp)
   11f90:	003ede06 	br	11b0c <_realloc_r+0x134>
   11f94:	80c00417 	ldw	r3,16(r16)
   11f98:	84000604 	addi	r16,r16,24
   11f9c:	e0800804 	addi	r2,fp,32
   11fa0:	e0c00615 	stw	r3,24(fp)
   11fa4:	80ffff17 	ldw	r3,-4(r16)
   11fa8:	e0c00715 	stw	r3,28(fp)
   11fac:	003f7606 	br	11d88 <_realloc_r+0x3b0>
   11fb0:	80c00417 	ldw	r3,16(r16)
   11fb4:	84000604 	addi	r16,r16,24
   11fb8:	e0800804 	addi	r2,fp,32
   11fbc:	e0c00615 	stw	r3,24(fp)
   11fc0:	80ffff17 	ldw	r3,-4(r16)
   11fc4:	e0c00715 	stw	r3,28(fp)
   11fc8:	003f9006 	br	11e0c <_realloc_r+0x434>

00011fcc <_sbrk_r>:
   11fcc:	defffe04 	addi	sp,sp,-8
   11fd0:	dc000015 	stw	r16,0(sp)
   11fd4:	008000b4 	movhi	r2,2
   11fd8:	2021883a 	mov	r16,r4
   11fdc:	2809883a 	mov	r4,r5
   11fe0:	dfc00115 	stw	ra,4(sp)
   11fe4:	10230c15 	stw	zero,-29648(r2)
   11fe8:	00138bc0 	call	138bc <sbrk>
   11fec:	10ffffd8 	cmpnei	r3,r2,-1
   11ff0:	18000426 	beq	r3,zero,12004 <_sbrk_r+0x38>
   11ff4:	dfc00117 	ldw	ra,4(sp)
   11ff8:	dc000017 	ldw	r16,0(sp)
   11ffc:	dec00204 	addi	sp,sp,8
   12000:	f800283a 	ret
   12004:	00c000b4 	movhi	r3,2
   12008:	18e30c17 	ldw	r3,-29648(r3)
   1200c:	183ff926 	beq	r3,zero,11ff4 <_sbrk_r+0x28>
   12010:	80c00015 	stw	r3,0(r16)
   12014:	dfc00117 	ldw	ra,4(sp)
   12018:	dc000017 	ldw	r16,0(sp)
   1201c:	dec00204 	addi	sp,sp,8
   12020:	f800283a 	ret

00012024 <__sread>:
   12024:	defffe04 	addi	sp,sp,-8
   12028:	dc000015 	stw	r16,0(sp)
   1202c:	2821883a 	mov	r16,r5
   12030:	2940038f 	ldh	r5,14(r5)
   12034:	dfc00115 	stw	ra,4(sp)
   12038:	0012e1c0 	call	12e1c <_read_r>
   1203c:	10000716 	blt	r2,zero,1205c <__sread+0x38>
   12040:	80c01417 	ldw	r3,80(r16)
   12044:	1887883a 	add	r3,r3,r2
   12048:	80c01415 	stw	r3,80(r16)
   1204c:	dfc00117 	ldw	ra,4(sp)
   12050:	dc000017 	ldw	r16,0(sp)
   12054:	dec00204 	addi	sp,sp,8
   12058:	f800283a 	ret
   1205c:	80c0030b 	ldhu	r3,12(r16)
   12060:	18fbffcc 	andi	r3,r3,61439
   12064:	80c0030d 	sth	r3,12(r16)
   12068:	dfc00117 	ldw	ra,4(sp)
   1206c:	dc000017 	ldw	r16,0(sp)
   12070:	dec00204 	addi	sp,sp,8
   12074:	f800283a 	ret

00012078 <__seofread>:
   12078:	0005883a 	mov	r2,zero
   1207c:	f800283a 	ret

00012080 <__swrite>:
   12080:	2880030b 	ldhu	r2,12(r5)
   12084:	defffb04 	addi	sp,sp,-20
   12088:	dcc00315 	stw	r19,12(sp)
   1208c:	dc800215 	stw	r18,8(sp)
   12090:	dc400115 	stw	r17,4(sp)
   12094:	dc000015 	stw	r16,0(sp)
   12098:	dfc00415 	stw	ra,16(sp)
   1209c:	10c0400c 	andi	r3,r2,256
   120a0:	2821883a 	mov	r16,r5
   120a4:	2023883a 	mov	r17,r4
   120a8:	3025883a 	mov	r18,r6
   120ac:	3827883a 	mov	r19,r7
   120b0:	18000d1e 	bne	r3,zero,120e8 <__swrite+0x68>
   120b4:	8140038f 	ldh	r5,14(r16)
   120b8:	10bbffcc 	andi	r2,r2,61439
   120bc:	980f883a 	mov	r7,r19
   120c0:	900d883a 	mov	r6,r18
   120c4:	8809883a 	mov	r4,r17
   120c8:	8080030d 	sth	r2,12(r16)
   120cc:	dfc00417 	ldw	ra,16(sp)
   120d0:	dcc00317 	ldw	r19,12(sp)
   120d4:	dc800217 	ldw	r18,8(sp)
   120d8:	dc400117 	ldw	r17,4(sp)
   120dc:	dc000017 	ldw	r16,0(sp)
   120e0:	dec00504 	addi	sp,sp,20
   120e4:	00121641 	jmpi	12164 <_write_r>
   120e8:	2940038f 	ldh	r5,14(r5)
   120ec:	01c00084 	movi	r7,2
   120f0:	000d883a 	mov	r6,zero
   120f4:	0012b8c0 	call	12b8c <_lseek_r>
   120f8:	8080030b 	ldhu	r2,12(r16)
   120fc:	003fed06 	br	120b4 <__swrite+0x34>

00012100 <__sseek>:
   12100:	defffe04 	addi	sp,sp,-8
   12104:	dc000015 	stw	r16,0(sp)
   12108:	2821883a 	mov	r16,r5
   1210c:	2940038f 	ldh	r5,14(r5)
   12110:	dfc00115 	stw	ra,4(sp)
   12114:	0012b8c0 	call	12b8c <_lseek_r>
   12118:	10ffffd8 	cmpnei	r3,r2,-1
   1211c:	18000826 	beq	r3,zero,12140 <__sseek+0x40>
   12120:	80c0030b 	ldhu	r3,12(r16)
   12124:	80801415 	stw	r2,80(r16)
   12128:	18c40014 	ori	r3,r3,4096
   1212c:	80c0030d 	sth	r3,12(r16)
   12130:	dfc00117 	ldw	ra,4(sp)
   12134:	dc000017 	ldw	r16,0(sp)
   12138:	dec00204 	addi	sp,sp,8
   1213c:	f800283a 	ret
   12140:	80c0030b 	ldhu	r3,12(r16)
   12144:	18fbffcc 	andi	r3,r3,61439
   12148:	80c0030d 	sth	r3,12(r16)
   1214c:	dfc00117 	ldw	ra,4(sp)
   12150:	dc000017 	ldw	r16,0(sp)
   12154:	dec00204 	addi	sp,sp,8
   12158:	f800283a 	ret

0001215c <__sclose>:
   1215c:	2940038f 	ldh	r5,14(r5)
   12160:	00123141 	jmpi	12314 <_close_r>

00012164 <_write_r>:
   12164:	2807883a 	mov	r3,r5
   12168:	defffe04 	addi	sp,sp,-8
   1216c:	dc000015 	stw	r16,0(sp)
   12170:	300b883a 	mov	r5,r6
   12174:	008000b4 	movhi	r2,2
   12178:	380d883a 	mov	r6,r7
   1217c:	2021883a 	mov	r16,r4
   12180:	1809883a 	mov	r4,r3
   12184:	dfc00115 	stw	ra,4(sp)
   12188:	10230c15 	stw	zero,-29648(r2)
   1218c:	00139b00 	call	139b0 <write>
   12190:	10ffffd8 	cmpnei	r3,r2,-1
   12194:	18000426 	beq	r3,zero,121a8 <_write_r+0x44>
   12198:	dfc00117 	ldw	ra,4(sp)
   1219c:	dc000017 	ldw	r16,0(sp)
   121a0:	dec00204 	addi	sp,sp,8
   121a4:	f800283a 	ret
   121a8:	00c000b4 	movhi	r3,2
   121ac:	18e30c17 	ldw	r3,-29648(r3)
   121b0:	183ff926 	beq	r3,zero,12198 <_write_r+0x34>
   121b4:	80c00015 	stw	r3,0(r16)
   121b8:	dfc00117 	ldw	ra,4(sp)
   121bc:	dc000017 	ldw	r16,0(sp)
   121c0:	dec00204 	addi	sp,sp,8
   121c4:	f800283a 	ret

000121c8 <__swsetup_r>:
   121c8:	00800074 	movhi	r2,1
   121cc:	109c6117 	ldw	r2,29060(r2)
   121d0:	defffd04 	addi	sp,sp,-12
   121d4:	dc400115 	stw	r17,4(sp)
   121d8:	dc000015 	stw	r16,0(sp)
   121dc:	dfc00215 	stw	ra,8(sp)
   121e0:	2023883a 	mov	r17,r4
   121e4:	2821883a 	mov	r16,r5
   121e8:	10000226 	beq	r2,zero,121f4 <__swsetup_r+0x2c>
   121ec:	10c00e17 	ldw	r3,56(r2)
   121f0:	18001d26 	beq	r3,zero,12268 <__swsetup_r+0xa0>
   121f4:	80c0030b 	ldhu	r3,12(r16)
   121f8:	1880020c 	andi	r2,r3,8
   121fc:	10001f26 	beq	r2,zero,1227c <__swsetup_r+0xb4>
   12200:	80800417 	ldw	r2,16(r16)
   12204:	10002626 	beq	r2,zero,122a0 <__swsetup_r+0xd8>
   12208:	1900004c 	andi	r4,r3,1
   1220c:	20000b1e 	bne	r4,zero,1223c <__swsetup_r+0x74>
   12210:	1900008c 	andi	r4,r3,2
   12214:	20002b1e 	bne	r4,zero,122c4 <__swsetup_r+0xfc>
   12218:	81000517 	ldw	r4,20(r16)
   1221c:	81000215 	stw	r4,8(r16)
   12220:	10000b26 	beq	r2,zero,12250 <__swsetup_r+0x88>
   12224:	0005883a 	mov	r2,zero
   12228:	dfc00217 	ldw	ra,8(sp)
   1222c:	dc400117 	ldw	r17,4(sp)
   12230:	dc000017 	ldw	r16,0(sp)
   12234:	dec00304 	addi	sp,sp,12
   12238:	f800283a 	ret
   1223c:	81000517 	ldw	r4,20(r16)
   12240:	80000215 	stw	zero,8(r16)
   12244:	0109c83a 	sub	r4,zero,r4
   12248:	81000615 	stw	r4,24(r16)
   1224c:	103ff51e 	bne	r2,zero,12224 <__swsetup_r+0x5c>
   12250:	1900200c 	andi	r4,r3,128
   12254:	203ff426 	beq	r4,zero,12228 <__swsetup_r+0x60>
   12258:	18c01014 	ori	r3,r3,64
   1225c:	80c0030d 	sth	r3,12(r16)
   12260:	00bfffc4 	movi	r2,-1
   12264:	003ff006 	br	12228 <__swsetup_r+0x60>
   12268:	1009883a 	mov	r4,r2
   1226c:	00107900 	call	10790 <__sinit>
   12270:	80c0030b 	ldhu	r3,12(r16)
   12274:	1880020c 	andi	r2,r3,8
   12278:	103fe11e 	bne	r2,zero,12200 <__swsetup_r+0x38>
   1227c:	1880040c 	andi	r2,r3,16
   12280:	10002026 	beq	r2,zero,12304 <__swsetup_r+0x13c>
   12284:	1880010c 	andi	r2,r3,4
   12288:	1000101e 	bne	r2,zero,122cc <__swsetup_r+0x104>
   1228c:	80800417 	ldw	r2,16(r16)
   12290:	19000214 	ori	r4,r3,8
   12294:	8100030d 	sth	r4,12(r16)
   12298:	2007883a 	mov	r3,r4
   1229c:	103fda1e 	bne	r2,zero,12208 <__swsetup_r+0x40>
   122a0:	1900a00c 	andi	r4,r3,640
   122a4:	21008020 	cmpeqi	r4,r4,512
   122a8:	203fd71e 	bne	r4,zero,12208 <__swsetup_r+0x40>
   122ac:	800b883a 	mov	r5,r16
   122b0:	8809883a 	mov	r4,r17
   122b4:	0012bf00 	call	12bf0 <__smakebuf_r>
   122b8:	80c0030b 	ldhu	r3,12(r16)
   122bc:	80800417 	ldw	r2,16(r16)
   122c0:	003fd106 	br	12208 <__swsetup_r+0x40>
   122c4:	0009883a 	mov	r4,zero
   122c8:	003fd406 	br	1221c <__swsetup_r+0x54>
   122cc:	81400c17 	ldw	r5,48(r16)
   122d0:	28000626 	beq	r5,zero,122ec <__swsetup_r+0x124>
   122d4:	80801004 	addi	r2,r16,64
   122d8:	28800326 	beq	r5,r2,122e8 <__swsetup_r+0x120>
   122dc:	8809883a 	mov	r4,r17
   122e0:	00128840 	call	12884 <_free_r>
   122e4:	80c0030b 	ldhu	r3,12(r16)
   122e8:	80000c15 	stw	zero,48(r16)
   122ec:	80800417 	ldw	r2,16(r16)
   122f0:	013ff6c4 	movi	r4,-37
   122f4:	20c6703a 	and	r3,r4,r3
   122f8:	80000115 	stw	zero,4(r16)
   122fc:	80800015 	stw	r2,0(r16)
   12300:	003fe306 	br	12290 <__swsetup_r+0xc8>
   12304:	00800244 	movi	r2,9
   12308:	88800015 	stw	r2,0(r17)
   1230c:	18c01014 	ori	r3,r3,64
   12310:	003fd206 	br	1225c <__swsetup_r+0x94>

00012314 <_close_r>:
   12314:	defffe04 	addi	sp,sp,-8
   12318:	dc000015 	stw	r16,0(sp)
   1231c:	008000b4 	movhi	r2,2
   12320:	2021883a 	mov	r16,r4
   12324:	2809883a 	mov	r4,r5
   12328:	dfc00115 	stw	ra,4(sp)
   1232c:	10230c15 	stw	zero,-29648(r2)
   12330:	00131500 	call	13150 <close>
   12334:	10ffffd8 	cmpnei	r3,r2,-1
   12338:	18000426 	beq	r3,zero,1234c <_close_r+0x38>
   1233c:	dfc00117 	ldw	ra,4(sp)
   12340:	dc000017 	ldw	r16,0(sp)
   12344:	dec00204 	addi	sp,sp,8
   12348:	f800283a 	ret
   1234c:	00c000b4 	movhi	r3,2
   12350:	18e30c17 	ldw	r3,-29648(r3)
   12354:	183ff926 	beq	r3,zero,1233c <_close_r+0x28>
   12358:	80c00015 	stw	r3,0(r16)
   1235c:	dfc00117 	ldw	ra,4(sp)
   12360:	dc000017 	ldw	r16,0(sp)
   12364:	dec00204 	addi	sp,sp,8
   12368:	f800283a 	ret

0001236c <_fclose_r>:
   1236c:	defffc04 	addi	sp,sp,-16
   12370:	dfc00315 	stw	ra,12(sp)
   12374:	dc800215 	stw	r18,8(sp)
   12378:	dc400115 	stw	r17,4(sp)
   1237c:	dc000015 	stw	r16,0(sp)
   12380:	28000726 	beq	r5,zero,123a0 <_fclose_r+0x34>
   12384:	2821883a 	mov	r16,r5
   12388:	2023883a 	mov	r17,r4
   1238c:	20000226 	beq	r4,zero,12398 <_fclose_r+0x2c>
   12390:	20800e17 	ldw	r2,56(r4)
   12394:	10002726 	beq	r2,zero,12434 <_fclose_r+0xc8>
   12398:	8080030f 	ldh	r2,12(r16)
   1239c:	1000081e 	bne	r2,zero,123c0 <_fclose_r+0x54>
   123a0:	0025883a 	mov	r18,zero
   123a4:	9005883a 	mov	r2,r18
   123a8:	dfc00317 	ldw	ra,12(sp)
   123ac:	dc800217 	ldw	r18,8(sp)
   123b0:	dc400117 	ldw	r17,4(sp)
   123b4:	dc000017 	ldw	r16,0(sp)
   123b8:	dec00404 	addi	sp,sp,16
   123bc:	f800283a 	ret
   123c0:	800b883a 	mov	r5,r16
   123c4:	8809883a 	mov	r4,r17
   123c8:	00124740 	call	12474 <__sflush_r>
   123cc:	80c00b17 	ldw	r3,44(r16)
   123d0:	1025883a 	mov	r18,r2
   123d4:	18000426 	beq	r3,zero,123e8 <_fclose_r+0x7c>
   123d8:	81400717 	ldw	r5,28(r16)
   123dc:	8809883a 	mov	r4,r17
   123e0:	183ee83a 	callr	r3
   123e4:	10001716 	blt	r2,zero,12444 <_fclose_r+0xd8>
   123e8:	8080030b 	ldhu	r2,12(r16)
   123ec:	1080200c 	andi	r2,r2,128
   123f0:	1000181e 	bne	r2,zero,12454 <_fclose_r+0xe8>
   123f4:	81400c17 	ldw	r5,48(r16)
   123f8:	28000526 	beq	r5,zero,12410 <_fclose_r+0xa4>
   123fc:	80801004 	addi	r2,r16,64
   12400:	28800226 	beq	r5,r2,1240c <_fclose_r+0xa0>
   12404:	8809883a 	mov	r4,r17
   12408:	00128840 	call	12884 <_free_r>
   1240c:	80000c15 	stw	zero,48(r16)
   12410:	81401117 	ldw	r5,68(r16)
   12414:	28000326 	beq	r5,zero,12424 <_fclose_r+0xb8>
   12418:	8809883a 	mov	r4,r17
   1241c:	00128840 	call	12884 <_free_r>
   12420:	80001115 	stw	zero,68(r16)
   12424:	00107a00 	call	107a0 <__sfp_lock_acquire>
   12428:	8000030d 	sth	zero,12(r16)
   1242c:	00107a40 	call	107a4 <__sfp_lock_release>
   12430:	003fdc06 	br	123a4 <_fclose_r+0x38>
   12434:	00107900 	call	10790 <__sinit>
   12438:	8080030f 	ldh	r2,12(r16)
   1243c:	103fd826 	beq	r2,zero,123a0 <_fclose_r+0x34>
   12440:	003fdf06 	br	123c0 <_fclose_r+0x54>
   12444:	8080030b 	ldhu	r2,12(r16)
   12448:	04bfffc4 	movi	r18,-1
   1244c:	1080200c 	andi	r2,r2,128
   12450:	103fe826 	beq	r2,zero,123f4 <_fclose_r+0x88>
   12454:	81400417 	ldw	r5,16(r16)
   12458:	8809883a 	mov	r4,r17
   1245c:	00128840 	call	12884 <_free_r>
   12460:	003fe406 	br	123f4 <_fclose_r+0x88>

00012464 <fclose>:
   12464:	00800074 	movhi	r2,1
   12468:	200b883a 	mov	r5,r4
   1246c:	111c6117 	ldw	r4,29060(r2)
   12470:	001236c1 	jmpi	1236c <_fclose_r>

00012474 <__sflush_r>:
   12474:	2880030b 	ldhu	r2,12(r5)
   12478:	defffb04 	addi	sp,sp,-20
   1247c:	dcc00315 	stw	r19,12(sp)
   12480:	dc000015 	stw	r16,0(sp)
   12484:	dfc00415 	stw	ra,16(sp)
   12488:	dc800215 	stw	r18,8(sp)
   1248c:	dc400115 	stw	r17,4(sp)
   12490:	10c0020c 	andi	r3,r2,8
   12494:	2821883a 	mov	r16,r5
   12498:	2027883a 	mov	r19,r4
   1249c:	18003c1e 	bne	r3,zero,12590 <__sflush_r+0x11c>
   124a0:	29000117 	ldw	r4,4(r5)
   124a4:	10c20014 	ori	r3,r2,2048
   124a8:	28c0030d 	sth	r3,12(r5)
   124ac:	0100580e 	bge	zero,r4,12610 <__sflush_r+0x19c>
   124b0:	82000a17 	ldw	r8,40(r16)
   124b4:	40003426 	beq	r8,zero,12588 <__sflush_r+0x114>
   124b8:	9c400017 	ldw	r17,0(r19)
   124bc:	1084000c 	andi	r2,r2,4096
   124c0:	98000015 	stw	zero,0(r19)
   124c4:	81400717 	ldw	r5,28(r16)
   124c8:	1000561e 	bne	r2,zero,12624 <__sflush_r+0x1b0>
   124cc:	000d883a 	mov	r6,zero
   124d0:	01c00044 	movi	r7,1
   124d4:	9809883a 	mov	r4,r19
   124d8:	403ee83a 	callr	r8
   124dc:	100d883a 	mov	r6,r2
   124e0:	10bfffd8 	cmpnei	r2,r2,-1
   124e4:	10005b26 	beq	r2,zero,12654 <__sflush_r+0x1e0>
   124e8:	80c0030b 	ldhu	r3,12(r16)
   124ec:	82000a17 	ldw	r8,40(r16)
   124f0:	18c0010c 	andi	r3,r3,4
   124f4:	18000626 	beq	r3,zero,12510 <__sflush_r+0x9c>
   124f8:	80c00117 	ldw	r3,4(r16)
   124fc:	80800c17 	ldw	r2,48(r16)
   12500:	30cdc83a 	sub	r6,r6,r3
   12504:	10000226 	beq	r2,zero,12510 <__sflush_r+0x9c>
   12508:	80800f17 	ldw	r2,60(r16)
   1250c:	308dc83a 	sub	r6,r6,r2
   12510:	81400717 	ldw	r5,28(r16)
   12514:	000f883a 	mov	r7,zero
   12518:	9809883a 	mov	r4,r19
   1251c:	403ee83a 	callr	r8
   12520:	10ffffd8 	cmpnei	r3,r2,-1
   12524:	1800411e 	bne	r3,zero,1262c <__sflush_r+0x1b8>
   12528:	99400017 	ldw	r5,0(r19)
   1252c:	28c007b0 	cmpltui	r3,r5,30
   12530:	18002c26 	beq	r3,zero,125e4 <__sflush_r+0x170>
   12534:	00f7f034 	movhi	r3,57280
   12538:	18ffff84 	addi	r3,r3,-2
   1253c:	1949d83a 	sra	r4,r3,r5
   12540:	80c0030b 	ldhu	r3,12(r16)
   12544:	2100004c 	andi	r4,r4,1
   12548:	2000271e 	bne	r4,zero,125e8 <__sflush_r+0x174>
   1254c:	81000417 	ldw	r4,16(r16)
   12550:	19bdffcc 	andi	r6,r3,63487
   12554:	8180030d 	sth	r6,12(r16)
   12558:	80000115 	stw	zero,4(r16)
   1255c:	81000015 	stw	r4,0(r16)
   12560:	18c4000c 	andi	r3,r3,4096
   12564:	1800431e 	bne	r3,zero,12674 <__sflush_r+0x200>
   12568:	81400c17 	ldw	r5,48(r16)
   1256c:	9c400015 	stw	r17,0(r19)
   12570:	28000526 	beq	r5,zero,12588 <__sflush_r+0x114>
   12574:	80801004 	addi	r2,r16,64
   12578:	28800226 	beq	r5,r2,12584 <__sflush_r+0x110>
   1257c:	9809883a 	mov	r4,r19
   12580:	00128840 	call	12884 <_free_r>
   12584:	80000c15 	stw	zero,48(r16)
   12588:	0005883a 	mov	r2,zero
   1258c:	00001906 	br	125f4 <__sflush_r+0x180>
   12590:	2c800417 	ldw	r18,16(r5)
   12594:	903ffc26 	beq	r18,zero,12588 <__sflush_r+0x114>
   12598:	2c400017 	ldw	r17,0(r5)
   1259c:	108000cc 	andi	r2,r2,3
   125a0:	2c800015 	stw	r18,0(r5)
   125a4:	8ca3c83a 	sub	r17,r17,r18
   125a8:	10001c1e 	bne	r2,zero,1261c <__sflush_r+0x1a8>
   125ac:	28800517 	ldw	r2,20(r5)
   125b0:	80800215 	stw	r2,8(r16)
   125b4:	04400316 	blt	zero,r17,125c4 <__sflush_r+0x150>
   125b8:	003ff306 	br	12588 <__sflush_r+0x114>
   125bc:	90a5883a 	add	r18,r18,r2
   125c0:	047ff10e 	bge	zero,r17,12588 <__sflush_r+0x114>
   125c4:	80800917 	ldw	r2,36(r16)
   125c8:	81400717 	ldw	r5,28(r16)
   125cc:	880f883a 	mov	r7,r17
   125d0:	900d883a 	mov	r6,r18
   125d4:	9809883a 	mov	r4,r19
   125d8:	103ee83a 	callr	r2
   125dc:	88a3c83a 	sub	r17,r17,r2
   125e0:	00bff616 	blt	zero,r2,125bc <__sflush_r+0x148>
   125e4:	80c0030b 	ldhu	r3,12(r16)
   125e8:	18c01014 	ori	r3,r3,64
   125ec:	80c0030d 	sth	r3,12(r16)
   125f0:	00bfffc4 	movi	r2,-1
   125f4:	dfc00417 	ldw	ra,16(sp)
   125f8:	dcc00317 	ldw	r19,12(sp)
   125fc:	dc800217 	ldw	r18,8(sp)
   12600:	dc400117 	ldw	r17,4(sp)
   12604:	dc000017 	ldw	r16,0(sp)
   12608:	dec00504 	addi	sp,sp,20
   1260c:	f800283a 	ret
   12610:	29000f17 	ldw	r4,60(r5)
   12614:	013fa616 	blt	zero,r4,124b0 <__sflush_r+0x3c>
   12618:	003fdb06 	br	12588 <__sflush_r+0x114>
   1261c:	0005883a 	mov	r2,zero
   12620:	003fe306 	br	125b0 <__sflush_r+0x13c>
   12624:	81801417 	ldw	r6,80(r16)
   12628:	003fb106 	br	124f0 <__sflush_r+0x7c>
   1262c:	80c0030b 	ldhu	r3,12(r16)
   12630:	81000417 	ldw	r4,16(r16)
   12634:	80000115 	stw	zero,4(r16)
   12638:	197dffcc 	andi	r5,r3,63487
   1263c:	8140030d 	sth	r5,12(r16)
   12640:	81000015 	stw	r4,0(r16)
   12644:	18c4000c 	andi	r3,r3,4096
   12648:	183fc726 	beq	r3,zero,12568 <__sflush_r+0xf4>
   1264c:	80801415 	stw	r2,80(r16)
   12650:	003fc506 	br	12568 <__sflush_r+0xf4>
   12654:	98800017 	ldw	r2,0(r19)
   12658:	103fa326 	beq	r2,zero,124e8 <__sflush_r+0x74>
   1265c:	10c00760 	cmpeqi	r3,r2,29
   12660:	1800021e 	bne	r3,zero,1266c <__sflush_r+0x1f8>
   12664:	10800598 	cmpnei	r2,r2,22
   12668:	103fde1e 	bne	r2,zero,125e4 <__sflush_r+0x170>
   1266c:	9c400015 	stw	r17,0(r19)
   12670:	003fc506 	br	12588 <__sflush_r+0x114>
   12674:	283fbc1e 	bne	r5,zero,12568 <__sflush_r+0xf4>
   12678:	003ff406 	br	1264c <__sflush_r+0x1d8>

0001267c <_fflush_r>:
   1267c:	defffd04 	addi	sp,sp,-12
   12680:	dc000115 	stw	r16,4(sp)
   12684:	dfc00215 	stw	ra,8(sp)
   12688:	2021883a 	mov	r16,r4
   1268c:	20000226 	beq	r4,zero,12698 <_fflush_r+0x1c>
   12690:	20800e17 	ldw	r2,56(r4)
   12694:	10000726 	beq	r2,zero,126b4 <_fflush_r+0x38>
   12698:	2880030f 	ldh	r2,12(r5)
   1269c:	10000a1e 	bne	r2,zero,126c8 <_fflush_r+0x4c>
   126a0:	0005883a 	mov	r2,zero
   126a4:	dfc00217 	ldw	ra,8(sp)
   126a8:	dc000117 	ldw	r16,4(sp)
   126ac:	dec00304 	addi	sp,sp,12
   126b0:	f800283a 	ret
   126b4:	d9400015 	stw	r5,0(sp)
   126b8:	00107900 	call	10790 <__sinit>
   126bc:	d9400017 	ldw	r5,0(sp)
   126c0:	2880030f 	ldh	r2,12(r5)
   126c4:	103ff626 	beq	r2,zero,126a0 <_fflush_r+0x24>
   126c8:	8009883a 	mov	r4,r16
   126cc:	dfc00217 	ldw	ra,8(sp)
   126d0:	dc000117 	ldw	r16,4(sp)
   126d4:	dec00304 	addi	sp,sp,12
   126d8:	00124741 	jmpi	12474 <__sflush_r>

000126dc <fflush>:
   126dc:	20001726 	beq	r4,zero,1273c <fflush+0x60>
   126e0:	00800074 	movhi	r2,1
   126e4:	200b883a 	mov	r5,r4
   126e8:	111c6117 	ldw	r4,29060(r2)
   126ec:	20000226 	beq	r4,zero,126f8 <fflush+0x1c>
   126f0:	20800e17 	ldw	r2,56(r4)
   126f4:	10000526 	beq	r2,zero,1270c <fflush+0x30>
   126f8:	2880030f 	ldh	r2,12(r5)
   126fc:	1000021e 	bne	r2,zero,12708 <fflush+0x2c>
   12700:	0005883a 	mov	r2,zero
   12704:	f800283a 	ret
   12708:	00124741 	jmpi	12474 <__sflush_r>
   1270c:	defffd04 	addi	sp,sp,-12
   12710:	d9400115 	stw	r5,4(sp)
   12714:	d9000015 	stw	r4,0(sp)
   12718:	dfc00215 	stw	ra,8(sp)
   1271c:	00107900 	call	10790 <__sinit>
   12720:	d9400117 	ldw	r5,4(sp)
   12724:	d9000017 	ldw	r4,0(sp)
   12728:	2880030f 	ldh	r2,12(r5)
   1272c:	10000826 	beq	r2,zero,12750 <fflush+0x74>
   12730:	dfc00217 	ldw	ra,8(sp)
   12734:	dec00304 	addi	sp,sp,12
   12738:	00124741 	jmpi	12474 <__sflush_r>
   1273c:	00800074 	movhi	r2,1
   12740:	111c6017 	ldw	r4,29056(r2)
   12744:	01400074 	movhi	r5,1
   12748:	29499f04 	addi	r5,r5,9852
   1274c:	0010d181 	jmpi	10d18 <_fwalk_reent>
   12750:	0005883a 	mov	r2,zero
   12754:	dfc00217 	ldw	ra,8(sp)
   12758:	dec00304 	addi	sp,sp,12
   1275c:	f800283a 	ret

00012760 <_malloc_trim_r>:
   12760:	defffa04 	addi	sp,sp,-24
   12764:	dcc00315 	stw	r19,12(sp)
   12768:	04c00074 	movhi	r19,1
   1276c:	dd000415 	stw	r20,16(sp)
   12770:	dc800215 	stw	r18,8(sp)
   12774:	dc400115 	stw	r17,4(sp)
   12778:	dc000015 	stw	r16,0(sp)
   1277c:	2829883a 	mov	r20,r5
   12780:	dfc00515 	stw	ra,20(sp)
   12784:	9cd6dc04 	addi	r19,r19,23408
   12788:	2025883a 	mov	r18,r4
   1278c:	00136c00 	call	136c0 <__malloc_lock>
   12790:	98800217 	ldw	r2,8(r19)
   12794:	14400117 	ldw	r17,4(r2)
   12798:	00bfff04 	movi	r2,-4
   1279c:	88a2703a 	and	r17,r17,r2
   127a0:	8c03fbc4 	addi	r16,r17,4079
   127a4:	8521c83a 	sub	r16,r16,r20
   127a8:	8020d33a 	srli	r16,r16,12
   127ac:	843fffc4 	addi	r16,r16,-1
   127b0:	8020933a 	slli	r16,r16,12
   127b4:	80840008 	cmpgei	r2,r16,4096
   127b8:	10000626 	beq	r2,zero,127d4 <_malloc_trim_r+0x74>
   127bc:	000b883a 	mov	r5,zero
   127c0:	9009883a 	mov	r4,r18
   127c4:	0011fcc0 	call	11fcc <_sbrk_r>
   127c8:	98c00217 	ldw	r3,8(r19)
   127cc:	1c47883a 	add	r3,r3,r17
   127d0:	10c00b26 	beq	r2,r3,12800 <_malloc_trim_r+0xa0>
   127d4:	9009883a 	mov	r4,r18
   127d8:	00136e40 	call	136e4 <__malloc_unlock>
   127dc:	0005883a 	mov	r2,zero
   127e0:	dfc00517 	ldw	ra,20(sp)
   127e4:	dd000417 	ldw	r20,16(sp)
   127e8:	dcc00317 	ldw	r19,12(sp)
   127ec:	dc800217 	ldw	r18,8(sp)
   127f0:	dc400117 	ldw	r17,4(sp)
   127f4:	dc000017 	ldw	r16,0(sp)
   127f8:	dec00604 	addi	sp,sp,24
   127fc:	f800283a 	ret
   12800:	040bc83a 	sub	r5,zero,r16
   12804:	9009883a 	mov	r4,r18
   12808:	0011fcc0 	call	11fcc <_sbrk_r>
   1280c:	10bfffd8 	cmpnei	r2,r2,-1
   12810:	10000d26 	beq	r2,zero,12848 <_malloc_trim_r+0xe8>
   12814:	008000b4 	movhi	r2,2
   12818:	10a31517 	ldw	r2,-29612(r2)
   1281c:	98c00217 	ldw	r3,8(r19)
   12820:	8c23c83a 	sub	r17,r17,r16
   12824:	8c400054 	ori	r17,r17,1
   12828:	1405c83a 	sub	r2,r2,r16
   1282c:	1c400115 	stw	r17,4(r3)
   12830:	9009883a 	mov	r4,r18
   12834:	00c000b4 	movhi	r3,2
   12838:	18a31515 	stw	r2,-29612(r3)
   1283c:	00136e40 	call	136e4 <__malloc_unlock>
   12840:	00800044 	movi	r2,1
   12844:	003fe606 	br	127e0 <_malloc_trim_r+0x80>
   12848:	000b883a 	mov	r5,zero
   1284c:	9009883a 	mov	r4,r18
   12850:	0011fcc0 	call	11fcc <_sbrk_r>
   12854:	99000217 	ldw	r4,8(r19)
   12858:	1107c83a 	sub	r3,r2,r4
   1285c:	19400410 	cmplti	r5,r3,16
   12860:	283fdc1e 	bne	r5,zero,127d4 <_malloc_trim_r+0x74>
   12864:	01400074 	movhi	r5,1
   12868:	295c6217 	ldw	r5,29064(r5)
   1286c:	18c00054 	ori	r3,r3,1
   12870:	20c00115 	stw	r3,4(r4)
   12874:	1145c83a 	sub	r2,r2,r5
   12878:	014000b4 	movhi	r5,2
   1287c:	28a31515 	stw	r2,-29612(r5)
   12880:	003fd406 	br	127d4 <_malloc_trim_r+0x74>

00012884 <_free_r>:
   12884:	28005f26 	beq	r5,zero,12a04 <_free_r+0x180>
   12888:	defffd04 	addi	sp,sp,-12
   1288c:	dc400115 	stw	r17,4(sp)
   12890:	dc000015 	stw	r16,0(sp)
   12894:	2023883a 	mov	r17,r4
   12898:	2821883a 	mov	r16,r5
   1289c:	dfc00215 	stw	ra,8(sp)
   128a0:	00136c00 	call	136c0 <__malloc_lock>
   128a4:	81ffff17 	ldw	r7,-4(r16)
   128a8:	00bfff84 	movi	r2,-2
   128ac:	80fffe04 	addi	r3,r16,-8
   128b0:	3884703a 	and	r2,r7,r2
   128b4:	01800074 	movhi	r6,1
   128b8:	1889883a 	add	r4,r3,r2
   128bc:	3196dc04 	addi	r6,r6,23408
   128c0:	21400117 	ldw	r5,4(r4)
   128c4:	32000217 	ldw	r8,8(r6)
   128c8:	027fff04 	movi	r9,-4
   128cc:	2a4a703a 	and	r5,r5,r9
   128d0:	41006526 	beq	r8,r4,12a68 <_free_r+0x1e4>
   128d4:	21400115 	stw	r5,4(r4)
   128d8:	39c0004c 	andi	r7,r7,1
   128dc:	2151883a 	add	r8,r4,r5
   128e0:	3800281e 	bne	r7,zero,12984 <_free_r+0x100>
   128e4:	82bffe17 	ldw	r10,-8(r16)
   128e8:	42000117 	ldw	r8,4(r8)
   128ec:	01c00074 	movhi	r7,1
   128f0:	1a87c83a 	sub	r3,r3,r10
   128f4:	1a400217 	ldw	r9,8(r3)
   128f8:	39d6de04 	addi	r7,r7,23416
   128fc:	1285883a 	add	r2,r2,r10
   12900:	4200004c 	andi	r8,r8,1
   12904:	49c04d26 	beq	r9,r7,12a3c <_free_r+0x1b8>
   12908:	1a800317 	ldw	r10,12(r3)
   1290c:	4a800315 	stw	r10,12(r9)
   12910:	52400215 	stw	r9,8(r10)
   12914:	40006926 	beq	r8,zero,12abc <_free_r+0x238>
   12918:	11400054 	ori	r5,r2,1
   1291c:	19400115 	stw	r5,4(r3)
   12920:	20800015 	stw	r2,0(r4)
   12924:	11008028 	cmpgeui	r4,r2,512
   12928:	20001e1e 	bne	r4,zero,129a4 <_free_r+0x120>
   1292c:	1008d0fa 	srli	r4,r2,3
   12930:	100ad17a 	srli	r5,r2,5
   12934:	31c00117 	ldw	r7,4(r6)
   12938:	20800044 	addi	r2,r4,1
   1293c:	100490fa 	slli	r2,r2,3
   12940:	01000044 	movi	r4,1
   12944:	2148983a 	sll	r4,r4,r5
   12948:	3085883a 	add	r2,r6,r2
   1294c:	11400017 	ldw	r5,0(r2)
   12950:	21c8b03a 	or	r4,r4,r7
   12954:	11fffe04 	addi	r7,r2,-8
   12958:	19c00315 	stw	r7,12(r3)
   1295c:	19400215 	stw	r5,8(r3)
   12960:	31000115 	stw	r4,4(r6)
   12964:	10c00015 	stw	r3,0(r2)
   12968:	28c00315 	stw	r3,12(r5)
   1296c:	8809883a 	mov	r4,r17
   12970:	dfc00217 	ldw	ra,8(sp)
   12974:	dc400117 	ldw	r17,4(sp)
   12978:	dc000017 	ldw	r16,0(sp)
   1297c:	dec00304 	addi	sp,sp,12
   12980:	00136e41 	jmpi	136e4 <__malloc_unlock>
   12984:	41c00117 	ldw	r7,4(r8)
   12988:	39c0004c 	andi	r7,r7,1
   1298c:	38001e26 	beq	r7,zero,12a08 <_free_r+0x184>
   12990:	11400054 	ori	r5,r2,1
   12994:	817fff15 	stw	r5,-4(r16)
   12998:	20800015 	stw	r2,0(r4)
   1299c:	11008028 	cmpgeui	r4,r2,512
   129a0:	203fe226 	beq	r4,zero,1292c <_free_r+0xa8>
   129a4:	1008d27a 	srli	r4,r2,9
   129a8:	21400168 	cmpgeui	r5,r4,5
   129ac:	2800451e 	bne	r5,zero,12ac4 <_free_r+0x240>
   129b0:	1008d1ba 	srli	r4,r2,6
   129b4:	21c00e44 	addi	r7,r4,57
   129b8:	380e90fa 	slli	r7,r7,3
   129bc:	21000e04 	addi	r4,r4,56
   129c0:	31cf883a 	add	r7,r6,r7
   129c4:	39400017 	ldw	r5,0(r7)
   129c8:	39fffe04 	addi	r7,r7,-8
   129cc:	39405326 	beq	r7,r5,12b1c <_free_r+0x298>
   129d0:	01bfff04 	movi	r6,-4
   129d4:	00000206 	br	129e0 <_free_r+0x15c>
   129d8:	29400217 	ldw	r5,8(r5)
   129dc:	39400326 	beq	r7,r5,129ec <_free_r+0x168>
   129e0:	29000117 	ldw	r4,4(r5)
   129e4:	2188703a 	and	r4,r4,r6
   129e8:	113ffb36 	bltu	r2,r4,129d8 <_free_r+0x154>
   129ec:	29c00317 	ldw	r7,12(r5)
   129f0:	19c00315 	stw	r7,12(r3)
   129f4:	19400215 	stw	r5,8(r3)
   129f8:	38c00215 	stw	r3,8(r7)
   129fc:	28c00315 	stw	r3,12(r5)
   12a00:	003fda06 	br	1296c <_free_r+0xe8>
   12a04:	f800283a 	ret
   12a08:	01c00074 	movhi	r7,1
   12a0c:	1145883a 	add	r2,r2,r5
   12a10:	39d6de04 	addi	r7,r7,23416
   12a14:	21400217 	ldw	r5,8(r4)
   12a18:	29c03726 	beq	r5,r7,12af8 <_free_r+0x274>
   12a1c:	22000317 	ldw	r8,12(r4)
   12a20:	11c00054 	ori	r7,r2,1
   12a24:	1889883a 	add	r4,r3,r2
   12a28:	2a000315 	stw	r8,12(r5)
   12a2c:	41400215 	stw	r5,8(r8)
   12a30:	19c00115 	stw	r7,4(r3)
   12a34:	20800015 	stw	r2,0(r4)
   12a38:	003fba06 	br	12924 <_free_r+0xa0>
   12a3c:	40004f1e 	bne	r8,zero,12b7c <_free_r+0x2f8>
   12a40:	21800217 	ldw	r6,8(r4)
   12a44:	21000317 	ldw	r4,12(r4)
   12a48:	288b883a 	add	r5,r5,r2
   12a4c:	28800054 	ori	r2,r5,1
   12a50:	31000315 	stw	r4,12(r6)
   12a54:	21800215 	stw	r6,8(r4)
   12a58:	18800115 	stw	r2,4(r3)
   12a5c:	1947883a 	add	r3,r3,r5
   12a60:	19400015 	stw	r5,0(r3)
   12a64:	003fc106 	br	1296c <_free_r+0xe8>
   12a68:	39c0004c 	andi	r7,r7,1
   12a6c:	114b883a 	add	r5,r2,r5
   12a70:	3800071e 	bne	r7,zero,12a90 <_free_r+0x20c>
   12a74:	81fffe17 	ldw	r7,-8(r16)
   12a78:	19c7c83a 	sub	r3,r3,r7
   12a7c:	18800317 	ldw	r2,12(r3)
   12a80:	19000217 	ldw	r4,8(r3)
   12a84:	29cb883a 	add	r5,r5,r7
   12a88:	20800315 	stw	r2,12(r4)
   12a8c:	11000215 	stw	r4,8(r2)
   12a90:	00800074 	movhi	r2,1
   12a94:	29000054 	ori	r4,r5,1
   12a98:	109c6317 	ldw	r2,29068(r2)
   12a9c:	19000115 	stw	r4,4(r3)
   12aa0:	30c00215 	stw	r3,8(r6)
   12aa4:	28bfb136 	bltu	r5,r2,1296c <_free_r+0xe8>
   12aa8:	008000b4 	movhi	r2,2
   12aac:	11630b17 	ldw	r5,-29652(r2)
   12ab0:	8809883a 	mov	r4,r17
   12ab4:	00127600 	call	12760 <_malloc_trim_r>
   12ab8:	003fac06 	br	1296c <_free_r+0xe8>
   12abc:	1145883a 	add	r2,r2,r5
   12ac0:	003fd406 	br	12a14 <_free_r+0x190>
   12ac4:	21400568 	cmpgeui	r5,r4,21
   12ac8:	28000726 	beq	r5,zero,12ae8 <_free_r+0x264>
   12acc:	21401568 	cmpgeui	r5,r4,85
   12ad0:	2800191e 	bne	r5,zero,12b38 <_free_r+0x2b4>
   12ad4:	1008d33a 	srli	r4,r2,12
   12ad8:	21c01bc4 	addi	r7,r4,111
   12adc:	380e90fa 	slli	r7,r7,3
   12ae0:	21001b84 	addi	r4,r4,110
   12ae4:	003fb606 	br	129c0 <_free_r+0x13c>
   12ae8:	21c01704 	addi	r7,r4,92
   12aec:	380e90fa 	slli	r7,r7,3
   12af0:	210016c4 	addi	r4,r4,91
   12af4:	003fb206 	br	129c0 <_free_r+0x13c>
   12af8:	30c00515 	stw	r3,20(r6)
   12afc:	30c00415 	stw	r3,16(r6)
   12b00:	11000054 	ori	r4,r2,1
   12b04:	19c00315 	stw	r7,12(r3)
   12b08:	19c00215 	stw	r7,8(r3)
   12b0c:	19000115 	stw	r4,4(r3)
   12b10:	1887883a 	add	r3,r3,r2
   12b14:	18800015 	stw	r2,0(r3)
   12b18:	003f9406 	br	1296c <_free_r+0xe8>
   12b1c:	2009d0ba 	srai	r4,r4,2
   12b20:	00800044 	movi	r2,1
   12b24:	32000117 	ldw	r8,4(r6)
   12b28:	1104983a 	sll	r2,r2,r4
   12b2c:	1204b03a 	or	r2,r2,r8
   12b30:	30800115 	stw	r2,4(r6)
   12b34:	003fae06 	br	129f0 <_free_r+0x16c>
   12b38:	21405568 	cmpgeui	r5,r4,341
   12b3c:	2800051e 	bne	r5,zero,12b54 <_free_r+0x2d0>
   12b40:	1008d3fa 	srli	r4,r2,15
   12b44:	21c01e04 	addi	r7,r4,120
   12b48:	380e90fa 	slli	r7,r7,3
   12b4c:	21001dc4 	addi	r4,r4,119
   12b50:	003f9b06 	br	129c0 <_free_r+0x13c>
   12b54:	21015568 	cmpgeui	r4,r4,1365
   12b58:	2000051e 	bne	r4,zero,12b70 <_free_r+0x2ec>
   12b5c:	1008d4ba 	srli	r4,r2,18
   12b60:	21c01f44 	addi	r7,r4,125
   12b64:	380e90fa 	slli	r7,r7,3
   12b68:	21001f04 	addi	r4,r4,124
   12b6c:	003f9406 	br	129c0 <_free_r+0x13c>
   12b70:	01c0fe04 	movi	r7,1016
   12b74:	01001f84 	movi	r4,126
   12b78:	003f9106 	br	129c0 <_free_r+0x13c>
   12b7c:	11400054 	ori	r5,r2,1
   12b80:	19400115 	stw	r5,4(r3)
   12b84:	20800015 	stw	r2,0(r4)
   12b88:	003f7806 	br	1296c <_free_r+0xe8>

00012b8c <_lseek_r>:
   12b8c:	2807883a 	mov	r3,r5
   12b90:	defffe04 	addi	sp,sp,-8
   12b94:	dc000015 	stw	r16,0(sp)
   12b98:	300b883a 	mov	r5,r6
   12b9c:	008000b4 	movhi	r2,2
   12ba0:	380d883a 	mov	r6,r7
   12ba4:	2021883a 	mov	r16,r4
   12ba8:	1809883a 	mov	r4,r3
   12bac:	dfc00115 	stw	ra,4(sp)
   12bb0:	10230c15 	stw	zero,-29648(r2)
   12bb4:	00135640 	call	13564 <lseek>
   12bb8:	10ffffd8 	cmpnei	r3,r2,-1
   12bbc:	18000426 	beq	r3,zero,12bd0 <_lseek_r+0x44>
   12bc0:	dfc00117 	ldw	ra,4(sp)
   12bc4:	dc000017 	ldw	r16,0(sp)
   12bc8:	dec00204 	addi	sp,sp,8
   12bcc:	f800283a 	ret
   12bd0:	00c000b4 	movhi	r3,2
   12bd4:	18e30c17 	ldw	r3,-29648(r3)
   12bd8:	183ff926 	beq	r3,zero,12bc0 <_lseek_r+0x34>
   12bdc:	80c00015 	stw	r3,0(r16)
   12be0:	dfc00117 	ldw	ra,4(sp)
   12be4:	dc000017 	ldw	r16,0(sp)
   12be8:	dec00204 	addi	sp,sp,8
   12bec:	f800283a 	ret

00012bf0 <__smakebuf_r>:
   12bf0:	2880030b 	ldhu	r2,12(r5)
   12bf4:	deffe804 	addi	sp,sp,-96
   12bf8:	dc001215 	stw	r16,72(sp)
   12bfc:	dfc01715 	stw	ra,92(sp)
   12c00:	dd001615 	stw	r20,88(sp)
   12c04:	dcc01515 	stw	r19,84(sp)
   12c08:	dc801415 	stw	r18,80(sp)
   12c0c:	dc401315 	stw	r17,76(sp)
   12c10:	10c0008c 	andi	r3,r2,2
   12c14:	2821883a 	mov	r16,r5
   12c18:	18000d26 	beq	r3,zero,12c50 <__smakebuf_r+0x60>
   12c1c:	288010c4 	addi	r2,r5,67
   12c20:	28800015 	stw	r2,0(r5)
   12c24:	28800415 	stw	r2,16(r5)
   12c28:	00800044 	movi	r2,1
   12c2c:	28800515 	stw	r2,20(r5)
   12c30:	dfc01717 	ldw	ra,92(sp)
   12c34:	dd001617 	ldw	r20,88(sp)
   12c38:	dcc01517 	ldw	r19,84(sp)
   12c3c:	dc801417 	ldw	r18,80(sp)
   12c40:	dc401317 	ldw	r17,76(sp)
   12c44:	dc001217 	ldw	r16,72(sp)
   12c48:	dec01804 	addi	sp,sp,96
   12c4c:	f800283a 	ret
   12c50:	2940038f 	ldh	r5,14(r5)
   12c54:	2023883a 	mov	r17,r4
   12c58:	28002816 	blt	r5,zero,12cfc <__smakebuf_r+0x10c>
   12c5c:	d80d883a 	mov	r6,sp
   12c60:	0012e800 	call	12e80 <_fstat_r>
   12c64:	10002416 	blt	r2,zero,12cf8 <__smakebuf_r+0x108>
   12c68:	d8800117 	ldw	r2,4(sp)
   12c6c:	10bc000c 	andi	r2,r2,61440
   12c70:	10880018 	cmpnei	r2,r2,8192
   12c74:	1000421e 	bne	r2,zero,12d80 <__smakebuf_r+0x190>
   12c78:	8140038f 	ldh	r5,14(r16)
   12c7c:	8809883a 	mov	r4,r17
   12c80:	0012ee00 	call	12ee0 <_isatty_r>
   12c84:	10000826 	beq	r2,zero,12ca8 <__smakebuf_r+0xb8>
   12c88:	8080030b 	ldhu	r2,12(r16)
   12c8c:	80c010c4 	addi	r3,r16,67
   12c90:	80c00015 	stw	r3,0(r16)
   12c94:	10800054 	ori	r2,r2,1
   12c98:	8080030d 	sth	r2,12(r16)
   12c9c:	00800044 	movi	r2,1
   12ca0:	80c00415 	stw	r3,16(r16)
   12ca4:	80800515 	stw	r2,20(r16)
   12ca8:	04c00044 	movi	r19,1
   12cac:	05010004 	movi	r20,1024
   12cb0:	04820004 	movi	r18,2048
   12cb4:	a00b883a 	mov	r5,r20
   12cb8:	8809883a 	mov	r4,r17
   12cbc:	0010dc00 	call	10dc0 <_malloc_r>
   12cc0:	10001726 	beq	r2,zero,12d20 <__smakebuf_r+0x130>
   12cc4:	80c0030b 	ldhu	r3,12(r16)
   12cc8:	01000074 	movhi	r4,1
   12ccc:	21011504 	addi	r4,r4,1108
   12cd0:	89000f15 	stw	r4,60(r17)
   12cd4:	18c02014 	ori	r3,r3,128
   12cd8:	80c0030d 	sth	r3,12(r16)
   12cdc:	80800015 	stw	r2,0(r16)
   12ce0:	80800415 	stw	r2,16(r16)
   12ce4:	85000515 	stw	r20,20(r16)
   12ce8:	98001d1e 	bne	r19,zero,12d60 <__smakebuf_r+0x170>
   12cec:	90e4b03a 	or	r18,r18,r3
   12cf0:	8480030d 	sth	r18,12(r16)
   12cf4:	003fce06 	br	12c30 <__smakebuf_r+0x40>
   12cf8:	8080030b 	ldhu	r2,12(r16)
   12cfc:	1080200c 	andi	r2,r2,128
   12d00:	0027883a 	mov	r19,zero
   12d04:	10001326 	beq	r2,zero,12d54 <__smakebuf_r+0x164>
   12d08:	05001004 	movi	r20,64
   12d0c:	a00b883a 	mov	r5,r20
   12d10:	8809883a 	mov	r4,r17
   12d14:	0025883a 	mov	r18,zero
   12d18:	0010dc00 	call	10dc0 <_malloc_r>
   12d1c:	103fe91e 	bne	r2,zero,12cc4 <__smakebuf_r+0xd4>
   12d20:	8080030b 	ldhu	r2,12(r16)
   12d24:	10c0800c 	andi	r3,r2,512
   12d28:	183fc11e 	bne	r3,zero,12c30 <__smakebuf_r+0x40>
   12d2c:	00ffff04 	movi	r3,-4
   12d30:	10c4703a 	and	r2,r2,r3
   12d34:	10800094 	ori	r2,r2,2
   12d38:	80c010c4 	addi	r3,r16,67
   12d3c:	8080030d 	sth	r2,12(r16)
   12d40:	00800044 	movi	r2,1
   12d44:	80c00015 	stw	r3,0(r16)
   12d48:	80c00415 	stw	r3,16(r16)
   12d4c:	80800515 	stw	r2,20(r16)
   12d50:	003fb706 	br	12c30 <__smakebuf_r+0x40>
   12d54:	05010004 	movi	r20,1024
   12d58:	0025883a 	mov	r18,zero
   12d5c:	003fd506 	br	12cb4 <__smakebuf_r+0xc4>
   12d60:	8140038f 	ldh	r5,14(r16)
   12d64:	8809883a 	mov	r4,r17
   12d68:	0012ee00 	call	12ee0 <_isatty_r>
   12d6c:	80c0030b 	ldhu	r3,12(r16)
   12d70:	103fde26 	beq	r2,zero,12cec <__smakebuf_r+0xfc>
   12d74:	18ffff0c 	andi	r3,r3,65532
   12d78:	18c00054 	ori	r3,r3,1
   12d7c:	003fdb06 	br	12cec <__smakebuf_r+0xfc>
   12d80:	0027883a 	mov	r19,zero
   12d84:	05010004 	movi	r20,1024
   12d88:	04820004 	movi	r18,2048
   12d8c:	003fc906 	br	12cb4 <__smakebuf_r+0xc4>

00012d90 <__swhatbuf_r>:
   12d90:	deffea04 	addi	sp,sp,-88
   12d94:	dc001215 	stw	r16,72(sp)
   12d98:	2821883a 	mov	r16,r5
   12d9c:	2940038f 	ldh	r5,14(r5)
   12da0:	dc801415 	stw	r18,80(sp)
   12da4:	dc401315 	stw	r17,76(sp)
   12da8:	dfc01515 	stw	ra,84(sp)
   12dac:	3023883a 	mov	r17,r6
   12db0:	3825883a 	mov	r18,r7
   12db4:	28001016 	blt	r5,zero,12df8 <__swhatbuf_r+0x68>
   12db8:	d80d883a 	mov	r6,sp
   12dbc:	0012e800 	call	12e80 <_fstat_r>
   12dc0:	10000d16 	blt	r2,zero,12df8 <__swhatbuf_r+0x68>
   12dc4:	d8c00117 	ldw	r3,4(sp)
   12dc8:	01010004 	movi	r4,1024
   12dcc:	00820004 	movi	r2,2048
   12dd0:	18fc000c 	andi	r3,r3,61440
   12dd4:	18c80020 	cmpeqi	r3,r3,8192
   12dd8:	90c00015 	stw	r3,0(r18)
   12ddc:	89000015 	stw	r4,0(r17)
   12de0:	dfc01517 	ldw	ra,84(sp)
   12de4:	dc801417 	ldw	r18,80(sp)
   12de8:	dc401317 	ldw	r17,76(sp)
   12dec:	dc001217 	ldw	r16,72(sp)
   12df0:	dec01604 	addi	sp,sp,88
   12df4:	f800283a 	ret
   12df8:	8080030b 	ldhu	r2,12(r16)
   12dfc:	0007883a 	mov	r3,zero
   12e00:	1080200c 	andi	r2,r2,128
   12e04:	10000326 	beq	r2,zero,12e14 <__swhatbuf_r+0x84>
   12e08:	01001004 	movi	r4,64
   12e0c:	0005883a 	mov	r2,zero
   12e10:	003ff106 	br	12dd8 <__swhatbuf_r+0x48>
   12e14:	01010004 	movi	r4,1024
   12e18:	003fef06 	br	12dd8 <__swhatbuf_r+0x48>

00012e1c <_read_r>:
   12e1c:	2807883a 	mov	r3,r5
   12e20:	defffe04 	addi	sp,sp,-8
   12e24:	dc000015 	stw	r16,0(sp)
   12e28:	300b883a 	mov	r5,r6
   12e2c:	008000b4 	movhi	r2,2
   12e30:	380d883a 	mov	r6,r7
   12e34:	2021883a 	mov	r16,r4
   12e38:	1809883a 	mov	r4,r3
   12e3c:	dfc00115 	stw	ra,4(sp)
   12e40:	10230c15 	stw	zero,-29648(r2)
   12e44:	00137440 	call	13744 <read>
   12e48:	10ffffd8 	cmpnei	r3,r2,-1
   12e4c:	18000426 	beq	r3,zero,12e60 <_read_r+0x44>
   12e50:	dfc00117 	ldw	ra,4(sp)
   12e54:	dc000017 	ldw	r16,0(sp)
   12e58:	dec00204 	addi	sp,sp,8
   12e5c:	f800283a 	ret
   12e60:	00c000b4 	movhi	r3,2
   12e64:	18e30c17 	ldw	r3,-29648(r3)
   12e68:	183ff926 	beq	r3,zero,12e50 <_read_r+0x34>
   12e6c:	80c00015 	stw	r3,0(r16)
   12e70:	dfc00117 	ldw	ra,4(sp)
   12e74:	dc000017 	ldw	r16,0(sp)
   12e78:	dec00204 	addi	sp,sp,8
   12e7c:	f800283a 	ret

00012e80 <_fstat_r>:
   12e80:	2807883a 	mov	r3,r5
   12e84:	defffe04 	addi	sp,sp,-8
   12e88:	dc000015 	stw	r16,0(sp)
   12e8c:	008000b4 	movhi	r2,2
   12e90:	300b883a 	mov	r5,r6
   12e94:	2021883a 	mov	r16,r4
   12e98:	1809883a 	mov	r4,r3
   12e9c:	dfc00115 	stw	ra,4(sp)
   12ea0:	10230c15 	stw	zero,-29648(r2)
   12ea4:	00132940 	call	13294 <fstat>
   12ea8:	10ffffd8 	cmpnei	r3,r2,-1
   12eac:	18000426 	beq	r3,zero,12ec0 <_fstat_r+0x40>
   12eb0:	dfc00117 	ldw	ra,4(sp)
   12eb4:	dc000017 	ldw	r16,0(sp)
   12eb8:	dec00204 	addi	sp,sp,8
   12ebc:	f800283a 	ret
   12ec0:	00c000b4 	movhi	r3,2
   12ec4:	18e30c17 	ldw	r3,-29648(r3)
   12ec8:	183ff926 	beq	r3,zero,12eb0 <_fstat_r+0x30>
   12ecc:	80c00015 	stw	r3,0(r16)
   12ed0:	dfc00117 	ldw	ra,4(sp)
   12ed4:	dc000017 	ldw	r16,0(sp)
   12ed8:	dec00204 	addi	sp,sp,8
   12edc:	f800283a 	ret

00012ee0 <_isatty_r>:
   12ee0:	defffe04 	addi	sp,sp,-8
   12ee4:	dc000015 	stw	r16,0(sp)
   12ee8:	008000b4 	movhi	r2,2
   12eec:	2021883a 	mov	r16,r4
   12ef0:	2809883a 	mov	r4,r5
   12ef4:	dfc00115 	stw	ra,4(sp)
   12ef8:	10230c15 	stw	zero,-29648(r2)
   12efc:	001338c0 	call	1338c <isatty>
   12f00:	10ffffd8 	cmpnei	r3,r2,-1
   12f04:	18000426 	beq	r3,zero,12f18 <_isatty_r+0x38>
   12f08:	dfc00117 	ldw	ra,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00204 	addi	sp,sp,8
   12f14:	f800283a 	ret
   12f18:	00c000b4 	movhi	r3,2
   12f1c:	18e30c17 	ldw	r3,-29648(r3)
   12f20:	183ff926 	beq	r3,zero,12f08 <_isatty_r+0x28>
   12f24:	80c00015 	stw	r3,0(r16)
   12f28:	dfc00117 	ldw	ra,4(sp)
   12f2c:	dc000017 	ldw	r16,0(sp)
   12f30:	dec00204 	addi	sp,sp,8
   12f34:	f800283a 	ret

00012f38 <__divsi3>:
   12f38:	20001a16 	blt	r4,zero,12fa4 <__divsi3+0x6c>
   12f3c:	000f883a 	mov	r7,zero
   12f40:	2800020e 	bge	r5,zero,12f4c <__divsi3+0x14>
   12f44:	014bc83a 	sub	r5,zero,r5
   12f48:	39c0005c 	xori	r7,r7,1
   12f4c:	200d883a 	mov	r6,r4
   12f50:	00c00044 	movi	r3,1
   12f54:	2900092e 	bgeu	r5,r4,12f7c <__divsi3+0x44>
   12f58:	00800804 	movi	r2,32
   12f5c:	00c00044 	movi	r3,1
   12f60:	00000106 	br	12f68 <__divsi3+0x30>
   12f64:	10001226 	beq	r2,zero,12fb0 <__divsi3+0x78>
   12f68:	294b883a 	add	r5,r5,r5
   12f6c:	10bfffc4 	addi	r2,r2,-1
   12f70:	18c7883a 	add	r3,r3,r3
   12f74:	293ffb36 	bltu	r5,r4,12f64 <__divsi3+0x2c>
   12f78:	18000d26 	beq	r3,zero,12fb0 <__divsi3+0x78>
   12f7c:	0005883a 	mov	r2,zero
   12f80:	31400236 	bltu	r6,r5,12f8c <__divsi3+0x54>
   12f84:	314dc83a 	sub	r6,r6,r5
   12f88:	10c4b03a 	or	r2,r2,r3
   12f8c:	1806d07a 	srli	r3,r3,1
   12f90:	280ad07a 	srli	r5,r5,1
   12f94:	183ffa1e 	bne	r3,zero,12f80 <__divsi3+0x48>
   12f98:	38000126 	beq	r7,zero,12fa0 <__divsi3+0x68>
   12f9c:	0085c83a 	sub	r2,zero,r2
   12fa0:	f800283a 	ret
   12fa4:	0109c83a 	sub	r4,zero,r4
   12fa8:	01c00044 	movi	r7,1
   12fac:	003fe406 	br	12f40 <__divsi3+0x8>
   12fb0:	0005883a 	mov	r2,zero
   12fb4:	003ff806 	br	12f98 <__divsi3+0x60>

00012fb8 <__modsi3>:
   12fb8:	20001716 	blt	r4,zero,13018 <__modsi3+0x60>
   12fbc:	000f883a 	mov	r7,zero
   12fc0:	2005883a 	mov	r2,r4
   12fc4:	2800010e 	bge	r5,zero,12fcc <__modsi3+0x14>
   12fc8:	014bc83a 	sub	r5,zero,r5
   12fcc:	00c00044 	movi	r3,1
   12fd0:	2900092e 	bgeu	r5,r4,12ff8 <__modsi3+0x40>
   12fd4:	01800804 	movi	r6,32
   12fd8:	00c00044 	movi	r3,1
   12fdc:	00000106 	br	12fe4 <__modsi3+0x2c>
   12fe0:	30001026 	beq	r6,zero,13024 <__modsi3+0x6c>
   12fe4:	294b883a 	add	r5,r5,r5
   12fe8:	31bfffc4 	addi	r6,r6,-1
   12fec:	18c7883a 	add	r3,r3,r3
   12ff0:	293ffb36 	bltu	r5,r4,12fe0 <__modsi3+0x28>
   12ff4:	18000b26 	beq	r3,zero,13024 <__modsi3+0x6c>
   12ff8:	1806d07a 	srli	r3,r3,1
   12ffc:	11400136 	bltu	r2,r5,13004 <__modsi3+0x4c>
   13000:	1145c83a 	sub	r2,r2,r5
   13004:	280ad07a 	srli	r5,r5,1
   13008:	183ffb1e 	bne	r3,zero,12ff8 <__modsi3+0x40>
   1300c:	38000126 	beq	r7,zero,13014 <__modsi3+0x5c>
   13010:	0085c83a 	sub	r2,zero,r2
   13014:	f800283a 	ret
   13018:	0109c83a 	sub	r4,zero,r4
   1301c:	01c00044 	movi	r7,1
   13020:	003fe706 	br	12fc0 <__modsi3+0x8>
   13024:	2005883a 	mov	r2,r4
   13028:	003ff806 	br	1300c <__modsi3+0x54>

0001302c <__udivsi3>:
   1302c:	200d883a 	mov	r6,r4
   13030:	2900152e 	bgeu	r5,r4,13088 <__udivsi3+0x5c>
   13034:	28001416 	blt	r5,zero,13088 <__udivsi3+0x5c>
   13038:	00800804 	movi	r2,32
   1303c:	00c00044 	movi	r3,1
   13040:	00000206 	br	1304c <__udivsi3+0x20>
   13044:	10000e26 	beq	r2,zero,13080 <__udivsi3+0x54>
   13048:	28000416 	blt	r5,zero,1305c <__udivsi3+0x30>
   1304c:	294b883a 	add	r5,r5,r5
   13050:	10bfffc4 	addi	r2,r2,-1
   13054:	18c7883a 	add	r3,r3,r3
   13058:	293ffa36 	bltu	r5,r4,13044 <__udivsi3+0x18>
   1305c:	18000826 	beq	r3,zero,13080 <__udivsi3+0x54>
   13060:	0005883a 	mov	r2,zero
   13064:	31400236 	bltu	r6,r5,13070 <__udivsi3+0x44>
   13068:	314dc83a 	sub	r6,r6,r5
   1306c:	10c4b03a 	or	r2,r2,r3
   13070:	1806d07a 	srli	r3,r3,1
   13074:	280ad07a 	srli	r5,r5,1
   13078:	183ffa1e 	bne	r3,zero,13064 <__udivsi3+0x38>
   1307c:	f800283a 	ret
   13080:	0005883a 	mov	r2,zero
   13084:	f800283a 	ret
   13088:	00c00044 	movi	r3,1
   1308c:	003ff406 	br	13060 <__udivsi3+0x34>

00013090 <__umodsi3>:
   13090:	2005883a 	mov	r2,r4
   13094:	2900132e 	bgeu	r5,r4,130e4 <__umodsi3+0x54>
   13098:	28001216 	blt	r5,zero,130e4 <__umodsi3+0x54>
   1309c:	01800804 	movi	r6,32
   130a0:	00c00044 	movi	r3,1
   130a4:	00000206 	br	130b0 <__umodsi3+0x20>
   130a8:	30000c26 	beq	r6,zero,130dc <__umodsi3+0x4c>
   130ac:	28000416 	blt	r5,zero,130c0 <__umodsi3+0x30>
   130b0:	294b883a 	add	r5,r5,r5
   130b4:	31bfffc4 	addi	r6,r6,-1
   130b8:	18c7883a 	add	r3,r3,r3
   130bc:	293ffa36 	bltu	r5,r4,130a8 <__umodsi3+0x18>
   130c0:	18000626 	beq	r3,zero,130dc <__umodsi3+0x4c>
   130c4:	1806d07a 	srli	r3,r3,1
   130c8:	11400136 	bltu	r2,r5,130d0 <__umodsi3+0x40>
   130cc:	1145c83a 	sub	r2,r2,r5
   130d0:	280ad07a 	srli	r5,r5,1
   130d4:	183ffb1e 	bne	r3,zero,130c4 <__umodsi3+0x34>
   130d8:	f800283a 	ret
   130dc:	2005883a 	mov	r2,r4
   130e0:	f800283a 	ret
   130e4:	00c00044 	movi	r3,1
   130e8:	003ff606 	br	130c4 <__umodsi3+0x34>

000130ec <__mulsi3>:
   130ec:	0005883a 	mov	r2,zero
   130f0:	20000726 	beq	r4,zero,13110 <__mulsi3+0x24>
   130f4:	20c0004c 	andi	r3,r4,1
   130f8:	2008d07a 	srli	r4,r4,1
   130fc:	18000126 	beq	r3,zero,13104 <__mulsi3+0x18>
   13100:	1145883a 	add	r2,r2,r5
   13104:	294b883a 	add	r5,r5,r5
   13108:	203ffa1e 	bne	r4,zero,130f4 <__mulsi3+0x8>
   1310c:	f800283a 	ret
   13110:	f800283a 	ret

00013114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13114:	defffe04 	addi	sp,sp,-8
   13118:	dfc00115 	stw	ra,4(sp)
   1311c:	df000015 	stw	fp,0(sp)
   13120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13124:	d0a00917 	ldw	r2,-32732(gp)
   13128:	10000326 	beq	r2,zero,13138 <alt_get_errno+0x24>
   1312c:	d0a00917 	ldw	r2,-32732(gp)
   13130:	103ee83a 	callr	r2
   13134:	00000106 	br	1313c <alt_get_errno+0x28>
   13138:	d0a6ac04 	addi	r2,gp,-25936
}
   1313c:	e037883a 	mov	sp,fp
   13140:	dfc00117 	ldw	ra,4(sp)
   13144:	df000017 	ldw	fp,0(sp)
   13148:	dec00204 	addi	sp,sp,8
   1314c:	f800283a 	ret

00013150 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13150:	defffb04 	addi	sp,sp,-20
   13154:	dfc00415 	stw	ra,16(sp)
   13158:	df000315 	stw	fp,12(sp)
   1315c:	df000304 	addi	fp,sp,12
   13160:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13164:	e0bffd17 	ldw	r2,-12(fp)
   13168:	10000916 	blt	r2,zero,13190 <close+0x40>
   1316c:	e0fffd17 	ldw	r3,-12(fp)
   13170:	1805883a 	mov	r2,r3
   13174:	1085883a 	add	r2,r2,r2
   13178:	10c5883a 	add	r2,r2,r3
   1317c:	100490ba 	slli	r2,r2,2
   13180:	00c00074 	movhi	r3,1
   13184:	18d7e804 	addi	r3,r3,24480
   13188:	10c5883a 	add	r2,r2,r3
   1318c:	00000106 	br	13194 <close+0x44>
   13190:	0005883a 	mov	r2,zero
   13194:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   13198:	e0bfff17 	ldw	r2,-4(fp)
   1319c:	10001926 	beq	r2,zero,13204 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   131a0:	e0bfff17 	ldw	r2,-4(fp)
   131a4:	10800017 	ldw	r2,0(r2)
   131a8:	10800417 	ldw	r2,16(r2)
   131ac:	10000626 	beq	r2,zero,131c8 <close+0x78>
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	10800017 	ldw	r2,0(r2)
   131b8:	10800417 	ldw	r2,16(r2)
   131bc:	e13fff17 	ldw	r4,-4(fp)
   131c0:	103ee83a 	callr	r2
   131c4:	00000106 	br	131cc <close+0x7c>
   131c8:	0005883a 	mov	r2,zero
   131cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   131d0:	e13ffd17 	ldw	r4,-12(fp)
   131d4:	001384c0 	call	1384c <alt_release_fd>
    if (rval < 0)
   131d8:	e0bffe17 	ldw	r2,-8(fp)
   131dc:	1000070e 	bge	r2,zero,131fc <close+0xac>
    {
      ALT_ERRNO = -rval;
   131e0:	00131140 	call	13114 <alt_get_errno>
   131e4:	1007883a 	mov	r3,r2
   131e8:	e0bffe17 	ldw	r2,-8(fp)
   131ec:	0085c83a 	sub	r2,zero,r2
   131f0:	18800015 	stw	r2,0(r3)
      return -1;
   131f4:	00bfffc4 	movi	r2,-1
   131f8:	00000706 	br	13218 <close+0xc8>
    }
    return 0;
   131fc:	0005883a 	mov	r2,zero
   13200:	00000506 	br	13218 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13204:	00131140 	call	13114 <alt_get_errno>
   13208:	1007883a 	mov	r3,r2
   1320c:	00801444 	movi	r2,81
   13210:	18800015 	stw	r2,0(r3)
    return -1;
   13214:	00bfffc4 	movi	r2,-1
  }
}
   13218:	e037883a 	mov	sp,fp
   1321c:	dfc00117 	ldw	ra,4(sp)
   13220:	df000017 	ldw	fp,0(sp)
   13224:	dec00204 	addi	sp,sp,8
   13228:	f800283a 	ret

0001322c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1322c:	defffc04 	addi	sp,sp,-16
   13230:	df000315 	stw	fp,12(sp)
   13234:	df000304 	addi	fp,sp,12
   13238:	e13fff15 	stw	r4,-4(fp)
   1323c:	e17ffe15 	stw	r5,-8(fp)
   13240:	e1bffd15 	stw	r6,-12(fp)
  return len;
   13244:	e0bffd17 	ldw	r2,-12(fp)
}
   13248:	e037883a 	mov	sp,fp
   1324c:	df000017 	ldw	fp,0(sp)
   13250:	dec00104 	addi	sp,sp,4
   13254:	f800283a 	ret

00013258 <alt_get_errno>:
{
   13258:	defffe04 	addi	sp,sp,-8
   1325c:	dfc00115 	stw	ra,4(sp)
   13260:	df000015 	stw	fp,0(sp)
   13264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13268:	d0a00917 	ldw	r2,-32732(gp)
   1326c:	10000326 	beq	r2,zero,1327c <alt_get_errno+0x24>
   13270:	d0a00917 	ldw	r2,-32732(gp)
   13274:	103ee83a 	callr	r2
   13278:	00000106 	br	13280 <alt_get_errno+0x28>
   1327c:	d0a6ac04 	addi	r2,gp,-25936
}
   13280:	e037883a 	mov	sp,fp
   13284:	dfc00117 	ldw	ra,4(sp)
   13288:	df000017 	ldw	fp,0(sp)
   1328c:	dec00204 	addi	sp,sp,8
   13290:	f800283a 	ret

00013294 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13294:	defffb04 	addi	sp,sp,-20
   13298:	dfc00415 	stw	ra,16(sp)
   1329c:	df000315 	stw	fp,12(sp)
   132a0:	df000304 	addi	fp,sp,12
   132a4:	e13ffe15 	stw	r4,-8(fp)
   132a8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   132ac:	e0bffe17 	ldw	r2,-8(fp)
   132b0:	10000916 	blt	r2,zero,132d8 <fstat+0x44>
   132b4:	e0fffe17 	ldw	r3,-8(fp)
   132b8:	1805883a 	mov	r2,r3
   132bc:	1085883a 	add	r2,r2,r2
   132c0:	10c5883a 	add	r2,r2,r3
   132c4:	100490ba 	slli	r2,r2,2
   132c8:	00c00074 	movhi	r3,1
   132cc:	18d7e804 	addi	r3,r3,24480
   132d0:	10c5883a 	add	r2,r2,r3
   132d4:	00000106 	br	132dc <fstat+0x48>
   132d8:	0005883a 	mov	r2,zero
   132dc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   132e0:	e0bfff17 	ldw	r2,-4(fp)
   132e4:	10001026 	beq	r2,zero,13328 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   132e8:	e0bfff17 	ldw	r2,-4(fp)
   132ec:	10800017 	ldw	r2,0(r2)
   132f0:	10800817 	ldw	r2,32(r2)
   132f4:	10000726 	beq	r2,zero,13314 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   132f8:	e0bfff17 	ldw	r2,-4(fp)
   132fc:	10800017 	ldw	r2,0(r2)
   13300:	10800817 	ldw	r2,32(r2)
   13304:	e17ffd17 	ldw	r5,-12(fp)
   13308:	e13fff17 	ldw	r4,-4(fp)
   1330c:	103ee83a 	callr	r2
   13310:	00000a06 	br	1333c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13314:	e0bffd17 	ldw	r2,-12(fp)
   13318:	00c80004 	movi	r3,8192
   1331c:	10c00115 	stw	r3,4(r2)
      return 0;
   13320:	0005883a 	mov	r2,zero
   13324:	00000506 	br	1333c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13328:	00132580 	call	13258 <alt_get_errno>
   1332c:	1007883a 	mov	r3,r2
   13330:	00801444 	movi	r2,81
   13334:	18800015 	stw	r2,0(r3)
    return -1;
   13338:	00bfffc4 	movi	r2,-1
  }
}
   1333c:	e037883a 	mov	sp,fp
   13340:	dfc00117 	ldw	ra,4(sp)
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00204 	addi	sp,sp,8
   1334c:	f800283a 	ret

00013350 <alt_get_errno>:
{
   13350:	defffe04 	addi	sp,sp,-8
   13354:	dfc00115 	stw	ra,4(sp)
   13358:	df000015 	stw	fp,0(sp)
   1335c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13360:	d0a00917 	ldw	r2,-32732(gp)
   13364:	10000326 	beq	r2,zero,13374 <alt_get_errno+0x24>
   13368:	d0a00917 	ldw	r2,-32732(gp)
   1336c:	103ee83a 	callr	r2
   13370:	00000106 	br	13378 <alt_get_errno+0x28>
   13374:	d0a6ac04 	addi	r2,gp,-25936
}
   13378:	e037883a 	mov	sp,fp
   1337c:	dfc00117 	ldw	ra,4(sp)
   13380:	df000017 	ldw	fp,0(sp)
   13384:	dec00204 	addi	sp,sp,8
   13388:	f800283a 	ret

0001338c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1338c:	deffea04 	addi	sp,sp,-88
   13390:	dfc01515 	stw	ra,84(sp)
   13394:	df001415 	stw	fp,80(sp)
   13398:	df001404 	addi	fp,sp,80
   1339c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   133a0:	e0bfec17 	ldw	r2,-80(fp)
   133a4:	10000916 	blt	r2,zero,133cc <isatty+0x40>
   133a8:	e0ffec17 	ldw	r3,-80(fp)
   133ac:	1805883a 	mov	r2,r3
   133b0:	1085883a 	add	r2,r2,r2
   133b4:	10c5883a 	add	r2,r2,r3
   133b8:	100490ba 	slli	r2,r2,2
   133bc:	00c00074 	movhi	r3,1
   133c0:	18d7e804 	addi	r3,r3,24480
   133c4:	10c5883a 	add	r2,r2,r3
   133c8:	00000106 	br	133d0 <isatty+0x44>
   133cc:	0005883a 	mov	r2,zero
   133d0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   133d4:	e0bfff17 	ldw	r2,-4(fp)
   133d8:	10000e26 	beq	r2,zero,13414 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   133dc:	e0bfff17 	ldw	r2,-4(fp)
   133e0:	10800017 	ldw	r2,0(r2)
   133e4:	10800817 	ldw	r2,32(r2)
   133e8:	1000021e 	bne	r2,zero,133f4 <isatty+0x68>
    {
      return 1;
   133ec:	00800044 	movi	r2,1
   133f0:	00000d06 	br	13428 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   133f4:	e0bfed04 	addi	r2,fp,-76
   133f8:	100b883a 	mov	r5,r2
   133fc:	e13fec17 	ldw	r4,-80(fp)
   13400:	00132940 	call	13294 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13404:	e0bfee17 	ldw	r2,-72(fp)
   13408:	10880020 	cmpeqi	r2,r2,8192
   1340c:	10803fcc 	andi	r2,r2,255
   13410:	00000506 	br	13428 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13414:	00133500 	call	13350 <alt_get_errno>
   13418:	1007883a 	mov	r3,r2
   1341c:	00801444 	movi	r2,81
   13420:	18800015 	stw	r2,0(r3)
    return 0;
   13424:	0005883a 	mov	r2,zero
  }
}
   13428:	e037883a 	mov	sp,fp
   1342c:	dfc00117 	ldw	ra,4(sp)
   13430:	df000017 	ldw	fp,0(sp)
   13434:	dec00204 	addi	sp,sp,8
   13438:	f800283a 	ret

0001343c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1343c:	defffc04 	addi	sp,sp,-16
   13440:	df000315 	stw	fp,12(sp)
   13444:	df000304 	addi	fp,sp,12
   13448:	e13fff15 	stw	r4,-4(fp)
   1344c:	e17ffe15 	stw	r5,-8(fp)
   13450:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   13454:	e0fffe17 	ldw	r3,-8(fp)
   13458:	e0bfff17 	ldw	r2,-4(fp)
   1345c:	18800c26 	beq	r3,r2,13490 <alt_load_section+0x54>
  {
    while( to != end )
   13460:	00000806 	br	13484 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13464:	e0ffff17 	ldw	r3,-4(fp)
   13468:	18800104 	addi	r2,r3,4
   1346c:	e0bfff15 	stw	r2,-4(fp)
   13470:	e0bffe17 	ldw	r2,-8(fp)
   13474:	11000104 	addi	r4,r2,4
   13478:	e13ffe15 	stw	r4,-8(fp)
   1347c:	18c00017 	ldw	r3,0(r3)
   13480:	10c00015 	stw	r3,0(r2)
    while( to != end )
   13484:	e0fffe17 	ldw	r3,-8(fp)
   13488:	e0bffd17 	ldw	r2,-12(fp)
   1348c:	18bff51e 	bne	r3,r2,13464 <alt_load_section+0x28>
    }
  }
}
   13490:	0001883a 	nop
   13494:	e037883a 	mov	sp,fp
   13498:	df000017 	ldw	fp,0(sp)
   1349c:	dec00104 	addi	sp,sp,4
   134a0:	f800283a 	ret

000134a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   134a4:	defffe04 	addi	sp,sp,-8
   134a8:	dfc00115 	stw	ra,4(sp)
   134ac:	df000015 	stw	fp,0(sp)
   134b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   134b4:	01800074 	movhi	r6,1
   134b8:	319c6e04 	addi	r6,r6,29112
   134bc:	01400074 	movhi	r5,1
   134c0:	2955d304 	addi	r5,r5,22348
   134c4:	01000074 	movhi	r4,1
   134c8:	211c6e04 	addi	r4,r4,29112
   134cc:	001343c0 	call	1343c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   134d0:	01800074 	movhi	r6,1
   134d4:	31808904 	addi	r6,r6,548
   134d8:	01400074 	movhi	r5,1
   134dc:	29400804 	addi	r5,r5,32
   134e0:	01000074 	movhi	r4,1
   134e4:	21000804 	addi	r4,r4,32
   134e8:	001343c0 	call	1343c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   134ec:	01800074 	movhi	r6,1
   134f0:	3195d304 	addi	r6,r6,22348
   134f4:	01400074 	movhi	r5,1
   134f8:	2955c004 	addi	r5,r5,22272
   134fc:	01000074 	movhi	r4,1
   13500:	2115c004 	addi	r4,r4,22272
   13504:	001343c0 	call	1343c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13508:	00147500 	call	14750 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1350c:	001491c0 	call	1491c <alt_icache_flush_all>
}
   13510:	0001883a 	nop
   13514:	e037883a 	mov	sp,fp
   13518:	dfc00117 	ldw	ra,4(sp)
   1351c:	df000017 	ldw	fp,0(sp)
   13520:	dec00204 	addi	sp,sp,8
   13524:	f800283a 	ret

00013528 <alt_get_errno>:
{
   13528:	defffe04 	addi	sp,sp,-8
   1352c:	dfc00115 	stw	ra,4(sp)
   13530:	df000015 	stw	fp,0(sp)
   13534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13538:	d0a00917 	ldw	r2,-32732(gp)
   1353c:	10000326 	beq	r2,zero,1354c <alt_get_errno+0x24>
   13540:	d0a00917 	ldw	r2,-32732(gp)
   13544:	103ee83a 	callr	r2
   13548:	00000106 	br	13550 <alt_get_errno+0x28>
   1354c:	d0a6ac04 	addi	r2,gp,-25936
}
   13550:	e037883a 	mov	sp,fp
   13554:	dfc00117 	ldw	ra,4(sp)
   13558:	df000017 	ldw	fp,0(sp)
   1355c:	dec00204 	addi	sp,sp,8
   13560:	f800283a 	ret

00013564 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13564:	defff904 	addi	sp,sp,-28
   13568:	dfc00615 	stw	ra,24(sp)
   1356c:	df000515 	stw	fp,20(sp)
   13570:	df000504 	addi	fp,sp,20
   13574:	e13ffd15 	stw	r4,-12(fp)
   13578:	e17ffc15 	stw	r5,-16(fp)
   1357c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13580:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13584:	e0bffd17 	ldw	r2,-12(fp)
   13588:	10000916 	blt	r2,zero,135b0 <lseek+0x4c>
   1358c:	e0fffd17 	ldw	r3,-12(fp)
   13590:	1805883a 	mov	r2,r3
   13594:	1085883a 	add	r2,r2,r2
   13598:	10c5883a 	add	r2,r2,r3
   1359c:	100490ba 	slli	r2,r2,2
   135a0:	00c00074 	movhi	r3,1
   135a4:	18d7e804 	addi	r3,r3,24480
   135a8:	10c5883a 	add	r2,r2,r3
   135ac:	00000106 	br	135b4 <lseek+0x50>
   135b0:	0005883a 	mov	r2,zero
   135b4:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   135b8:	e0bffe17 	ldw	r2,-8(fp)
   135bc:	10001026 	beq	r2,zero,13600 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   135c0:	e0bffe17 	ldw	r2,-8(fp)
   135c4:	10800017 	ldw	r2,0(r2)
   135c8:	10800717 	ldw	r2,28(r2)
   135cc:	10000926 	beq	r2,zero,135f4 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   135d0:	e0bffe17 	ldw	r2,-8(fp)
   135d4:	10800017 	ldw	r2,0(r2)
   135d8:	10800717 	ldw	r2,28(r2)
   135dc:	e1bffb17 	ldw	r6,-20(fp)
   135e0:	e17ffc17 	ldw	r5,-16(fp)
   135e4:	e13ffe17 	ldw	r4,-8(fp)
   135e8:	103ee83a 	callr	r2
   135ec:	e0bfff15 	stw	r2,-4(fp)
   135f0:	00000506 	br	13608 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   135f4:	00bfde84 	movi	r2,-134
   135f8:	e0bfff15 	stw	r2,-4(fp)
   135fc:	00000206 	br	13608 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   13600:	00bfebc4 	movi	r2,-81
   13604:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	1000070e 	bge	r2,zero,1362c <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   13610:	00135280 	call	13528 <alt_get_errno>
   13614:	1007883a 	mov	r3,r2
   13618:	e0bfff17 	ldw	r2,-4(fp)
   1361c:	0085c83a 	sub	r2,zero,r2
   13620:	18800015 	stw	r2,0(r3)
    rc = -1;
   13624:	00bfffc4 	movi	r2,-1
   13628:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   1362c:	e0bfff17 	ldw	r2,-4(fp)
}
   13630:	e037883a 	mov	sp,fp
   13634:	dfc00117 	ldw	ra,4(sp)
   13638:	df000017 	ldw	fp,0(sp)
   1363c:	dec00204 	addi	sp,sp,8
   13640:	f800283a 	ret

00013644 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13644:	defffd04 	addi	sp,sp,-12
   13648:	dfc00215 	stw	ra,8(sp)
   1364c:	df000115 	stw	fp,4(sp)
   13650:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13654:	0009883a 	mov	r4,zero
   13658:	0013ae80 	call	13ae8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1365c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13660:	0013b240 	call	13b24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13664:	01800074 	movhi	r6,1
   13668:	3195c904 	addi	r6,r6,22308
   1366c:	01400074 	movhi	r5,1
   13670:	2955c904 	addi	r5,r5,22308
   13674:	01000074 	movhi	r4,1
   13678:	2115c904 	addi	r4,r4,22308
   1367c:	0014ca80 	call	14ca8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13680:	00148540 	call	14854 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13684:	01000074 	movhi	r4,1
   13688:	21122e04 	addi	r4,r4,18616
   1368c:	00154540 	call	15454 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13690:	d0a6ad17 	ldw	r2,-25932(gp)
   13694:	d0e6ae17 	ldw	r3,-25928(gp)
   13698:	d126af17 	ldw	r4,-25924(gp)
   1369c:	200d883a 	mov	r6,r4
   136a0:	180b883a 	mov	r5,r3
   136a4:	1009883a 	mov	r4,r2
   136a8:	00102600 	call	10260 <main>
   136ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   136b0:	01000044 	movi	r4,1
   136b4:	00131500 	call	13150 <close>
  exit (result);
   136b8:	e13fff17 	ldw	r4,-4(fp)
   136bc:	00154680 	call	15468 <exit>

000136c0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   136c0:	defffe04 	addi	sp,sp,-8
   136c4:	df000115 	stw	fp,4(sp)
   136c8:	df000104 	addi	fp,sp,4
   136cc:	e13fff15 	stw	r4,-4(fp)
}
   136d0:	0001883a 	nop
   136d4:	e037883a 	mov	sp,fp
   136d8:	df000017 	ldw	fp,0(sp)
   136dc:	dec00104 	addi	sp,sp,4
   136e0:	f800283a 	ret

000136e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   136e4:	defffe04 	addi	sp,sp,-8
   136e8:	df000115 	stw	fp,4(sp)
   136ec:	df000104 	addi	fp,sp,4
   136f0:	e13fff15 	stw	r4,-4(fp)
}
   136f4:	0001883a 	nop
   136f8:	e037883a 	mov	sp,fp
   136fc:	df000017 	ldw	fp,0(sp)
   13700:	dec00104 	addi	sp,sp,4
   13704:	f800283a 	ret

00013708 <alt_get_errno>:
{
   13708:	defffe04 	addi	sp,sp,-8
   1370c:	dfc00115 	stw	ra,4(sp)
   13710:	df000015 	stw	fp,0(sp)
   13714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13718:	d0a00917 	ldw	r2,-32732(gp)
   1371c:	10000326 	beq	r2,zero,1372c <alt_get_errno+0x24>
   13720:	d0a00917 	ldw	r2,-32732(gp)
   13724:	103ee83a 	callr	r2
   13728:	00000106 	br	13730 <alt_get_errno+0x28>
   1372c:	d0a6ac04 	addi	r2,gp,-25936
}
   13730:	e037883a 	mov	sp,fp
   13734:	dfc00117 	ldw	ra,4(sp)
   13738:	df000017 	ldw	fp,0(sp)
   1373c:	dec00204 	addi	sp,sp,8
   13740:	f800283a 	ret

00013744 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13744:	defff904 	addi	sp,sp,-28
   13748:	dfc00615 	stw	ra,24(sp)
   1374c:	df000515 	stw	fp,20(sp)
   13750:	df000504 	addi	fp,sp,20
   13754:	e13ffd15 	stw	r4,-12(fp)
   13758:	e17ffc15 	stw	r5,-16(fp)
   1375c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13760:	e0bffd17 	ldw	r2,-12(fp)
   13764:	10000916 	blt	r2,zero,1378c <read+0x48>
   13768:	e0fffd17 	ldw	r3,-12(fp)
   1376c:	1805883a 	mov	r2,r3
   13770:	1085883a 	add	r2,r2,r2
   13774:	10c5883a 	add	r2,r2,r3
   13778:	100490ba 	slli	r2,r2,2
   1377c:	00c00074 	movhi	r3,1
   13780:	18d7e804 	addi	r3,r3,24480
   13784:	10c5883a 	add	r2,r2,r3
   13788:	00000106 	br	13790 <read+0x4c>
   1378c:	0005883a 	mov	r2,zero
   13790:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	10002226 	beq	r2,zero,13824 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1379c:	e0bfff17 	ldw	r2,-4(fp)
   137a0:	10800217 	ldw	r2,8(r2)
   137a4:	108000cc 	andi	r2,r2,3
   137a8:	10800060 	cmpeqi	r2,r2,1
   137ac:	1000181e 	bne	r2,zero,13810 <read+0xcc>
        (fd->dev->read))
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	10800017 	ldw	r2,0(r2)
   137b8:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   137bc:	10001426 	beq	r2,zero,13810 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	10800017 	ldw	r2,0(r2)
   137c8:	10800517 	ldw	r2,20(r2)
   137cc:	e0fffb17 	ldw	r3,-20(fp)
   137d0:	180d883a 	mov	r6,r3
   137d4:	e17ffc17 	ldw	r5,-16(fp)
   137d8:	e13fff17 	ldw	r4,-4(fp)
   137dc:	103ee83a 	callr	r2
   137e0:	e0bffe15 	stw	r2,-8(fp)
   137e4:	e0bffe17 	ldw	r2,-8(fp)
   137e8:	1000070e 	bge	r2,zero,13808 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   137ec:	00137080 	call	13708 <alt_get_errno>
   137f0:	1007883a 	mov	r3,r2
   137f4:	e0bffe17 	ldw	r2,-8(fp)
   137f8:	0085c83a 	sub	r2,zero,r2
   137fc:	18800015 	stw	r2,0(r3)
          return -1;
   13800:	00bfffc4 	movi	r2,-1
   13804:	00000c06 	br	13838 <read+0xf4>
        }
        return rval;
   13808:	e0bffe17 	ldw	r2,-8(fp)
   1380c:	00000a06 	br	13838 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13810:	00137080 	call	13708 <alt_get_errno>
   13814:	1007883a 	mov	r3,r2
   13818:	00800344 	movi	r2,13
   1381c:	18800015 	stw	r2,0(r3)
   13820:	00000406 	br	13834 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13824:	00137080 	call	13708 <alt_get_errno>
   13828:	1007883a 	mov	r3,r2
   1382c:	00801444 	movi	r2,81
   13830:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13834:	00bfffc4 	movi	r2,-1
}
   13838:	e037883a 	mov	sp,fp
   1383c:	dfc00117 	ldw	ra,4(sp)
   13840:	df000017 	ldw	fp,0(sp)
   13844:	dec00204 	addi	sp,sp,8
   13848:	f800283a 	ret

0001384c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1384c:	defffe04 	addi	sp,sp,-8
   13850:	df000115 	stw	fp,4(sp)
   13854:	df000104 	addi	fp,sp,4
   13858:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1385c:	e0bfff17 	ldw	r2,-4(fp)
   13860:	108000d0 	cmplti	r2,r2,3
   13864:	1000101e 	bne	r2,zero,138a8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   13868:	e0ffff17 	ldw	r3,-4(fp)
   1386c:	1805883a 	mov	r2,r3
   13870:	1085883a 	add	r2,r2,r2
   13874:	10c5883a 	add	r2,r2,r3
   13878:	100490ba 	slli	r2,r2,2
   1387c:	00c00074 	movhi	r3,1
   13880:	10c7883a 	add	r3,r2,r3
   13884:	1817ea15 	stw	zero,24488(r3)
    alt_fd_list[fd].dev      = 0;
   13888:	e0ffff17 	ldw	r3,-4(fp)
   1388c:	1805883a 	mov	r2,r3
   13890:	1085883a 	add	r2,r2,r2
   13894:	10c5883a 	add	r2,r2,r3
   13898:	100490ba 	slli	r2,r2,2
   1389c:	00c00074 	movhi	r3,1
   138a0:	10c7883a 	add	r3,r2,r3
   138a4:	1817e815 	stw	zero,24480(r3)
  }
}
   138a8:	0001883a 	nop
   138ac:	e037883a 	mov	sp,fp
   138b0:	df000017 	ldw	fp,0(sp)
   138b4:	dec00104 	addi	sp,sp,4
   138b8:	f800283a 	ret

000138bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   138bc:	defff904 	addi	sp,sp,-28
   138c0:	df000615 	stw	fp,24(sp)
   138c4:	df000604 	addi	fp,sp,24
   138c8:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   138cc:	0005303a 	rdctl	r2,status
   138d0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138d4:	e0fffd17 	ldw	r3,-12(fp)
   138d8:	00bfff84 	movi	r2,-2
   138dc:	1884703a 	and	r2,r3,r2
   138e0:	1001703a 	wrctl	status,r2
  return context;
   138e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   138e8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   138ec:	d0a00a17 	ldw	r2,-32728(gp)
   138f0:	10c000c4 	addi	r3,r2,3
   138f4:	00bfff04 	movi	r2,-4
   138f8:	1884703a 	and	r2,r3,r2
   138fc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13900:	d0e00a17 	ldw	r3,-32728(gp)
   13904:	e0bffa17 	ldw	r2,-24(fp)
   13908:	1887883a 	add	r3,r3,r2
   1390c:	008000b4 	movhi	r2,2
   13910:	10b00004 	addi	r2,r2,-16384
   13914:	10c0072e 	bgeu	r2,r3,13934 <sbrk+0x78>
   13918:	e0bfff17 	ldw	r2,-4(fp)
   1391c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   13920:	e0bffc17 	ldw	r2,-16(fp)
   13924:	1001703a 	wrctl	status,r2
}
   13928:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1392c:	00bfffc4 	movi	r2,-1
   13930:	00000c06 	br	13964 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13934:	d0a00a17 	ldw	r2,-32728(gp)
   13938:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   1393c:	d0e00a17 	ldw	r3,-32728(gp)
   13940:	e0bffa17 	ldw	r2,-24(fp)
   13944:	1885883a 	add	r2,r3,r2
   13948:	d0a00a15 	stw	r2,-32728(gp)
   1394c:	e0bfff17 	ldw	r2,-4(fp)
   13950:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   13954:	e0bffb17 	ldw	r2,-20(fp)
   13958:	1001703a 	wrctl	status,r2
}
   1395c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13960:	e0bffe17 	ldw	r2,-8(fp)
} 
   13964:	e037883a 	mov	sp,fp
   13968:	df000017 	ldw	fp,0(sp)
   1396c:	dec00104 	addi	sp,sp,4
   13970:	f800283a 	ret

00013974 <alt_get_errno>:
{
   13974:	defffe04 	addi	sp,sp,-8
   13978:	dfc00115 	stw	ra,4(sp)
   1397c:	df000015 	stw	fp,0(sp)
   13980:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13984:	d0a00917 	ldw	r2,-32732(gp)
   13988:	10000326 	beq	r2,zero,13998 <alt_get_errno+0x24>
   1398c:	d0a00917 	ldw	r2,-32732(gp)
   13990:	103ee83a 	callr	r2
   13994:	00000106 	br	1399c <alt_get_errno+0x28>
   13998:	d0a6ac04 	addi	r2,gp,-25936
}
   1399c:	e037883a 	mov	sp,fp
   139a0:	dfc00117 	ldw	ra,4(sp)
   139a4:	df000017 	ldw	fp,0(sp)
   139a8:	dec00204 	addi	sp,sp,8
   139ac:	f800283a 	ret

000139b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   139b0:	defff904 	addi	sp,sp,-28
   139b4:	dfc00615 	stw	ra,24(sp)
   139b8:	df000515 	stw	fp,20(sp)
   139bc:	df000504 	addi	fp,sp,20
   139c0:	e13ffd15 	stw	r4,-12(fp)
   139c4:	e17ffc15 	stw	r5,-16(fp)
   139c8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   139cc:	e0bffd17 	ldw	r2,-12(fp)
   139d0:	10000916 	blt	r2,zero,139f8 <write+0x48>
   139d4:	e0fffd17 	ldw	r3,-12(fp)
   139d8:	1805883a 	mov	r2,r3
   139dc:	1085883a 	add	r2,r2,r2
   139e0:	10c5883a 	add	r2,r2,r3
   139e4:	100490ba 	slli	r2,r2,2
   139e8:	00c00074 	movhi	r3,1
   139ec:	18d7e804 	addi	r3,r3,24480
   139f0:	10c5883a 	add	r2,r2,r3
   139f4:	00000106 	br	139fc <write+0x4c>
   139f8:	0005883a 	mov	r2,zero
   139fc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13a00:	e0bfff17 	ldw	r2,-4(fp)
   13a04:	10002126 	beq	r2,zero,13a8c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13a08:	e0bfff17 	ldw	r2,-4(fp)
   13a0c:	10800217 	ldw	r2,8(r2)
   13a10:	108000cc 	andi	r2,r2,3
   13a14:	10001826 	beq	r2,zero,13a78 <write+0xc8>
   13a18:	e0bfff17 	ldw	r2,-4(fp)
   13a1c:	10800017 	ldw	r2,0(r2)
   13a20:	10800617 	ldw	r2,24(r2)
   13a24:	10001426 	beq	r2,zero,13a78 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13a28:	e0bfff17 	ldw	r2,-4(fp)
   13a2c:	10800017 	ldw	r2,0(r2)
   13a30:	10800617 	ldw	r2,24(r2)
   13a34:	e0fffb17 	ldw	r3,-20(fp)
   13a38:	180d883a 	mov	r6,r3
   13a3c:	e17ffc17 	ldw	r5,-16(fp)
   13a40:	e13fff17 	ldw	r4,-4(fp)
   13a44:	103ee83a 	callr	r2
   13a48:	e0bffe15 	stw	r2,-8(fp)
   13a4c:	e0bffe17 	ldw	r2,-8(fp)
   13a50:	1000070e 	bge	r2,zero,13a70 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   13a54:	00139740 	call	13974 <alt_get_errno>
   13a58:	1007883a 	mov	r3,r2
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	0085c83a 	sub	r2,zero,r2
   13a64:	18800015 	stw	r2,0(r3)
        return -1;
   13a68:	00bfffc4 	movi	r2,-1
   13a6c:	00000c06 	br	13aa0 <write+0xf0>
      }
      return rval;
   13a70:	e0bffe17 	ldw	r2,-8(fp)
   13a74:	00000a06 	br	13aa0 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13a78:	00139740 	call	13974 <alt_get_errno>
   13a7c:	1007883a 	mov	r3,r2
   13a80:	00800344 	movi	r2,13
   13a84:	18800015 	stw	r2,0(r3)
   13a88:	00000406 	br	13a9c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13a8c:	00139740 	call	13974 <alt_get_errno>
   13a90:	1007883a 	mov	r3,r2
   13a94:	00801444 	movi	r2,81
   13a98:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a9c:	00bfffc4 	movi	r2,-1
}
   13aa0:	e037883a 	mov	sp,fp
   13aa4:	dfc00117 	ldw	ra,4(sp)
   13aa8:	df000017 	ldw	fp,0(sp)
   13aac:	dec00204 	addi	sp,sp,8
   13ab0:	f800283a 	ret

00013ab4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13ab4:	defffd04 	addi	sp,sp,-12
   13ab8:	dfc00215 	stw	ra,8(sp)
   13abc:	df000115 	stw	fp,4(sp)
   13ac0:	df000104 	addi	fp,sp,4
   13ac4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13ac8:	d1600604 	addi	r5,gp,-32744
   13acc:	e13fff17 	ldw	r4,-4(fp)
   13ad0:	00147ac0 	call	147ac <alt_dev_llist_insert>
}
   13ad4:	e037883a 	mov	sp,fp
   13ad8:	dfc00117 	ldw	ra,4(sp)
   13adc:	df000017 	ldw	fp,0(sp)
   13ae0:	dec00204 	addi	sp,sp,8
   13ae4:	f800283a 	ret

00013ae8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13ae8:	defffd04 	addi	sp,sp,-12
   13aec:	dfc00215 	stw	ra,8(sp)
   13af0:	df000115 	stw	fp,4(sp)
   13af4:	df000104 	addi	fp,sp,4
   13af8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13afc:	001516c0 	call	1516c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13b00:	00800044 	movi	r2,1
   13b04:	1001703a 	wrctl	status,r2
}
   13b08:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   13b0c:	0001883a 	nop
   13b10:	e037883a 	mov	sp,fp
   13b14:	dfc00117 	ldw	ra,4(sp)
   13b18:	df000017 	ldw	fp,0(sp)
   13b1c:	dec00204 	addi	sp,sp,8
   13b20:	f800283a 	ret

00013b24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13b24:	defffe04 	addi	sp,sp,-8
   13b28:	dfc00115 	stw	ra,4(sp)
   13b2c:	df000015 	stw	fp,0(sp)
   13b30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13b34:	000d883a 	mov	r6,zero
   13b38:	000b883a 	mov	r5,zero
   13b3c:	01000074 	movhi	r4,1
   13b40:	21185204 	addi	r4,r4,24904
   13b44:	0013cd00 	call	13cd0 <altera_avalon_jtag_uart_init>
   13b48:	01000074 	movhi	r4,1
   13b4c:	21184804 	addi	r4,r4,24864
   13b50:	0013ab40 	call	13ab4 <alt_dev_reg>
}
   13b54:	0001883a 	nop
   13b58:	e037883a 	mov	sp,fp
   13b5c:	dfc00117 	ldw	ra,4(sp)
   13b60:	df000017 	ldw	fp,0(sp)
   13b64:	dec00204 	addi	sp,sp,8
   13b68:	f800283a 	ret

00013b6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13b6c:	defffa04 	addi	sp,sp,-24
   13b70:	dfc00515 	stw	ra,20(sp)
   13b74:	df000415 	stw	fp,16(sp)
   13b78:	df000404 	addi	fp,sp,16
   13b7c:	e13ffe15 	stw	r4,-8(fp)
   13b80:	e17ffd15 	stw	r5,-12(fp)
   13b84:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b88:	e0bffe17 	ldw	r2,-8(fp)
   13b8c:	10800017 	ldw	r2,0(r2)
   13b90:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13b94:	e0bfff17 	ldw	r2,-4(fp)
   13b98:	10c00a04 	addi	r3,r2,40
   13b9c:	e0bffe17 	ldw	r2,-8(fp)
   13ba0:	10800217 	ldw	r2,8(r2)
   13ba4:	100f883a 	mov	r7,r2
   13ba8:	e1bffc17 	ldw	r6,-16(fp)
   13bac:	e17ffd17 	ldw	r5,-12(fp)
   13bb0:	1809883a 	mov	r4,r3
   13bb4:	00141a80 	call	141a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13bb8:	e037883a 	mov	sp,fp
   13bbc:	dfc00117 	ldw	ra,4(sp)
   13bc0:	df000017 	ldw	fp,0(sp)
   13bc4:	dec00204 	addi	sp,sp,8
   13bc8:	f800283a 	ret

00013bcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13bcc:	defffa04 	addi	sp,sp,-24
   13bd0:	dfc00515 	stw	ra,20(sp)
   13bd4:	df000415 	stw	fp,16(sp)
   13bd8:	df000404 	addi	fp,sp,16
   13bdc:	e13ffe15 	stw	r4,-8(fp)
   13be0:	e17ffd15 	stw	r5,-12(fp)
   13be4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13be8:	e0bffe17 	ldw	r2,-8(fp)
   13bec:	10800017 	ldw	r2,0(r2)
   13bf0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13bf4:	e0bfff17 	ldw	r2,-4(fp)
   13bf8:	10c00a04 	addi	r3,r2,40
   13bfc:	e0bffe17 	ldw	r2,-8(fp)
   13c00:	10800217 	ldw	r2,8(r2)
   13c04:	100f883a 	mov	r7,r2
   13c08:	e1bffc17 	ldw	r6,-16(fp)
   13c0c:	e17ffd17 	ldw	r5,-12(fp)
   13c10:	1809883a 	mov	r4,r3
   13c14:	00143c80 	call	143c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13c18:	e037883a 	mov	sp,fp
   13c1c:	dfc00117 	ldw	ra,4(sp)
   13c20:	df000017 	ldw	fp,0(sp)
   13c24:	dec00204 	addi	sp,sp,8
   13c28:	f800283a 	ret

00013c2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13c2c:	defffc04 	addi	sp,sp,-16
   13c30:	dfc00315 	stw	ra,12(sp)
   13c34:	df000215 	stw	fp,8(sp)
   13c38:	df000204 	addi	fp,sp,8
   13c3c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13c40:	e0bffe17 	ldw	r2,-8(fp)
   13c44:	10800017 	ldw	r2,0(r2)
   13c48:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13c4c:	e0bfff17 	ldw	r2,-4(fp)
   13c50:	10c00a04 	addi	r3,r2,40
   13c54:	e0bffe17 	ldw	r2,-8(fp)
   13c58:	10800217 	ldw	r2,8(r2)
   13c5c:	100b883a 	mov	r5,r2
   13c60:	1809883a 	mov	r4,r3
   13c64:	001404c0 	call	1404c <altera_avalon_jtag_uart_close>
}
   13c68:	e037883a 	mov	sp,fp
   13c6c:	dfc00117 	ldw	ra,4(sp)
   13c70:	df000017 	ldw	fp,0(sp)
   13c74:	dec00204 	addi	sp,sp,8
   13c78:	f800283a 	ret

00013c7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13c7c:	defffa04 	addi	sp,sp,-24
   13c80:	dfc00515 	stw	ra,20(sp)
   13c84:	df000415 	stw	fp,16(sp)
   13c88:	df000404 	addi	fp,sp,16
   13c8c:	e13ffe15 	stw	r4,-8(fp)
   13c90:	e17ffd15 	stw	r5,-12(fp)
   13c94:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13c98:	e0bffe17 	ldw	r2,-8(fp)
   13c9c:	10800017 	ldw	r2,0(r2)
   13ca0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13ca4:	e0bfff17 	ldw	r2,-4(fp)
   13ca8:	10800a04 	addi	r2,r2,40
   13cac:	e1bffc17 	ldw	r6,-16(fp)
   13cb0:	e17ffd17 	ldw	r5,-12(fp)
   13cb4:	1009883a 	mov	r4,r2
   13cb8:	00140b40 	call	140b4 <altera_avalon_jtag_uart_ioctl>
}
   13cbc:	e037883a 	mov	sp,fp
   13cc0:	dfc00117 	ldw	ra,4(sp)
   13cc4:	df000017 	ldw	fp,0(sp)
   13cc8:	dec00204 	addi	sp,sp,8
   13ccc:	f800283a 	ret

00013cd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13cd0:	defffa04 	addi	sp,sp,-24
   13cd4:	dfc00515 	stw	ra,20(sp)
   13cd8:	df000415 	stw	fp,16(sp)
   13cdc:	df000404 	addi	fp,sp,16
   13ce0:	e13fff15 	stw	r4,-4(fp)
   13ce4:	e17ffe15 	stw	r5,-8(fp)
   13ce8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13cec:	e0bfff17 	ldw	r2,-4(fp)
   13cf0:	00c00044 	movi	r3,1
   13cf4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13cf8:	e0bfff17 	ldw	r2,-4(fp)
   13cfc:	10800017 	ldw	r2,0(r2)
   13d00:	10800104 	addi	r2,r2,4
   13d04:	1007883a 	mov	r3,r2
   13d08:	e0bfff17 	ldw	r2,-4(fp)
   13d0c:	10800817 	ldw	r2,32(r2)
   13d10:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13d14:	e0bffe17 	ldw	r2,-8(fp)
   13d18:	e0fffd17 	ldw	r3,-12(fp)
   13d1c:	d8000015 	stw	zero,0(sp)
   13d20:	e1ffff17 	ldw	r7,-4(fp)
   13d24:	01800074 	movhi	r6,1
   13d28:	318f6404 	addi	r6,r6,15760
   13d2c:	180b883a 	mov	r5,r3
   13d30:	1009883a 	mov	r4,r2
   13d34:	001493c0 	call	1493c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13d38:	e0bfff17 	ldw	r2,-4(fp)
   13d3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13d40:	e0bfff17 	ldw	r2,-4(fp)
   13d44:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13d48:	d0e6b117 	ldw	r3,-25916(gp)
   13d4c:	e1ffff17 	ldw	r7,-4(fp)
   13d50:	01800074 	movhi	r6,1
   13d54:	318fe904 	addi	r6,r6,16292
   13d58:	180b883a 	mov	r5,r3
   13d5c:	1009883a 	mov	r4,r2
   13d60:	00145f00 	call	145f0 <alt_alarm_start>
   13d64:	1000040e 	bge	r2,zero,13d78 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13d68:	e0ffff17 	ldw	r3,-4(fp)
   13d6c:	00a00034 	movhi	r2,32768
   13d70:	10bfffc4 	addi	r2,r2,-1
   13d74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13d78:	0001883a 	nop
   13d7c:	e037883a 	mov	sp,fp
   13d80:	dfc00117 	ldw	ra,4(sp)
   13d84:	df000017 	ldw	fp,0(sp)
   13d88:	dec00204 	addi	sp,sp,8
   13d8c:	f800283a 	ret

00013d90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13d90:	defff704 	addi	sp,sp,-36
   13d94:	df000815 	stw	fp,32(sp)
   13d98:	df000804 	addi	fp,sp,32
   13d9c:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13da0:	e0bff817 	ldw	r2,-32(fp)
   13da4:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   13da8:	e0bffc17 	ldw	r2,-16(fp)
   13dac:	10800017 	ldw	r2,0(r2)
   13db0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   13db4:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13db8:	e0bffb17 	ldw	r2,-20(fp)
   13dbc:	10800104 	addi	r2,r2,4
   13dc0:	10800037 	ldwio	r2,0(r2)
   13dc4:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13dc8:	e0bffa17 	ldw	r2,-24(fp)
   13dcc:	1080c00c 	andi	r2,r2,768
   13dd0:	10006e26 	beq	r2,zero,13f8c <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13dd4:	e0bffa17 	ldw	r2,-24(fp)
   13dd8:	1080400c 	andi	r2,r2,256
   13ddc:	10003526 	beq	r2,zero,13eb4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13de0:	00800074 	movhi	r2,1
   13de4:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13de8:	e0bffc17 	ldw	r2,-16(fp)
   13dec:	10800a17 	ldw	r2,40(r2)
   13df0:	10800044 	addi	r2,r2,1
   13df4:	1081ffcc 	andi	r2,r2,2047
   13df8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   13dfc:	e0bffc17 	ldw	r2,-16(fp)
   13e00:	10800b17 	ldw	r2,44(r2)
   13e04:	e0fff917 	ldw	r3,-28(fp)
   13e08:	18801526 	beq	r3,r2,13e60 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13e0c:	e0bffb17 	ldw	r2,-20(fp)
   13e10:	10800037 	ldwio	r2,0(r2)
   13e14:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	10a0000c 	andi	r2,r2,32768
   13e20:	10001126 	beq	r2,zero,13e68 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13e24:	e0bffc17 	ldw	r2,-16(fp)
   13e28:	10800a17 	ldw	r2,40(r2)
   13e2c:	e0fffe17 	ldw	r3,-8(fp)
   13e30:	1809883a 	mov	r4,r3
   13e34:	e0fffc17 	ldw	r3,-16(fp)
   13e38:	1885883a 	add	r2,r3,r2
   13e3c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13e40:	e0bffc17 	ldw	r2,-16(fp)
   13e44:	10800a17 	ldw	r2,40(r2)
   13e48:	10800044 	addi	r2,r2,1
   13e4c:	10c1ffcc 	andi	r3,r2,2047
   13e50:	e0bffc17 	ldw	r2,-16(fp)
   13e54:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   13e58:	0001883a 	nop
      {
   13e5c:	003fe206 	br	13de8 <altera_avalon_jtag_uart_irq+0x58>
          break;
   13e60:	0001883a 	nop
   13e64:	00000106 	br	13e6c <altera_avalon_jtag_uart_irq+0xdc>
          break;
   13e68:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13e6c:	e0bffe17 	ldw	r2,-8(fp)
   13e70:	00ffffd4 	movui	r3,65535
   13e74:	18800f2e 	bgeu	r3,r2,13eb4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13e78:	e0bffc17 	ldw	r2,-16(fp)
   13e7c:	10c00817 	ldw	r3,32(r2)
   13e80:	00bfff84 	movi	r2,-2
   13e84:	1886703a 	and	r3,r3,r2
   13e88:	e0bffc17 	ldw	r2,-16(fp)
   13e8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13e90:	e0bffb17 	ldw	r2,-20(fp)
   13e94:	10800104 	addi	r2,r2,4
   13e98:	1007883a 	mov	r3,r2
   13e9c:	e0bffc17 	ldw	r2,-16(fp)
   13ea0:	10800817 	ldw	r2,32(r2)
   13ea4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ea8:	e0bffb17 	ldw	r2,-20(fp)
   13eac:	10800104 	addi	r2,r2,4
   13eb0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13eb4:	e0bffa17 	ldw	r2,-24(fp)
   13eb8:	1080800c 	andi	r2,r2,512
   13ebc:	103fbe26 	beq	r2,zero,13db8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13ec0:	e0bffa17 	ldw	r2,-24(fp)
   13ec4:	1004d43a 	srli	r2,r2,16
   13ec8:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ecc:	00001506 	br	13f24 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13ed0:	e0bffb17 	ldw	r2,-20(fp)
   13ed4:	e0fffc17 	ldw	r3,-16(fp)
   13ed8:	18c00d17 	ldw	r3,52(r3)
   13edc:	e13ffc17 	ldw	r4,-16(fp)
   13ee0:	20c7883a 	add	r3,r4,r3
   13ee4:	18c20e03 	ldbu	r3,2104(r3)
   13ee8:	18c03fcc 	andi	r3,r3,255
   13eec:	18c0201c 	xori	r3,r3,128
   13ef0:	18ffe004 	addi	r3,r3,-128
   13ef4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ef8:	e0bffc17 	ldw	r2,-16(fp)
   13efc:	10800d17 	ldw	r2,52(r2)
   13f00:	10800044 	addi	r2,r2,1
   13f04:	10c1ffcc 	andi	r3,r2,2047
   13f08:	e0bffc17 	ldw	r2,-16(fp)
   13f0c:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   13f10:	00800044 	movi	r2,1
   13f14:	e0bfff15 	stw	r2,-4(fp)

        space--;
   13f18:	e0bffd17 	ldw	r2,-12(fp)
   13f1c:	10bfffc4 	addi	r2,r2,-1
   13f20:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   13f24:	e0bffd17 	ldw	r2,-12(fp)
   13f28:	10000526 	beq	r2,zero,13f40 <altera_avalon_jtag_uart_irq+0x1b0>
   13f2c:	e0bffc17 	ldw	r2,-16(fp)
   13f30:	10c00d17 	ldw	r3,52(r2)
   13f34:	e0bffc17 	ldw	r2,-16(fp)
   13f38:	10800c17 	ldw	r2,48(r2)
   13f3c:	18bfe41e 	bne	r3,r2,13ed0 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   13f40:	e0bffd17 	ldw	r2,-12(fp)
   13f44:	103f9c26 	beq	r2,zero,13db8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13f48:	e0bffc17 	ldw	r2,-16(fp)
   13f4c:	10c00817 	ldw	r3,32(r2)
   13f50:	00bfff44 	movi	r2,-3
   13f54:	1886703a 	and	r3,r3,r2
   13f58:	e0bffc17 	ldw	r2,-16(fp)
   13f5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13f60:	e0bffc17 	ldw	r2,-16(fp)
   13f64:	10800017 	ldw	r2,0(r2)
   13f68:	10800104 	addi	r2,r2,4
   13f6c:	1007883a 	mov	r3,r2
   13f70:	e0bffc17 	ldw	r2,-16(fp)
   13f74:	10800817 	ldw	r2,32(r2)
   13f78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f7c:	e0bffb17 	ldw	r2,-20(fp)
   13f80:	10800104 	addi	r2,r2,4
   13f84:	10800037 	ldwio	r2,0(r2)
  {
   13f88:	003f8b06 	br	13db8 <altera_avalon_jtag_uart_irq+0x28>
      break;
   13f8c:	0001883a 	nop
      }
    }
  }
}
   13f90:	0001883a 	nop
   13f94:	e037883a 	mov	sp,fp
   13f98:	df000017 	ldw	fp,0(sp)
   13f9c:	dec00104 	addi	sp,sp,4
   13fa0:	f800283a 	ret

00013fa4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13fa4:	defffc04 	addi	sp,sp,-16
   13fa8:	df000315 	stw	fp,12(sp)
   13fac:	df000304 	addi	fp,sp,12
   13fb0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13fb4:	e0bffd17 	ldw	r2,-12(fp)
   13fb8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	10800017 	ldw	r2,0(r2)
   13fc4:	10800104 	addi	r2,r2,4
   13fc8:	10800037 	ldwio	r2,0(r2)
   13fcc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13fd0:	e0bffe17 	ldw	r2,-8(fp)
   13fd4:	1081000c 	andi	r2,r2,1024
   13fd8:	10000b26 	beq	r2,zero,14008 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13fdc:	e0bfff17 	ldw	r2,-4(fp)
   13fe0:	10800017 	ldw	r2,0(r2)
   13fe4:	10800104 	addi	r2,r2,4
   13fe8:	1007883a 	mov	r3,r2
   13fec:	e0bfff17 	ldw	r2,-4(fp)
   13ff0:	10800817 	ldw	r2,32(r2)
   13ff4:	10810014 	ori	r2,r2,1024
   13ff8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13ffc:	e0bfff17 	ldw	r2,-4(fp)
   14000:	10000915 	stw	zero,36(r2)
   14004:	00000c06 	br	14038 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14008:	e0bfff17 	ldw	r2,-4(fp)
   1400c:	10c00917 	ldw	r3,36(r2)
   14010:	00a00034 	movhi	r2,32768
   14014:	10bfff04 	addi	r2,r2,-4
   14018:	10c00736 	bltu	r2,r3,14038 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1401c:	e0bfff17 	ldw	r2,-4(fp)
   14020:	10800917 	ldw	r2,36(r2)
   14024:	10c00044 	addi	r3,r2,1
   14028:	e0bfff17 	ldw	r2,-4(fp)
   1402c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   14030:	e0bfff17 	ldw	r2,-4(fp)
   14034:	10800917 	ldw	r2,36(r2)
   14038:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1403c:	e037883a 	mov	sp,fp
   14040:	df000017 	ldw	fp,0(sp)
   14044:	dec00104 	addi	sp,sp,4
   14048:	f800283a 	ret

0001404c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1404c:	defffd04 	addi	sp,sp,-12
   14050:	df000215 	stw	fp,8(sp)
   14054:	df000204 	addi	fp,sp,8
   14058:	e13fff15 	stw	r4,-4(fp)
   1405c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14060:	00000506 	br	14078 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14064:	e0bffe17 	ldw	r2,-8(fp)
   14068:	1090000c 	andi	r2,r2,16384
   1406c:	10000226 	beq	r2,zero,14078 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14070:	00bffd44 	movi	r2,-11
   14074:	00000b06 	br	140a4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14078:	e0bfff17 	ldw	r2,-4(fp)
   1407c:	10c00d17 	ldw	r3,52(r2)
   14080:	e0bfff17 	ldw	r2,-4(fp)
   14084:	10800c17 	ldw	r2,48(r2)
   14088:	18800526 	beq	r3,r2,140a0 <altera_avalon_jtag_uart_close+0x54>
   1408c:	e0bfff17 	ldw	r2,-4(fp)
   14090:	10c00917 	ldw	r3,36(r2)
   14094:	e0bfff17 	ldw	r2,-4(fp)
   14098:	10800117 	ldw	r2,4(r2)
   1409c:	18bff136 	bltu	r3,r2,14064 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   140a0:	0005883a 	mov	r2,zero
}
   140a4:	e037883a 	mov	sp,fp
   140a8:	df000017 	ldw	fp,0(sp)
   140ac:	dec00104 	addi	sp,sp,4
   140b0:	f800283a 	ret

000140b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   140b4:	defffa04 	addi	sp,sp,-24
   140b8:	df000515 	stw	fp,20(sp)
   140bc:	df000504 	addi	fp,sp,20
   140c0:	e13ffd15 	stw	r4,-12(fp)
   140c4:	e17ffc15 	stw	r5,-16(fp)
   140c8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   140cc:	00bff9c4 	movi	r2,-25
   140d0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	109a8060 	cmpeqi	r2,r2,27137
   140dc:	1000041e 	bne	r2,zero,140f0 <altera_avalon_jtag_uart_ioctl+0x3c>
   140e0:	e0bffc17 	ldw	r2,-16(fp)
   140e4:	109a80a0 	cmpeqi	r2,r2,27138
   140e8:	1000181e 	bne	r2,zero,1414c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   140ec:	00002906 	br	14194 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   140f0:	e0bffd17 	ldw	r2,-12(fp)
   140f4:	10c00117 	ldw	r3,4(r2)
   140f8:	00a00034 	movhi	r2,32768
   140fc:	10bfffc4 	addi	r2,r2,-1
   14100:	18802126 	beq	r3,r2,14188 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   14104:	e0bffb17 	ldw	r2,-20(fp)
   14108:	10800017 	ldw	r2,0(r2)
   1410c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14110:	e0bffe17 	ldw	r2,-8(fp)
   14114:	10800090 	cmplti	r2,r2,2
   14118:	1000061e 	bne	r2,zero,14134 <altera_avalon_jtag_uart_ioctl+0x80>
   1411c:	e0fffe17 	ldw	r3,-8(fp)
   14120:	00a00034 	movhi	r2,32768
   14124:	10bfffc4 	addi	r2,r2,-1
   14128:	18800226 	beq	r3,r2,14134 <altera_avalon_jtag_uart_ioctl+0x80>
   1412c:	e0bffe17 	ldw	r2,-8(fp)
   14130:	00000206 	br	1413c <altera_avalon_jtag_uart_ioctl+0x88>
   14134:	00a00034 	movhi	r2,32768
   14138:	10bfff84 	addi	r2,r2,-2
   1413c:	e0fffd17 	ldw	r3,-12(fp)
   14140:	18800115 	stw	r2,4(r3)
      rc = 0;
   14144:	e03fff15 	stw	zero,-4(fp)
    break;
   14148:	00000f06 	br	14188 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   1414c:	e0bffd17 	ldw	r2,-12(fp)
   14150:	10c00117 	ldw	r3,4(r2)
   14154:	00a00034 	movhi	r2,32768
   14158:	10bfffc4 	addi	r2,r2,-1
   1415c:	18800c26 	beq	r3,r2,14190 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	10c00917 	ldw	r3,36(r2)
   14168:	e0bffd17 	ldw	r2,-12(fp)
   1416c:	10800117 	ldw	r2,4(r2)
   14170:	1885803a 	cmpltu	r2,r3,r2
   14174:	10c03fcc 	andi	r3,r2,255
   14178:	e0bffb17 	ldw	r2,-20(fp)
   1417c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14180:	e03fff15 	stw	zero,-4(fp)
    break;
   14184:	00000206 	br	14190 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   14188:	0001883a 	nop
   1418c:	00000106 	br	14194 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   14190:	0001883a 	nop
  }

  return rc;
   14194:	e0bfff17 	ldw	r2,-4(fp)
}
   14198:	e037883a 	mov	sp,fp
   1419c:	df000017 	ldw	fp,0(sp)
   141a0:	dec00104 	addi	sp,sp,4
   141a4:	f800283a 	ret

000141a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   141a8:	defff304 	addi	sp,sp,-52
   141ac:	dfc00c15 	stw	ra,48(sp)
   141b0:	df000b15 	stw	fp,44(sp)
   141b4:	df000b04 	addi	fp,sp,44
   141b8:	e13ff815 	stw	r4,-32(fp)
   141bc:	e17ff715 	stw	r5,-36(fp)
   141c0:	e1bff615 	stw	r6,-40(fp)
   141c4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   141c8:	e0bff717 	ldw	r2,-36(fp)
   141cc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   141d0:	00004706 	br	142f0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   141d4:	e0bff817 	ldw	r2,-32(fp)
   141d8:	10800a17 	ldw	r2,40(r2)
   141dc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   141e0:	e0bff817 	ldw	r2,-32(fp)
   141e4:	10800b17 	ldw	r2,44(r2)
   141e8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   141ec:	e0fffd17 	ldw	r3,-12(fp)
   141f0:	e0bffc17 	ldw	r2,-16(fp)
   141f4:	18800536 	bltu	r3,r2,1420c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   141f8:	e0fffd17 	ldw	r3,-12(fp)
   141fc:	e0bffc17 	ldw	r2,-16(fp)
   14200:	1885c83a 	sub	r2,r3,r2
   14204:	e0bffe15 	stw	r2,-8(fp)
   14208:	00000406 	br	1421c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1420c:	00c20004 	movi	r3,2048
   14210:	e0bffc17 	ldw	r2,-16(fp)
   14214:	1885c83a 	sub	r2,r3,r2
   14218:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1421c:	e0bffe17 	ldw	r2,-8(fp)
   14220:	10001e26 	beq	r2,zero,1429c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14224:	e0fff617 	ldw	r3,-40(fp)
   14228:	e0bffe17 	ldw	r2,-8(fp)
   1422c:	1880022e 	bgeu	r3,r2,14238 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14230:	e0bff617 	ldw	r2,-40(fp)
   14234:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14238:	e0bff817 	ldw	r2,-32(fp)
   1423c:	10c00e04 	addi	r3,r2,56
   14240:	e0bffc17 	ldw	r2,-16(fp)
   14244:	1885883a 	add	r2,r3,r2
   14248:	e1bffe17 	ldw	r6,-8(fp)
   1424c:	100b883a 	mov	r5,r2
   14250:	e13fff17 	ldw	r4,-4(fp)
   14254:	00116700 	call	11670 <memcpy>
      ptr   += n;
   14258:	e0ffff17 	ldw	r3,-4(fp)
   1425c:	e0bffe17 	ldw	r2,-8(fp)
   14260:	1885883a 	add	r2,r3,r2
   14264:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   14268:	e0fff617 	ldw	r3,-40(fp)
   1426c:	e0bffe17 	ldw	r2,-8(fp)
   14270:	1885c83a 	sub	r2,r3,r2
   14274:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14278:	e0fffc17 	ldw	r3,-16(fp)
   1427c:	e0bffe17 	ldw	r2,-8(fp)
   14280:	1885883a 	add	r2,r3,r2
   14284:	10c1ffcc 	andi	r3,r2,2047
   14288:	e0bff817 	ldw	r2,-32(fp)
   1428c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14290:	e0bff617 	ldw	r2,-40(fp)
   14294:	00bfcf16 	blt	zero,r2,141d4 <altera_avalon_jtag_uart_read+0x2c>
   14298:	00000106 	br	142a0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   1429c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   142a0:	e0ffff17 	ldw	r3,-4(fp)
   142a4:	e0bff717 	ldw	r2,-36(fp)
   142a8:	1880141e 	bne	r3,r2,142fc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   142ac:	e0bff517 	ldw	r2,-44(fp)
   142b0:	1090000c 	andi	r2,r2,16384
   142b4:	1000131e 	bne	r2,zero,14304 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   142b8:	0001883a 	nop
   142bc:	e0bff817 	ldw	r2,-32(fp)
   142c0:	10800a17 	ldw	r2,40(r2)
   142c4:	e0fffd17 	ldw	r3,-12(fp)
   142c8:	1880051e 	bne	r3,r2,142e0 <altera_avalon_jtag_uart_read+0x138>
   142cc:	e0bff817 	ldw	r2,-32(fp)
   142d0:	10c00917 	ldw	r3,36(r2)
   142d4:	e0bff817 	ldw	r2,-32(fp)
   142d8:	10800117 	ldw	r2,4(r2)
   142dc:	18bff736 	bltu	r3,r2,142bc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   142e0:	e0bff817 	ldw	r2,-32(fp)
   142e4:	10800a17 	ldw	r2,40(r2)
   142e8:	e0fffd17 	ldw	r3,-12(fp)
   142ec:	18800726 	beq	r3,r2,1430c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   142f0:	e0bff617 	ldw	r2,-40(fp)
   142f4:	00bfb716 	blt	zero,r2,141d4 <altera_avalon_jtag_uart_read+0x2c>
   142f8:	00000506 	br	14310 <altera_avalon_jtag_uart_read+0x168>
      break;
   142fc:	0001883a 	nop
   14300:	00000306 	br	14310 <altera_avalon_jtag_uart_read+0x168>
      break;
   14304:	0001883a 	nop
   14308:	00000106 	br	14310 <altera_avalon_jtag_uart_read+0x168>
      break;
   1430c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14310:	e0ffff17 	ldw	r3,-4(fp)
   14314:	e0bff717 	ldw	r2,-36(fp)
   14318:	18801926 	beq	r3,r2,14380 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   1431c:	0005303a 	rdctl	r2,status
   14320:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14324:	e0fff917 	ldw	r3,-28(fp)
   14328:	00bfff84 	movi	r2,-2
   1432c:	1884703a 	and	r2,r3,r2
   14330:	1001703a 	wrctl	status,r2
  return context;
   14334:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14338:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1433c:	e0bff817 	ldw	r2,-32(fp)
   14340:	10800817 	ldw	r2,32(r2)
   14344:	10c00054 	ori	r3,r2,1
   14348:	e0bff817 	ldw	r2,-32(fp)
   1434c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14350:	e0bff817 	ldw	r2,-32(fp)
   14354:	10800017 	ldw	r2,0(r2)
   14358:	10800104 	addi	r2,r2,4
   1435c:	1007883a 	mov	r3,r2
   14360:	e0bff817 	ldw	r2,-32(fp)
   14364:	10800817 	ldw	r2,32(r2)
   14368:	18800035 	stwio	r2,0(r3)
   1436c:	e0bffb17 	ldw	r2,-20(fp)
   14370:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   14374:	e0bffa17 	ldw	r2,-24(fp)
   14378:	1001703a 	wrctl	status,r2
}
   1437c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14380:	e0ffff17 	ldw	r3,-4(fp)
   14384:	e0bff717 	ldw	r2,-36(fp)
   14388:	18800426 	beq	r3,r2,1439c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   1438c:	e0ffff17 	ldw	r3,-4(fp)
   14390:	e0bff717 	ldw	r2,-36(fp)
   14394:	1885c83a 	sub	r2,r3,r2
   14398:	00000606 	br	143b4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1439c:	e0bff517 	ldw	r2,-44(fp)
   143a0:	1090000c 	andi	r2,r2,16384
   143a4:	10000226 	beq	r2,zero,143b0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   143a8:	00bffd44 	movi	r2,-11
   143ac:	00000106 	br	143b4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   143b0:	00bffec4 	movi	r2,-5
}
   143b4:	e037883a 	mov	sp,fp
   143b8:	dfc00117 	ldw	ra,4(sp)
   143bc:	df000017 	ldw	fp,0(sp)
   143c0:	dec00204 	addi	sp,sp,8
   143c4:	f800283a 	ret

000143c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   143c8:	defff304 	addi	sp,sp,-52
   143cc:	dfc00c15 	stw	ra,48(sp)
   143d0:	df000b15 	stw	fp,44(sp)
   143d4:	df000b04 	addi	fp,sp,44
   143d8:	e13ff815 	stw	r4,-32(fp)
   143dc:	e17ff715 	stw	r5,-36(fp)
   143e0:	e1bff615 	stw	r6,-40(fp)
   143e4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   143e8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   143ec:	e0bff717 	ldw	r2,-36(fp)
   143f0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   143f4:	00003706 	br	144d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   143f8:	e0bff817 	ldw	r2,-32(fp)
   143fc:	10800c17 	ldw	r2,48(r2)
   14400:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   14404:	e0bff817 	ldw	r2,-32(fp)
   14408:	10800d17 	ldw	r2,52(r2)
   1440c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   14410:	e0fffc17 	ldw	r3,-16(fp)
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	1880062e 	bgeu	r3,r2,14434 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1441c:	e0ffff17 	ldw	r3,-4(fp)
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	1885c83a 	sub	r2,r3,r2
   14428:	10bfffc4 	addi	r2,r2,-1
   1442c:	e0bffe15 	stw	r2,-8(fp)
   14430:	00000b06 	br	14460 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14434:	e0bfff17 	ldw	r2,-4(fp)
   14438:	10000526 	beq	r2,zero,14450 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1443c:	00c20004 	movi	r3,2048
   14440:	e0bffc17 	ldw	r2,-16(fp)
   14444:	1885c83a 	sub	r2,r3,r2
   14448:	e0bffe15 	stw	r2,-8(fp)
   1444c:	00000406 	br	14460 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14450:	00c1ffc4 	movi	r3,2047
   14454:	e0bffc17 	ldw	r2,-16(fp)
   14458:	1885c83a 	sub	r2,r3,r2
   1445c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   14460:	e0bffe17 	ldw	r2,-8(fp)
   14464:	10001e26 	beq	r2,zero,144e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14468:	e0fff617 	ldw	r3,-40(fp)
   1446c:	e0bffe17 	ldw	r2,-8(fp)
   14470:	1880022e 	bgeu	r3,r2,1447c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14474:	e0bff617 	ldw	r2,-40(fp)
   14478:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1447c:	e0bff817 	ldw	r2,-32(fp)
   14480:	10c20e04 	addi	r3,r2,2104
   14484:	e0bffc17 	ldw	r2,-16(fp)
   14488:	1885883a 	add	r2,r3,r2
   1448c:	e1bffe17 	ldw	r6,-8(fp)
   14490:	e17ff717 	ldw	r5,-36(fp)
   14494:	1009883a 	mov	r4,r2
   14498:	00116700 	call	11670 <memcpy>
      ptr   += n;
   1449c:	e0fff717 	ldw	r3,-36(fp)
   144a0:	e0bffe17 	ldw	r2,-8(fp)
   144a4:	1885883a 	add	r2,r3,r2
   144a8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   144ac:	e0fff617 	ldw	r3,-40(fp)
   144b0:	e0bffe17 	ldw	r2,-8(fp)
   144b4:	1885c83a 	sub	r2,r3,r2
   144b8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   144bc:	e0fffc17 	ldw	r3,-16(fp)
   144c0:	e0bffe17 	ldw	r2,-8(fp)
   144c4:	1885883a 	add	r2,r3,r2
   144c8:	10c1ffcc 	andi	r3,r2,2047
   144cc:	e0bff817 	ldw	r2,-32(fp)
   144d0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   144d4:	e0bff617 	ldw	r2,-40(fp)
   144d8:	00bfc716 	blt	zero,r2,143f8 <altera_avalon_jtag_uart_write+0x30>
   144dc:	00000106 	br	144e4 <altera_avalon_jtag_uart_write+0x11c>
        break;
   144e0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   144e4:	0005303a 	rdctl	r2,status
   144e8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144ec:	e0fff917 	ldw	r3,-28(fp)
   144f0:	00bfff84 	movi	r2,-2
   144f4:	1884703a 	and	r2,r3,r2
   144f8:	1001703a 	wrctl	status,r2
  return context;
   144fc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14500:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14504:	e0bff817 	ldw	r2,-32(fp)
   14508:	10800817 	ldw	r2,32(r2)
   1450c:	10c00094 	ori	r3,r2,2
   14510:	e0bff817 	ldw	r2,-32(fp)
   14514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14518:	e0bff817 	ldw	r2,-32(fp)
   1451c:	10800017 	ldw	r2,0(r2)
   14520:	10800104 	addi	r2,r2,4
   14524:	1007883a 	mov	r3,r2
   14528:	e0bff817 	ldw	r2,-32(fp)
   1452c:	10800817 	ldw	r2,32(r2)
   14530:	18800035 	stwio	r2,0(r3)
   14534:	e0bffb17 	ldw	r2,-20(fp)
   14538:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1453c:	e0bffa17 	ldw	r2,-24(fp)
   14540:	1001703a 	wrctl	status,r2
}
   14544:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14548:	e0bff617 	ldw	r2,-40(fp)
   1454c:	0080100e 	bge	zero,r2,14590 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14550:	e0bff517 	ldw	r2,-44(fp)
   14554:	1090000c 	andi	r2,r2,16384
   14558:	1000101e 	bne	r2,zero,1459c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1455c:	0001883a 	nop
   14560:	e0bff817 	ldw	r2,-32(fp)
   14564:	10800d17 	ldw	r2,52(r2)
   14568:	e0ffff17 	ldw	r3,-4(fp)
   1456c:	1880051e 	bne	r3,r2,14584 <altera_avalon_jtag_uart_write+0x1bc>
   14570:	e0bff817 	ldw	r2,-32(fp)
   14574:	10c00917 	ldw	r3,36(r2)
   14578:	e0bff817 	ldw	r2,-32(fp)
   1457c:	10800117 	ldw	r2,4(r2)
   14580:	18bff736 	bltu	r3,r2,14560 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14584:	e0bff817 	ldw	r2,-32(fp)
   14588:	10800917 	ldw	r2,36(r2)
   1458c:	1000051e 	bne	r2,zero,145a4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   14590:	e0bff617 	ldw	r2,-40(fp)
   14594:	00bfcf16 	blt	zero,r2,144d4 <altera_avalon_jtag_uart_write+0x10c>
   14598:	00000306 	br	145a8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   1459c:	0001883a 	nop
   145a0:	00000106 	br	145a8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   145a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   145a8:	e0fff717 	ldw	r3,-36(fp)
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	18800426 	beq	r3,r2,145c4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   145b4:	e0fff717 	ldw	r3,-36(fp)
   145b8:	e0bffd17 	ldw	r2,-12(fp)
   145bc:	1885c83a 	sub	r2,r3,r2
   145c0:	00000606 	br	145dc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   145c4:	e0bff517 	ldw	r2,-44(fp)
   145c8:	1090000c 	andi	r2,r2,16384
   145cc:	10000226 	beq	r2,zero,145d8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   145d0:	00bffd44 	movi	r2,-11
   145d4:	00000106 	br	145dc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   145d8:	00bffec4 	movi	r2,-5
}
   145dc:	e037883a 	mov	sp,fp
   145e0:	dfc00117 	ldw	ra,4(sp)
   145e4:	df000017 	ldw	fp,0(sp)
   145e8:	dec00204 	addi	sp,sp,8
   145ec:	f800283a 	ret

000145f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   145f0:	defff404 	addi	sp,sp,-48
   145f4:	df000b15 	stw	fp,44(sp)
   145f8:	df000b04 	addi	fp,sp,44
   145fc:	e13ff815 	stw	r4,-32(fp)
   14600:	e17ff715 	stw	r5,-36(fp)
   14604:	e1bff615 	stw	r6,-40(fp)
   14608:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   1460c:	e03ffe15 	stw	zero,-8(fp)
   14610:	e03fff15 	stw	zero,-4(fp)
   14614:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   14618:	10004826 	beq	r2,zero,1473c <alt_alarm_start+0x14c>
  {
    if (alarm)
   1461c:	e0bff817 	ldw	r2,-32(fp)
   14620:	10004426 	beq	r2,zero,14734 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   14624:	e0bff817 	ldw	r2,-32(fp)
   14628:	e0fff617 	ldw	r3,-40(fp)
   1462c:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   14630:	e0bff817 	ldw	r2,-32(fp)
   14634:	e0fff517 	ldw	r3,-44(fp)
   14638:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   1463c:	0005303a 	rdctl	r2,status
   14640:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14644:	e0fff917 	ldw	r3,-28(fp)
   14648:	00bfff84 	movi	r2,-2
   1464c:	1884703a 	and	r2,r3,r2
   14650:	1001703a 	wrctl	status,r2
  return context;
   14654:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14658:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1465c:	d0a6b217 	ldw	r2,-25912(gp)
   14660:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
   14664:	e0bffe15 	stw	r2,-8(fp)
   14668:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   1466c:	e0bff717 	ldw	r2,-36(fp)
   14670:	1011883a 	mov	r8,r2
   14674:	0013883a 	mov	r9,zero
   14678:	e13ffe17 	ldw	r4,-8(fp)
   1467c:	e17fff17 	ldw	r5,-4(fp)
   14680:	4105883a 	add	r2,r8,r4
   14684:	120d803a 	cmpltu	r6,r2,r8
   14688:	4947883a 	add	r3,r9,r5
   1468c:	30c9883a 	add	r4,r6,r3
   14690:	2007883a 	mov	r3,r4
   14694:	1009883a 	mov	r4,r2
   14698:	180b883a 	mov	r5,r3
   1469c:	01800044 	movi	r6,1
   146a0:	000f883a 	mov	r7,zero
   146a4:	2185883a 	add	r2,r4,r6
   146a8:	1111803a 	cmpltu	r8,r2,r4
   146ac:	29c7883a 	add	r3,r5,r7
   146b0:	40c9883a 	add	r4,r8,r3
   146b4:	2007883a 	mov	r3,r4
   146b8:	1009883a 	mov	r4,r2
   146bc:	180b883a 	mov	r5,r3
   146c0:	e0bff817 	ldw	r2,-32(fp)
   146c4:	11000215 	stw	r4,8(r2)
   146c8:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   146cc:	e0bff817 	ldw	r2,-32(fp)
   146d0:	d0e00c04 	addi	r3,gp,-32720
   146d4:	e0fffb15 	stw	r3,-20(fp)
   146d8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   146dc:	e0bffa17 	ldw	r2,-24(fp)
   146e0:	e0fffb17 	ldw	r3,-20(fp)
   146e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   146e8:	e0bffb17 	ldw	r2,-20(fp)
   146ec:	10c00017 	ldw	r3,0(r2)
   146f0:	e0bffa17 	ldw	r2,-24(fp)
   146f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   146f8:	e0bffb17 	ldw	r2,-20(fp)
   146fc:	10800017 	ldw	r2,0(r2)
   14700:	e0fffa17 	ldw	r3,-24(fp)
   14704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14708:	e0bffb17 	ldw	r2,-20(fp)
   1470c:	e0fffa17 	ldw	r3,-24(fp)
   14710:	10c00015 	stw	r3,0(r2)
}
   14714:	0001883a 	nop
   14718:	e0bffd17 	ldw	r2,-12(fp)
   1471c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14720:	e0bffc17 	ldw	r2,-16(fp)
   14724:	1001703a 	wrctl	status,r2
}
   14728:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   1472c:	0005883a 	mov	r2,zero
   14730:	00000306 	br	14740 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   14734:	00bffa84 	movi	r2,-22
   14738:	00000106 	br	14740 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   1473c:	00bfde84 	movi	r2,-134
  }
}
   14740:	e037883a 	mov	sp,fp
   14744:	df000017 	ldw	fp,0(sp)
   14748:	dec00104 	addi	sp,sp,4
   1474c:	f800283a 	ret

00014750 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14750:	deffff04 	addi	sp,sp,-4
   14754:	df000015 	stw	fp,0(sp)
   14758:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1475c:	0001883a 	nop
   14760:	e037883a 	mov	sp,fp
   14764:	df000017 	ldw	fp,0(sp)
   14768:	dec00104 	addi	sp,sp,4
   1476c:	f800283a 	ret

00014770 <alt_get_errno>:
{
   14770:	defffe04 	addi	sp,sp,-8
   14774:	dfc00115 	stw	ra,4(sp)
   14778:	df000015 	stw	fp,0(sp)
   1477c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14780:	d0a00917 	ldw	r2,-32732(gp)
   14784:	10000326 	beq	r2,zero,14794 <alt_get_errno+0x24>
   14788:	d0a00917 	ldw	r2,-32732(gp)
   1478c:	103ee83a 	callr	r2
   14790:	00000106 	br	14798 <alt_get_errno+0x28>
   14794:	d0a6ac04 	addi	r2,gp,-25936
}
   14798:	e037883a 	mov	sp,fp
   1479c:	dfc00117 	ldw	ra,4(sp)
   147a0:	df000017 	ldw	fp,0(sp)
   147a4:	dec00204 	addi	sp,sp,8
   147a8:	f800283a 	ret

000147ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   147ac:	defffa04 	addi	sp,sp,-24
   147b0:	dfc00515 	stw	ra,20(sp)
   147b4:	df000415 	stw	fp,16(sp)
   147b8:	df000404 	addi	fp,sp,16
   147bc:	e13ffd15 	stw	r4,-12(fp)
   147c0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   147c4:	e0bffd17 	ldw	r2,-12(fp)
   147c8:	10000326 	beq	r2,zero,147d8 <alt_dev_llist_insert+0x2c>
   147cc:	e0bffd17 	ldw	r2,-12(fp)
   147d0:	10800217 	ldw	r2,8(r2)
   147d4:	1000061e 	bne	r2,zero,147f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   147d8:	00147700 	call	14770 <alt_get_errno>
   147dc:	1007883a 	mov	r3,r2
   147e0:	00800584 	movi	r2,22
   147e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   147e8:	00bffa84 	movi	r2,-22
   147ec:	00001406 	br	14840 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   147f0:	e0bffd17 	ldw	r2,-12(fp)
   147f4:	e0fffc17 	ldw	r3,-16(fp)
   147f8:	e0ffff15 	stw	r3,-4(fp)
   147fc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   14800:	e0bffe17 	ldw	r2,-8(fp)
   14804:	e0ffff17 	ldw	r3,-4(fp)
   14808:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1480c:	e0bfff17 	ldw	r2,-4(fp)
   14810:	10c00017 	ldw	r3,0(r2)
   14814:	e0bffe17 	ldw	r2,-8(fp)
   14818:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1481c:	e0bfff17 	ldw	r2,-4(fp)
   14820:	10800017 	ldw	r2,0(r2)
   14824:	e0fffe17 	ldw	r3,-8(fp)
   14828:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1482c:	e0bfff17 	ldw	r2,-4(fp)
   14830:	e0fffe17 	ldw	r3,-8(fp)
   14834:	10c00015 	stw	r3,0(r2)
}
   14838:	0001883a 	nop

  return 0;  
   1483c:	0005883a 	mov	r2,zero
}
   14840:	e037883a 	mov	sp,fp
   14844:	dfc00117 	ldw	ra,4(sp)
   14848:	df000017 	ldw	fp,0(sp)
   1484c:	dec00204 	addi	sp,sp,8
   14850:	f800283a 	ret

00014854 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14854:	defffd04 	addi	sp,sp,-12
   14858:	dfc00215 	stw	ra,8(sp)
   1485c:	df000115 	stw	fp,4(sp)
   14860:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14864:	00800074 	movhi	r2,1
   14868:	1095bf04 	addi	r2,r2,22268
   1486c:	e0bfff15 	stw	r2,-4(fp)
   14870:	00000606 	br	1488c <_do_ctors+0x38>
        (*ctor) (); 
   14874:	e0bfff17 	ldw	r2,-4(fp)
   14878:	10800017 	ldw	r2,0(r2)
   1487c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14880:	e0bfff17 	ldw	r2,-4(fp)
   14884:	10bfff04 	addi	r2,r2,-4
   14888:	e0bfff15 	stw	r2,-4(fp)
   1488c:	e0ffff17 	ldw	r3,-4(fp)
   14890:	00800074 	movhi	r2,1
   14894:	1095c004 	addi	r2,r2,22272
   14898:	18bff62e 	bgeu	r3,r2,14874 <_do_ctors+0x20>
}
   1489c:	0001883a 	nop
   148a0:	0001883a 	nop
   148a4:	e037883a 	mov	sp,fp
   148a8:	dfc00117 	ldw	ra,4(sp)
   148ac:	df000017 	ldw	fp,0(sp)
   148b0:	dec00204 	addi	sp,sp,8
   148b4:	f800283a 	ret

000148b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   148b8:	defffd04 	addi	sp,sp,-12
   148bc:	dfc00215 	stw	ra,8(sp)
   148c0:	df000115 	stw	fp,4(sp)
   148c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   148c8:	00800074 	movhi	r2,1
   148cc:	1095bf04 	addi	r2,r2,22268
   148d0:	e0bfff15 	stw	r2,-4(fp)
   148d4:	00000606 	br	148f0 <_do_dtors+0x38>
        (*dtor) (); 
   148d8:	e0bfff17 	ldw	r2,-4(fp)
   148dc:	10800017 	ldw	r2,0(r2)
   148e0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	10bfff04 	addi	r2,r2,-4
   148ec:	e0bfff15 	stw	r2,-4(fp)
   148f0:	e0ffff17 	ldw	r3,-4(fp)
   148f4:	00800074 	movhi	r2,1
   148f8:	1095c004 	addi	r2,r2,22272
   148fc:	18bff62e 	bgeu	r3,r2,148d8 <_do_dtors+0x20>
}
   14900:	0001883a 	nop
   14904:	0001883a 	nop
   14908:	e037883a 	mov	sp,fp
   1490c:	dfc00117 	ldw	ra,4(sp)
   14910:	df000017 	ldw	fp,0(sp)
   14914:	dec00204 	addi	sp,sp,8
   14918:	f800283a 	ret

0001491c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1491c:	deffff04 	addi	sp,sp,-4
   14920:	df000015 	stw	fp,0(sp)
   14924:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14928:	0001883a 	nop
   1492c:	e037883a 	mov	sp,fp
   14930:	df000017 	ldw	fp,0(sp)
   14934:	dec00104 	addi	sp,sp,4
   14938:	f800283a 	ret

0001493c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1493c:	defff904 	addi	sp,sp,-28
   14940:	dfc00615 	stw	ra,24(sp)
   14944:	df000515 	stw	fp,20(sp)
   14948:	df000504 	addi	fp,sp,20
   1494c:	e13fff15 	stw	r4,-4(fp)
   14950:	e17ffe15 	stw	r5,-8(fp)
   14954:	e1bffd15 	stw	r6,-12(fp)
   14958:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1495c:	e0800217 	ldw	r2,8(fp)
   14960:	d8800015 	stw	r2,0(sp)
   14964:	e1fffc17 	ldw	r7,-16(fp)
   14968:	e1bffd17 	ldw	r6,-12(fp)
   1496c:	e17ffe17 	ldw	r5,-8(fp)
   14970:	e13fff17 	ldw	r4,-4(fp)
   14974:	0014aec0 	call	14aec <alt_iic_isr_register>
}  
   14978:	e037883a 	mov	sp,fp
   1497c:	dfc00117 	ldw	ra,4(sp)
   14980:	df000017 	ldw	fp,0(sp)
   14984:	dec00204 	addi	sp,sp,8
   14988:	f800283a 	ret

0001498c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1498c:	defff904 	addi	sp,sp,-28
   14990:	df000615 	stw	fp,24(sp)
   14994:	df000604 	addi	fp,sp,24
   14998:	e13ffb15 	stw	r4,-20(fp)
   1499c:	e17ffa15 	stw	r5,-24(fp)
   149a0:	e0bffa17 	ldw	r2,-24(fp)
   149a4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   149a8:	0005303a 	rdctl	r2,status
   149ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149b0:	e0fffe17 	ldw	r3,-8(fp)
   149b4:	00bfff84 	movi	r2,-2
   149b8:	1884703a 	and	r2,r3,r2
   149bc:	1001703a 	wrctl	status,r2
  return context;
   149c0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   149c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   149c8:	00c00044 	movi	r3,1
   149cc:	e0bfff17 	ldw	r2,-4(fp)
   149d0:	1884983a 	sll	r2,r3,r2
   149d4:	1007883a 	mov	r3,r2
   149d8:	d0a6b017 	ldw	r2,-25920(gp)
   149dc:	1884b03a 	or	r2,r3,r2
   149e0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   149e4:	d0a6b017 	ldw	r2,-25920(gp)
   149e8:	100170fa 	wrctl	ienable,r2
   149ec:	e0bffd17 	ldw	r2,-12(fp)
   149f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   149f4:	e0bffc17 	ldw	r2,-16(fp)
   149f8:	1001703a 	wrctl	status,r2
}
   149fc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14a00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14a04:	e037883a 	mov	sp,fp
   14a08:	df000017 	ldw	fp,0(sp)
   14a0c:	dec00104 	addi	sp,sp,4
   14a10:	f800283a 	ret

00014a14 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14a14:	defff904 	addi	sp,sp,-28
   14a18:	df000615 	stw	fp,24(sp)
   14a1c:	df000604 	addi	fp,sp,24
   14a20:	e13ffb15 	stw	r4,-20(fp)
   14a24:	e17ffa15 	stw	r5,-24(fp)
   14a28:	e0bffa17 	ldw	r2,-24(fp)
   14a2c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14a30:	0005303a 	rdctl	r2,status
   14a34:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a38:	e0fffe17 	ldw	r3,-8(fp)
   14a3c:	00bfff84 	movi	r2,-2
   14a40:	1884703a 	and	r2,r3,r2
   14a44:	1001703a 	wrctl	status,r2
  return context;
   14a48:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14a4c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14a50:	00c00044 	movi	r3,1
   14a54:	e0bfff17 	ldw	r2,-4(fp)
   14a58:	1884983a 	sll	r2,r3,r2
   14a5c:	0084303a 	nor	r2,zero,r2
   14a60:	1007883a 	mov	r3,r2
   14a64:	d0a6b017 	ldw	r2,-25920(gp)
   14a68:	1884703a 	and	r2,r3,r2
   14a6c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14a70:	d0a6b017 	ldw	r2,-25920(gp)
   14a74:	100170fa 	wrctl	ienable,r2
   14a78:	e0bffd17 	ldw	r2,-12(fp)
   14a7c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14a80:	e0bffc17 	ldw	r2,-16(fp)
   14a84:	1001703a 	wrctl	status,r2
}
   14a88:	0001883a 	nop
  return 0;
   14a8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14a90:	e037883a 	mov	sp,fp
   14a94:	df000017 	ldw	fp,0(sp)
   14a98:	dec00104 	addi	sp,sp,4
   14a9c:	f800283a 	ret

00014aa0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14aa0:	defffc04 	addi	sp,sp,-16
   14aa4:	df000315 	stw	fp,12(sp)
   14aa8:	df000304 	addi	fp,sp,12
   14aac:	e13ffe15 	stw	r4,-8(fp)
   14ab0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14ab4:	000530fa 	rdctl	r2,ienable
   14ab8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14abc:	00c00044 	movi	r3,1
   14ac0:	e0bffd17 	ldw	r2,-12(fp)
   14ac4:	1884983a 	sll	r2,r3,r2
   14ac8:	1007883a 	mov	r3,r2
   14acc:	e0bfff17 	ldw	r2,-4(fp)
   14ad0:	1884703a 	and	r2,r3,r2
   14ad4:	1004c03a 	cmpne	r2,r2,zero
   14ad8:	10803fcc 	andi	r2,r2,255
}
   14adc:	e037883a 	mov	sp,fp
   14ae0:	df000017 	ldw	fp,0(sp)
   14ae4:	dec00104 	addi	sp,sp,4
   14ae8:	f800283a 	ret

00014aec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14aec:	defff504 	addi	sp,sp,-44
   14af0:	dfc00a15 	stw	ra,40(sp)
   14af4:	df000915 	stw	fp,36(sp)
   14af8:	df000904 	addi	fp,sp,36
   14afc:	e13ffa15 	stw	r4,-24(fp)
   14b00:	e17ff915 	stw	r5,-28(fp)
   14b04:	e1bff815 	stw	r6,-32(fp)
   14b08:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14b0c:	00bffa84 	movi	r2,-22
   14b10:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14b14:	e0bff917 	ldw	r2,-28(fp)
   14b18:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14b1c:	e0bffe17 	ldw	r2,-8(fp)
   14b20:	10800808 	cmpgei	r2,r2,32
   14b24:	1000251e 	bne	r2,zero,14bbc <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14b28:	0005303a 	rdctl	r2,status
   14b2c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b30:	e0fffc17 	ldw	r3,-16(fp)
   14b34:	00bfff84 	movi	r2,-2
   14b38:	1884703a 	and	r2,r3,r2
   14b3c:	1001703a 	wrctl	status,r2
  return context;
   14b40:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14b44:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14b48:	e0bffe17 	ldw	r2,-8(fp)
   14b4c:	100890fa 	slli	r4,r2,3
   14b50:	e0fff817 	ldw	r3,-32(fp)
   14b54:	008000b4 	movhi	r2,2
   14b58:	2085883a 	add	r2,r4,r2
   14b5c:	10e31f15 	stw	r3,-29572(r2)
    alt_irq[id].context = isr_context;
   14b60:	e0bffe17 	ldw	r2,-8(fp)
   14b64:	100890fa 	slli	r4,r2,3
   14b68:	e0fff717 	ldw	r3,-36(fp)
   14b6c:	008000b4 	movhi	r2,2
   14b70:	2085883a 	add	r2,r4,r2
   14b74:	10e32015 	stw	r3,-29568(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14b78:	e0bff817 	ldw	r2,-32(fp)
   14b7c:	10000526 	beq	r2,zero,14b94 <alt_iic_isr_register+0xa8>
   14b80:	e0bffe17 	ldw	r2,-8(fp)
   14b84:	100b883a 	mov	r5,r2
   14b88:	e13ffa17 	ldw	r4,-24(fp)
   14b8c:	001498c0 	call	1498c <alt_ic_irq_enable>
   14b90:	00000406 	br	14ba4 <alt_iic_isr_register+0xb8>
   14b94:	e0bffe17 	ldw	r2,-8(fp)
   14b98:	100b883a 	mov	r5,r2
   14b9c:	e13ffa17 	ldw	r4,-24(fp)
   14ba0:	0014a140 	call	14a14 <alt_ic_irq_disable>
   14ba4:	e0bfff15 	stw	r2,-4(fp)
   14ba8:	e0bffd17 	ldw	r2,-12(fp)
   14bac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14bb0:	e0bffb17 	ldw	r2,-20(fp)
   14bb4:	1001703a 	wrctl	status,r2
}
   14bb8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14bbc:	e0bfff17 	ldw	r2,-4(fp)
}
   14bc0:	e037883a 	mov	sp,fp
   14bc4:	dfc00117 	ldw	ra,4(sp)
   14bc8:	df000017 	ldw	fp,0(sp)
   14bcc:	dec00204 	addi	sp,sp,8
   14bd0:	f800283a 	ret

00014bd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14bd4:	defff904 	addi	sp,sp,-28
   14bd8:	dfc00615 	stw	ra,24(sp)
   14bdc:	df000515 	stw	fp,20(sp)
   14be0:	df000504 	addi	fp,sp,20
   14be4:	e13ffe15 	stw	r4,-8(fp)
   14be8:	e17ffd15 	stw	r5,-12(fp)
   14bec:	e1bffc15 	stw	r6,-16(fp)
   14bf0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   14bf4:	e1bffb17 	ldw	r6,-20(fp)
   14bf8:	e17ffc17 	ldw	r5,-16(fp)
   14bfc:	e13ffd17 	ldw	r4,-12(fp)
   14c00:	0014e3c0 	call	14e3c <open>
   14c04:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	10002016 	blt	r2,zero,14c90 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   14c10:	e0ffff17 	ldw	r3,-4(fp)
   14c14:	1805883a 	mov	r2,r3
   14c18:	1085883a 	add	r2,r2,r2
   14c1c:	10c5883a 	add	r2,r2,r3
   14c20:	100490ba 	slli	r2,r2,2
   14c24:	00c00074 	movhi	r3,1
   14c28:	10c7883a 	add	r3,r2,r3
   14c2c:	18d7e817 	ldw	r3,24480(r3)
   14c30:	e0bffe17 	ldw	r2,-8(fp)
   14c34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14c38:	e0ffff17 	ldw	r3,-4(fp)
   14c3c:	1805883a 	mov	r2,r3
   14c40:	1085883a 	add	r2,r2,r2
   14c44:	10c5883a 	add	r2,r2,r3
   14c48:	100490ba 	slli	r2,r2,2
   14c4c:	00c00074 	movhi	r3,1
   14c50:	10c7883a 	add	r3,r2,r3
   14c54:	18d7e917 	ldw	r3,24484(r3)
   14c58:	e0bffe17 	ldw	r2,-8(fp)
   14c5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14c60:	e0ffff17 	ldw	r3,-4(fp)
   14c64:	1805883a 	mov	r2,r3
   14c68:	1085883a 	add	r2,r2,r2
   14c6c:	10c5883a 	add	r2,r2,r3
   14c70:	100490ba 	slli	r2,r2,2
   14c74:	00c00074 	movhi	r3,1
   14c78:	10c7883a 	add	r3,r2,r3
   14c7c:	18d7ea17 	ldw	r3,24488(r3)
   14c80:	e0bffe17 	ldw	r2,-8(fp)
   14c84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14c88:	e13fff17 	ldw	r4,-4(fp)
   14c8c:	001384c0 	call	1384c <alt_release_fd>
  }
} 
   14c90:	0001883a 	nop
   14c94:	e037883a 	mov	sp,fp
   14c98:	dfc00117 	ldw	ra,4(sp)
   14c9c:	df000017 	ldw	fp,0(sp)
   14ca0:	dec00204 	addi	sp,sp,8
   14ca4:	f800283a 	ret

00014ca8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14ca8:	defffb04 	addi	sp,sp,-20
   14cac:	dfc00415 	stw	ra,16(sp)
   14cb0:	df000315 	stw	fp,12(sp)
   14cb4:	df000304 	addi	fp,sp,12
   14cb8:	e13fff15 	stw	r4,-4(fp)
   14cbc:	e17ffe15 	stw	r5,-8(fp)
   14cc0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14cc4:	01c07fc4 	movi	r7,511
   14cc8:	01800044 	movi	r6,1
   14ccc:	e17fff17 	ldw	r5,-4(fp)
   14cd0:	01000074 	movhi	r4,1
   14cd4:	2117eb04 	addi	r4,r4,24492
   14cd8:	0014bd40 	call	14bd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14cdc:	01c07fc4 	movi	r7,511
   14ce0:	000d883a 	mov	r6,zero
   14ce4:	e17ffe17 	ldw	r5,-8(fp)
   14ce8:	01000074 	movhi	r4,1
   14cec:	2117e804 	addi	r4,r4,24480
   14cf0:	0014bd40 	call	14bd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14cf4:	01c07fc4 	movi	r7,511
   14cf8:	01800044 	movi	r6,1
   14cfc:	e17ffd17 	ldw	r5,-12(fp)
   14d00:	01000074 	movhi	r4,1
   14d04:	2117ee04 	addi	r4,r4,24504
   14d08:	0014bd40 	call	14bd4 <alt_open_fd>
}  
   14d0c:	0001883a 	nop
   14d10:	e037883a 	mov	sp,fp
   14d14:	dfc00117 	ldw	ra,4(sp)
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00204 	addi	sp,sp,8
   14d20:	f800283a 	ret

00014d24 <alt_get_errno>:
{
   14d24:	defffe04 	addi	sp,sp,-8
   14d28:	dfc00115 	stw	ra,4(sp)
   14d2c:	df000015 	stw	fp,0(sp)
   14d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d34:	d0a00917 	ldw	r2,-32732(gp)
   14d38:	10000326 	beq	r2,zero,14d48 <alt_get_errno+0x24>
   14d3c:	d0a00917 	ldw	r2,-32732(gp)
   14d40:	103ee83a 	callr	r2
   14d44:	00000106 	br	14d4c <alt_get_errno+0x28>
   14d48:	d0a6ac04 	addi	r2,gp,-25936
}
   14d4c:	e037883a 	mov	sp,fp
   14d50:	dfc00117 	ldw	ra,4(sp)
   14d54:	df000017 	ldw	fp,0(sp)
   14d58:	dec00204 	addi	sp,sp,8
   14d5c:	f800283a 	ret

00014d60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14d60:	defffd04 	addi	sp,sp,-12
   14d64:	df000215 	stw	fp,8(sp)
   14d68:	df000204 	addi	fp,sp,8
   14d6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14d70:	e0bffe17 	ldw	r2,-8(fp)
   14d74:	10800217 	ldw	r2,8(r2)
   14d78:	10d00034 	orhi	r3,r2,16384
   14d7c:	e0bffe17 	ldw	r2,-8(fp)
   14d80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14d84:	e03fff15 	stw	zero,-4(fp)
   14d88:	00002306 	br	14e18 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14d8c:	e0ffff17 	ldw	r3,-4(fp)
   14d90:	1805883a 	mov	r2,r3
   14d94:	1085883a 	add	r2,r2,r2
   14d98:	10c5883a 	add	r2,r2,r3
   14d9c:	100490ba 	slli	r2,r2,2
   14da0:	00c00074 	movhi	r3,1
   14da4:	10c7883a 	add	r3,r2,r3
   14da8:	18d7e817 	ldw	r3,24480(r3)
   14dac:	e0bffe17 	ldw	r2,-8(fp)
   14db0:	10800017 	ldw	r2,0(r2)
   14db4:	1880151e 	bne	r3,r2,14e0c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14db8:	e0ffff17 	ldw	r3,-4(fp)
   14dbc:	1805883a 	mov	r2,r3
   14dc0:	1085883a 	add	r2,r2,r2
   14dc4:	10c5883a 	add	r2,r2,r3
   14dc8:	100490ba 	slli	r2,r2,2
   14dcc:	00c00074 	movhi	r3,1
   14dd0:	10c7883a 	add	r3,r2,r3
   14dd4:	1897ea17 	ldw	r2,24488(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   14dd8:	10000c0e 	bge	r2,zero,14e0c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   14ddc:	e0ffff17 	ldw	r3,-4(fp)
   14de0:	1805883a 	mov	r2,r3
   14de4:	1085883a 	add	r2,r2,r2
   14de8:	10c5883a 	add	r2,r2,r3
   14dec:	100490ba 	slli	r2,r2,2
   14df0:	00c00074 	movhi	r3,1
   14df4:	18d7e804 	addi	r3,r3,24480
   14df8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14dfc:	e0fffe17 	ldw	r3,-8(fp)
   14e00:	18800226 	beq	r3,r2,14e0c <alt_file_locked+0xac>
    {
      return -EACCES;
   14e04:	00bffcc4 	movi	r2,-13
   14e08:	00000806 	br	14e2c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   14e0c:	e0bfff17 	ldw	r2,-4(fp)
   14e10:	10800044 	addi	r2,r2,1
   14e14:	e0bfff15 	stw	r2,-4(fp)
   14e18:	d0a00817 	ldw	r2,-32736(gp)
   14e1c:	1007883a 	mov	r3,r2
   14e20:	e0bfff17 	ldw	r2,-4(fp)
   14e24:	18bfd92e 	bgeu	r3,r2,14d8c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14e28:	0005883a 	mov	r2,zero
}
   14e2c:	e037883a 	mov	sp,fp
   14e30:	df000017 	ldw	fp,0(sp)
   14e34:	dec00104 	addi	sp,sp,4
   14e38:	f800283a 	ret

00014e3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14e3c:	defff604 	addi	sp,sp,-40
   14e40:	dfc00915 	stw	ra,36(sp)
   14e44:	df000815 	stw	fp,32(sp)
   14e48:	df000804 	addi	fp,sp,32
   14e4c:	e13ffa15 	stw	r4,-24(fp)
   14e50:	e17ff915 	stw	r5,-28(fp)
   14e54:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14e58:	00bfffc4 	movi	r2,-1
   14e5c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   14e60:	00bffb44 	movi	r2,-19
   14e64:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   14e68:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14e6c:	d1600604 	addi	r5,gp,-32744
   14e70:	e13ffa17 	ldw	r4,-24(fp)
   14e74:	00151900 	call	15190 <alt_find_dev>
   14e78:	e0bfff15 	stw	r2,-4(fp)
   14e7c:	e0bfff17 	ldw	r2,-4(fp)
   14e80:	1000051e 	bne	r2,zero,14e98 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14e84:	e13ffa17 	ldw	r4,-24(fp)
   14e88:	00152200 	call	15220 <alt_find_file>
   14e8c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   14e90:	00800044 	movi	r2,1
   14e94:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14e98:	e0bfff17 	ldw	r2,-4(fp)
   14e9c:	10002c26 	beq	r2,zero,14f50 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14ea0:	e13fff17 	ldw	r4,-4(fp)
   14ea4:	00153280 	call	15328 <alt_get_fd>
   14ea8:	e0bffe15 	stw	r2,-8(fp)
   14eac:	e0bffe17 	ldw	r2,-8(fp)
   14eb0:	1000030e 	bge	r2,zero,14ec0 <open+0x84>
    {
      status = index;
   14eb4:	e0bffe17 	ldw	r2,-8(fp)
   14eb8:	e0bffd15 	stw	r2,-12(fp)
   14ebc:	00002606 	br	14f58 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   14ec0:	e0fffe17 	ldw	r3,-8(fp)
   14ec4:	1805883a 	mov	r2,r3
   14ec8:	1085883a 	add	r2,r2,r2
   14ecc:	10c5883a 	add	r2,r2,r3
   14ed0:	100490ba 	slli	r2,r2,2
   14ed4:	00c00074 	movhi	r3,1
   14ed8:	18d7e804 	addi	r3,r3,24480
   14edc:	10c5883a 	add	r2,r2,r3
   14ee0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14ee4:	e0fff917 	ldw	r3,-28(fp)
   14ee8:	00900034 	movhi	r2,16384
   14eec:	10bfffc4 	addi	r2,r2,-1
   14ef0:	1886703a 	and	r3,r3,r2
   14ef4:	e0bffb17 	ldw	r2,-20(fp)
   14ef8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14efc:	e0bffc17 	ldw	r2,-16(fp)
   14f00:	1000051e 	bne	r2,zero,14f18 <open+0xdc>
   14f04:	e13ffb17 	ldw	r4,-20(fp)
   14f08:	0014d600 	call	14d60 <alt_file_locked>
   14f0c:	e0bffd15 	stw	r2,-12(fp)
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	10001016 	blt	r2,zero,14f58 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14f18:	e0bfff17 	ldw	r2,-4(fp)
   14f1c:	10800317 	ldw	r2,12(r2)
   14f20:	10000826 	beq	r2,zero,14f44 <open+0x108>
   14f24:	e0bfff17 	ldw	r2,-4(fp)
   14f28:	10800317 	ldw	r2,12(r2)
   14f2c:	e1fff817 	ldw	r7,-32(fp)
   14f30:	e1bff917 	ldw	r6,-28(fp)
   14f34:	e17ffa17 	ldw	r5,-24(fp)
   14f38:	e13ffb17 	ldw	r4,-20(fp)
   14f3c:	103ee83a 	callr	r2
   14f40:	00000106 	br	14f48 <open+0x10c>
   14f44:	0005883a 	mov	r2,zero
   14f48:	e0bffd15 	stw	r2,-12(fp)
   14f4c:	00000206 	br	14f58 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14f50:	00bffb44 	movi	r2,-19
   14f54:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14f58:	e0bffd17 	ldw	r2,-12(fp)
   14f5c:	1000090e 	bge	r2,zero,14f84 <open+0x148>
  {
    alt_release_fd (index);  
   14f60:	e13ffe17 	ldw	r4,-8(fp)
   14f64:	001384c0 	call	1384c <alt_release_fd>
    ALT_ERRNO = -status;
   14f68:	0014d240 	call	14d24 <alt_get_errno>
   14f6c:	1007883a 	mov	r3,r2
   14f70:	e0bffd17 	ldw	r2,-12(fp)
   14f74:	0085c83a 	sub	r2,zero,r2
   14f78:	18800015 	stw	r2,0(r3)
    return -1;
   14f7c:	00bfffc4 	movi	r2,-1
   14f80:	00000106 	br	14f88 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   14f84:	e0bffe17 	ldw	r2,-8(fp)
}
   14f88:	e037883a 	mov	sp,fp
   14f8c:	dfc00117 	ldw	ra,4(sp)
   14f90:	df000017 	ldw	fp,0(sp)
   14f94:	dec00204 	addi	sp,sp,8
   14f98:	f800283a 	ret

00014f9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14f9c:	defffa04 	addi	sp,sp,-24
   14fa0:	df000515 	stw	fp,20(sp)
   14fa4:	df000504 	addi	fp,sp,20
   14fa8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   14fac:	0005303a 	rdctl	r2,status
   14fb0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fb4:	e0fffc17 	ldw	r3,-16(fp)
   14fb8:	00bfff84 	movi	r2,-2
   14fbc:	1884703a 	and	r2,r3,r2
   14fc0:	1001703a 	wrctl	status,r2
  return context;
   14fc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14fc8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   14fcc:	e0bffb17 	ldw	r2,-20(fp)
   14fd0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14fd4:	e0bffd17 	ldw	r2,-12(fp)
   14fd8:	10800017 	ldw	r2,0(r2)
   14fdc:	e0fffd17 	ldw	r3,-12(fp)
   14fe0:	18c00117 	ldw	r3,4(r3)
   14fe4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	10800117 	ldw	r2,4(r2)
   14ff0:	e0fffd17 	ldw	r3,-12(fp)
   14ff4:	18c00017 	ldw	r3,0(r3)
   14ff8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	e0fffd17 	ldw	r3,-12(fp)
   15004:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15008:	e0bffd17 	ldw	r2,-12(fp)
   1500c:	e0fffd17 	ldw	r3,-12(fp)
   15010:	10c00015 	stw	r3,0(r2)
} 
   15014:	0001883a 	nop
   15018:	e0bfff17 	ldw	r2,-4(fp)
   1501c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   15020:	e0bffe17 	ldw	r2,-8(fp)
   15024:	1001703a 	wrctl	status,r2
}
   15028:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   1502c:	0001883a 	nop
   15030:	e037883a 	mov	sp,fp
   15034:	df000017 	ldw	fp,0(sp)
   15038:	dec00104 	addi	sp,sp,4
   1503c:	f800283a 	ret

00015040 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15040:	defff904 	addi	sp,sp,-28
   15044:	dfc00615 	stw	ra,24(sp)
   15048:	df000515 	stw	fp,20(sp)
   1504c:	dc400415 	stw	r17,16(sp)
   15050:	dc000315 	stw	r16,12(sp)
   15054:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15058:	d0a00c17 	ldw	r2,-32720(gp)
   1505c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15060:	d126b217 	ldw	r4,-25912(gp)
   15064:	d166b317 	ldw	r5,-25908(gp)
   15068:	01800044 	movi	r6,1
   1506c:	000f883a 	mov	r7,zero
   15070:	2185883a 	add	r2,r4,r6
   15074:	1111803a 	cmpltu	r8,r2,r4
   15078:	29c7883a 	add	r3,r5,r7
   1507c:	40c9883a 	add	r4,r8,r3
   15080:	2007883a 	mov	r3,r4
   15084:	1009883a 	mov	r4,r2
   15088:	180b883a 	mov	r5,r3
   1508c:	d126b215 	stw	r4,-25912(gp)
   15090:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15094:	00002906 	br	1513c <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   15098:	e0bffd17 	ldw	r2,-12(fp)
   1509c:	10800017 	ldw	r2,0(r2)
   150a0:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   150a4:	e13ffd17 	ldw	r4,-12(fp)
   150a8:	20800217 	ldw	r2,8(r4)
   150ac:	20c00317 	ldw	r3,12(r4)
   150b0:	d126b217 	ldw	r4,-25912(gp)
   150b4:	d166b317 	ldw	r5,-25908(gp)
   150b8:	28c01e36 	bltu	r5,r3,15134 <alt_tick+0xf4>
   150bc:	1940011e 	bne	r3,r5,150c4 <alt_tick+0x84>
   150c0:	20801c36 	bltu	r4,r2,15134 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   150c4:	e0bffd17 	ldw	r2,-12(fp)
   150c8:	10800417 	ldw	r2,16(r2)
   150cc:	e0fffd17 	ldw	r3,-12(fp)
   150d0:	18c00517 	ldw	r3,20(r3)
   150d4:	1809883a 	mov	r4,r3
   150d8:	103ee83a 	callr	r2
   150dc:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   150e0:	e0bffb17 	ldw	r2,-20(fp)
   150e4:	1000031e 	bne	r2,zero,150f4 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   150e8:	e13ffd17 	ldw	r4,-12(fp)
   150ec:	0014f9c0 	call	14f9c <alt_alarm_stop>
   150f0:	00001006 	br	15134 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   150f4:	e0bffd17 	ldw	r2,-12(fp)
   150f8:	11000217 	ldw	r4,8(r2)
   150fc:	11400317 	ldw	r5,12(r2)
   15100:	e0bffb17 	ldw	r2,-20(fp)
   15104:	1021883a 	mov	r16,r2
   15108:	0023883a 	mov	r17,zero
   1510c:	2405883a 	add	r2,r4,r16
   15110:	110d803a 	cmpltu	r6,r2,r4
   15114:	2c47883a 	add	r3,r5,r17
   15118:	30c9883a 	add	r4,r6,r3
   1511c:	2007883a 	mov	r3,r4
   15120:	1009883a 	mov	r4,r2
   15124:	180b883a 	mov	r5,r3
   15128:	e0bffd17 	ldw	r2,-12(fp)
   1512c:	11000215 	stw	r4,8(r2)
   15130:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   15134:	e0bffc17 	ldw	r2,-16(fp)
   15138:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   1513c:	e0fffd17 	ldw	r3,-12(fp)
   15140:	d0a00c04 	addi	r2,gp,-32720
   15144:	18bfd41e 	bne	r3,r2,15098 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15148:	0001883a 	nop
}
   1514c:	0001883a 	nop
   15150:	e6fffe04 	addi	sp,fp,-8
   15154:	dfc00317 	ldw	ra,12(sp)
   15158:	df000217 	ldw	fp,8(sp)
   1515c:	dc400117 	ldw	r17,4(sp)
   15160:	dc000017 	ldw	r16,0(sp)
   15164:	dec00404 	addi	sp,sp,16
   15168:	f800283a 	ret

0001516c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1516c:	deffff04 	addi	sp,sp,-4
   15170:	df000015 	stw	fp,0(sp)
   15174:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15178:	000170fa 	wrctl	ienable,zero
}
   1517c:	0001883a 	nop
   15180:	e037883a 	mov	sp,fp
   15184:	df000017 	ldw	fp,0(sp)
   15188:	dec00104 	addi	sp,sp,4
   1518c:	f800283a 	ret

00015190 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15190:	defffa04 	addi	sp,sp,-24
   15194:	dfc00515 	stw	ra,20(sp)
   15198:	df000415 	stw	fp,16(sp)
   1519c:	df000404 	addi	fp,sp,16
   151a0:	e13ffd15 	stw	r4,-12(fp)
   151a4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   151a8:	e0bffc17 	ldw	r2,-16(fp)
   151ac:	10800017 	ldw	r2,0(r2)
   151b0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   151b4:	e13ffd17 	ldw	r4,-12(fp)
   151b8:	00103b40 	call	103b4 <strlen>
   151bc:	10800044 	addi	r2,r2,1
   151c0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   151c4:	00000d06 	br	151fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   151c8:	e0bfff17 	ldw	r2,-4(fp)
   151cc:	10800217 	ldw	r2,8(r2)
   151d0:	e0fffe17 	ldw	r3,-8(fp)
   151d4:	180d883a 	mov	r6,r3
   151d8:	e17ffd17 	ldw	r5,-12(fp)
   151dc:	1009883a 	mov	r4,r2
   151e0:	001549c0 	call	1549c <memcmp>
   151e4:	1000021e 	bne	r2,zero,151f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   151e8:	e0bfff17 	ldw	r2,-4(fp)
   151ec:	00000706 	br	1520c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   151f0:	e0bfff17 	ldw	r2,-4(fp)
   151f4:	10800017 	ldw	r2,0(r2)
   151f8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   151fc:	e0ffff17 	ldw	r3,-4(fp)
   15200:	e0bffc17 	ldw	r2,-16(fp)
   15204:	18bff01e 	bne	r3,r2,151c8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   15208:	0005883a 	mov	r2,zero
}
   1520c:	e037883a 	mov	sp,fp
   15210:	dfc00117 	ldw	ra,4(sp)
   15214:	df000017 	ldw	fp,0(sp)
   15218:	dec00204 	addi	sp,sp,8
   1521c:	f800283a 	ret

00015220 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15220:	defffb04 	addi	sp,sp,-20
   15224:	dfc00415 	stw	ra,16(sp)
   15228:	df000315 	stw	fp,12(sp)
   1522c:	df000304 	addi	fp,sp,12
   15230:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15234:	d0a00417 	ldw	r2,-32752(gp)
   15238:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1523c:	00003106 	br	15304 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15240:	e0bfff17 	ldw	r2,-4(fp)
   15244:	10800217 	ldw	r2,8(r2)
   15248:	1009883a 	mov	r4,r2
   1524c:	00103b40 	call	103b4 <strlen>
   15250:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15254:	e0bfff17 	ldw	r2,-4(fp)
   15258:	10c00217 	ldw	r3,8(r2)
   1525c:	e0bffe17 	ldw	r2,-8(fp)
   15260:	10bfffc4 	addi	r2,r2,-1
   15264:	1885883a 	add	r2,r3,r2
   15268:	10800003 	ldbu	r2,0(r2)
   1526c:	10803fcc 	andi	r2,r2,255
   15270:	1080201c 	xori	r2,r2,128
   15274:	10bfe004 	addi	r2,r2,-128
   15278:	10800bd8 	cmpnei	r2,r2,47
   1527c:	1000031e 	bne	r2,zero,1528c <alt_find_file+0x6c>
    {
      len -= 1;
   15280:	e0bffe17 	ldw	r2,-8(fp)
   15284:	10bfffc4 	addi	r2,r2,-1
   15288:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1528c:	e0bffe17 	ldw	r2,-8(fp)
   15290:	e0fffd17 	ldw	r3,-12(fp)
   15294:	1885883a 	add	r2,r3,r2
   15298:	10800003 	ldbu	r2,0(r2)
   1529c:	10803fcc 	andi	r2,r2,255
   152a0:	1080201c 	xori	r2,r2,128
   152a4:	10bfe004 	addi	r2,r2,-128
   152a8:	10800be0 	cmpeqi	r2,r2,47
   152ac:	1000081e 	bne	r2,zero,152d0 <alt_find_file+0xb0>
   152b0:	e0bffe17 	ldw	r2,-8(fp)
   152b4:	e0fffd17 	ldw	r3,-12(fp)
   152b8:	1885883a 	add	r2,r3,r2
   152bc:	10800003 	ldbu	r2,0(r2)
   152c0:	10803fcc 	andi	r2,r2,255
   152c4:	1080201c 	xori	r2,r2,128
   152c8:	10bfe004 	addi	r2,r2,-128
   152cc:	10000a1e 	bne	r2,zero,152f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   152d0:	e0bfff17 	ldw	r2,-4(fp)
   152d4:	10800217 	ldw	r2,8(r2)
   152d8:	e0fffe17 	ldw	r3,-8(fp)
   152dc:	180d883a 	mov	r6,r3
   152e0:	e17ffd17 	ldw	r5,-12(fp)
   152e4:	1009883a 	mov	r4,r2
   152e8:	001549c0 	call	1549c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   152ec:	1000021e 	bne	r2,zero,152f8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   152f0:	e0bfff17 	ldw	r2,-4(fp)
   152f4:	00000706 	br	15314 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   152f8:	e0bfff17 	ldw	r2,-4(fp)
   152fc:	10800017 	ldw	r2,0(r2)
   15300:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   15304:	e0ffff17 	ldw	r3,-4(fp)
   15308:	d0a00404 	addi	r2,gp,-32752
   1530c:	18bfcc1e 	bne	r3,r2,15240 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   15310:	0005883a 	mov	r2,zero
}
   15314:	e037883a 	mov	sp,fp
   15318:	dfc00117 	ldw	ra,4(sp)
   1531c:	df000017 	ldw	fp,0(sp)
   15320:	dec00204 	addi	sp,sp,8
   15324:	f800283a 	ret

00015328 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15328:	defffc04 	addi	sp,sp,-16
   1532c:	df000315 	stw	fp,12(sp)
   15330:	df000304 	addi	fp,sp,12
   15334:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   15338:	00bffa04 	movi	r2,-24
   1533c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15340:	e03fff15 	stw	zero,-4(fp)
   15344:	00001d06 	br	153bc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   15348:	e0ffff17 	ldw	r3,-4(fp)
   1534c:	1805883a 	mov	r2,r3
   15350:	1085883a 	add	r2,r2,r2
   15354:	10c5883a 	add	r2,r2,r3
   15358:	100490ba 	slli	r2,r2,2
   1535c:	00c00074 	movhi	r3,1
   15360:	10c7883a 	add	r3,r2,r3
   15364:	1897e817 	ldw	r2,24480(r3)
   15368:	1000111e 	bne	r2,zero,153b0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   1536c:	e0ffff17 	ldw	r3,-4(fp)
   15370:	1805883a 	mov	r2,r3
   15374:	1085883a 	add	r2,r2,r2
   15378:	10c5883a 	add	r2,r2,r3
   1537c:	100490ba 	slli	r2,r2,2
   15380:	e13ffd17 	ldw	r4,-12(fp)
   15384:	00c00074 	movhi	r3,1
   15388:	10c7883a 	add	r3,r2,r3
   1538c:	1917e815 	stw	r4,24480(r3)
      if (i > alt_max_fd)
   15390:	d0e00817 	ldw	r3,-32736(gp)
   15394:	e0bfff17 	ldw	r2,-4(fp)
   15398:	1880020e 	bge	r3,r2,153a4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   1539c:	e0bfff17 	ldw	r2,-4(fp)
   153a0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   153a4:	e0bfff17 	ldw	r2,-4(fp)
   153a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   153ac:	00000706 	br	153cc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   153b0:	e0bfff17 	ldw	r2,-4(fp)
   153b4:	10800044 	addi	r2,r2,1
   153b8:	e0bfff15 	stw	r2,-4(fp)
   153bc:	e0bfff17 	ldw	r2,-4(fp)
   153c0:	10800810 	cmplti	r2,r2,32
   153c4:	103fe01e 	bne	r2,zero,15348 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   153c8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   153cc:	e0bffe17 	ldw	r2,-8(fp)
}
   153d0:	e037883a 	mov	sp,fp
   153d4:	df000017 	ldw	fp,0(sp)
   153d8:	dec00104 	addi	sp,sp,4
   153dc:	f800283a 	ret

000153e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   153e0:	defffe04 	addi	sp,sp,-8
   153e4:	df000115 	stw	fp,4(sp)
   153e8:	df000104 	addi	fp,sp,4
   153ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   153f0:	e0bfff17 	ldw	r2,-4(fp)
   153f4:	10bffe84 	addi	r2,r2,-6
   153f8:	10c00428 	cmpgeui	r3,r2,16
   153fc:	18c03fcc 	andi	r3,r3,255
   15400:	18000f1e 	bne	r3,zero,15440 <alt_exception_cause_generated_bad_addr+0x60>
   15404:	00c00044 	movi	r3,1
   15408:	1884983a 	sll	r2,r3,r2
   1540c:	10e2c8cc 	andi	r3,r2,35619
   15410:	1806c03a 	cmpne	r3,r3,zero
   15414:	18c03fcc 	andi	r3,r3,255
   15418:	1800051e 	bne	r3,zero,15430 <alt_exception_cause_generated_bad_addr+0x50>
   1541c:	1084100c 	andi	r2,r2,4160
   15420:	1004c03a 	cmpne	r2,r2,zero
   15424:	10803fcc 	andi	r2,r2,255
   15428:	1000031e 	bne	r2,zero,15438 <alt_exception_cause_generated_bad_addr+0x58>
   1542c:	00000406 	br	15440 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15430:	00800044 	movi	r2,1
   15434:	00000306 	br	15444 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15438:	0005883a 	mov	r2,zero
   1543c:	00000106 	br	15444 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   15440:	0005883a 	mov	r2,zero
  }
}
   15444:	e037883a 	mov	sp,fp
   15448:	df000017 	ldw	fp,0(sp)
   1544c:	dec00104 	addi	sp,sp,4
   15450:	f800283a 	ret

00015454 <atexit>:
   15454:	200b883a 	mov	r5,r4
   15458:	000f883a 	mov	r7,zero
   1545c:	000d883a 	mov	r6,zero
   15460:	0009883a 	mov	r4,zero
   15464:	00155141 	jmpi	15514 <__register_exitproc>

00015468 <exit>:
   15468:	defffe04 	addi	sp,sp,-8
   1546c:	000b883a 	mov	r5,zero
   15470:	dc000015 	stw	r16,0(sp)
   15474:	dfc00115 	stw	ra,4(sp)
   15478:	2021883a 	mov	r16,r4
   1547c:	00155a40 	call	155a4 <__call_exitprocs>
   15480:	00800074 	movhi	r2,1
   15484:	111c6017 	ldw	r4,29056(r2)
   15488:	20800f17 	ldw	r2,60(r4)
   1548c:	10000126 	beq	r2,zero,15494 <exit+0x2c>
   15490:	103ee83a 	callr	r2
   15494:	8009883a 	mov	r4,r16
   15498:	00156c40 	call	156c4 <_exit>

0001549c <memcmp>:
   1549c:	30800128 	cmpgeui	r2,r6,4
   154a0:	10000d26 	beq	r2,zero,154d8 <memcmp+0x3c>
   154a4:	2144b03a 	or	r2,r4,r5
   154a8:	108000cc 	andi	r2,r2,3
   154ac:	10000726 	beq	r2,zero,154cc <memcmp+0x30>
   154b0:	30bfffc4 	addi	r2,r6,-1
   154b4:	00000a06 	br	154e0 <memcmp+0x44>
   154b8:	31bfff04 	addi	r6,r6,-4
   154bc:	30800128 	cmpgeui	r2,r6,4
   154c0:	21000104 	addi	r4,r4,4
   154c4:	29400104 	addi	r5,r5,4
   154c8:	10000326 	beq	r2,zero,154d8 <memcmp+0x3c>
   154cc:	20c00017 	ldw	r3,0(r4)
   154d0:	28800017 	ldw	r2,0(r5)
   154d4:	18bff826 	beq	r3,r2,154b8 <memcmp+0x1c>
   154d8:	30bfffc4 	addi	r2,r6,-1
   154dc:	30000b26 	beq	r6,zero,1550c <memcmp+0x70>
   154e0:	11800044 	addi	r6,r2,1
   154e4:	218d883a 	add	r6,r4,r6
   154e8:	00000106 	br	154f0 <memcmp+0x54>
   154ec:	21800726 	beq	r4,r6,1550c <memcmp+0x70>
   154f0:	20800003 	ldbu	r2,0(r4)
   154f4:	28c00003 	ldbu	r3,0(r5)
   154f8:	21000044 	addi	r4,r4,1
   154fc:	29400044 	addi	r5,r5,1
   15500:	10fffa26 	beq	r2,r3,154ec <memcmp+0x50>
   15504:	10c5c83a 	sub	r2,r2,r3
   15508:	f800283a 	ret
   1550c:	0005883a 	mov	r2,zero
   15510:	f800283a 	ret

00015514 <__register_exitproc>:
   15514:	00800074 	movhi	r2,1
   15518:	10dc6017 	ldw	r3,29056(r2)
   1551c:	18805217 	ldw	r2,328(r3)
   15520:	10001726 	beq	r2,zero,15580 <__register_exitproc+0x6c>
   15524:	10c00117 	ldw	r3,4(r2)
   15528:	1a000808 	cmpgei	r8,r3,32
   1552c:	40001b1e 	bne	r8,zero,1559c <__register_exitproc+0x88>
   15530:	20000b26 	beq	r4,zero,15560 <__register_exitproc+0x4c>
   15534:	181090ba 	slli	r8,r3,2
   15538:	02400044 	movi	r9,1
   1553c:	48d2983a 	sll	r9,r9,r3
   15540:	1211883a 	add	r8,r2,r8
   15544:	41802215 	stw	r6,136(r8)
   15548:	11806217 	ldw	r6,392(r2)
   1554c:	21000098 	cmpnei	r4,r4,2
   15550:	324cb03a 	or	r6,r6,r9
   15554:	11806215 	stw	r6,392(r2)
   15558:	41c04215 	stw	r7,264(r8)
   1555c:	20000b26 	beq	r4,zero,1558c <__register_exitproc+0x78>
   15560:	19000084 	addi	r4,r3,2
   15564:	200890ba 	slli	r4,r4,2
   15568:	18c00044 	addi	r3,r3,1
   1556c:	10c00115 	stw	r3,4(r2)
   15570:	1105883a 	add	r2,r2,r4
   15574:	11400015 	stw	r5,0(r2)
   15578:	0005883a 	mov	r2,zero
   1557c:	f800283a 	ret
   15580:	18805304 	addi	r2,r3,332
   15584:	18805215 	stw	r2,328(r3)
   15588:	003fe606 	br	15524 <__register_exitproc+0x10>
   1558c:	11006317 	ldw	r4,396(r2)
   15590:	2248b03a 	or	r4,r4,r9
   15594:	11006315 	stw	r4,396(r2)
   15598:	003ff106 	br	15560 <__register_exitproc+0x4c>
   1559c:	00bfffc4 	movi	r2,-1
   155a0:	f800283a 	ret

000155a4 <__call_exitprocs>:
   155a4:	defff704 	addi	sp,sp,-36
   155a8:	00800074 	movhi	r2,1
   155ac:	dcc00315 	stw	r19,12(sp)
   155b0:	14dc6017 	ldw	r19,29056(r2)
   155b4:	dc800215 	stw	r18,8(sp)
   155b8:	dfc00815 	stw	ra,32(sp)
   155bc:	9c805217 	ldw	r18,328(r19)
   155c0:	ddc00715 	stw	r23,28(sp)
   155c4:	dd800615 	stw	r22,24(sp)
   155c8:	dd400515 	stw	r21,20(sp)
   155cc:	dd000415 	stw	r20,16(sp)
   155d0:	dc400115 	stw	r17,4(sp)
   155d4:	dc000015 	stw	r16,0(sp)
   155d8:	90001026 	beq	r18,zero,1561c <__call_exitprocs+0x78>
   155dc:	202b883a 	mov	r21,r4
   155e0:	282d883a 	mov	r22,r5
   155e4:	05000044 	movi	r20,1
   155e8:	94000117 	ldw	r16,4(r18)
   155ec:	847fffc4 	addi	r17,r16,-1
   155f0:	88000a16 	blt	r17,zero,1561c <__call_exitprocs+0x78>
   155f4:	84000044 	addi	r16,r16,1
   155f8:	802090ba 	slli	r16,r16,2
   155fc:	9421883a 	add	r16,r18,r16
   15600:	b0001126 	beq	r22,zero,15648 <__call_exitprocs+0xa4>
   15604:	80804017 	ldw	r2,256(r16)
   15608:	15800f26 	beq	r2,r22,15648 <__call_exitprocs+0xa4>
   1560c:	8c7fffc4 	addi	r17,r17,-1
   15610:	88bfffd8 	cmpnei	r2,r17,-1
   15614:	843fff04 	addi	r16,r16,-4
   15618:	103ff91e 	bne	r2,zero,15600 <__call_exitprocs+0x5c>
   1561c:	dfc00817 	ldw	ra,32(sp)
   15620:	ddc00717 	ldw	r23,28(sp)
   15624:	dd800617 	ldw	r22,24(sp)
   15628:	dd400517 	ldw	r21,20(sp)
   1562c:	dd000417 	ldw	r20,16(sp)
   15630:	dcc00317 	ldw	r19,12(sp)
   15634:	dc800217 	ldw	r18,8(sp)
   15638:	dc400117 	ldw	r17,4(sp)
   1563c:	dc000017 	ldw	r16,0(sp)
   15640:	dec00904 	addi	sp,sp,36
   15644:	f800283a 	ret
   15648:	90800117 	ldw	r2,4(r18)
   1564c:	81800017 	ldw	r6,0(r16)
   15650:	10bfffc4 	addi	r2,r2,-1
   15654:	14401726 	beq	r2,r17,156b4 <__call_exitprocs+0x110>
   15658:	80000015 	stw	zero,0(r16)
   1565c:	303feb26 	beq	r6,zero,1560c <__call_exitprocs+0x68>
   15660:	a446983a 	sll	r3,r20,r17
   15664:	90806217 	ldw	r2,392(r18)
   15668:	95c00117 	ldw	r23,4(r18)
   1566c:	1884703a 	and	r2,r3,r2
   15670:	1000081e 	bne	r2,zero,15694 <__call_exitprocs+0xf0>
   15674:	303ee83a 	callr	r6
   15678:	90c00117 	ldw	r3,4(r18)
   1567c:	98805217 	ldw	r2,328(r19)
   15680:	1dc0011e 	bne	r3,r23,15688 <__call_exitprocs+0xe4>
   15684:	14bfe126 	beq	r2,r18,1560c <__call_exitprocs+0x68>
   15688:	103fe426 	beq	r2,zero,1561c <__call_exitprocs+0x78>
   1568c:	1025883a 	mov	r18,r2
   15690:	003fd506 	br	155e8 <__call_exitprocs+0x44>
   15694:	90806317 	ldw	r2,396(r18)
   15698:	81002017 	ldw	r4,128(r16)
   1569c:	1886703a 	and	r3,r3,r2
   156a0:	1800061e 	bne	r3,zero,156bc <__call_exitprocs+0x118>
   156a4:	200b883a 	mov	r5,r4
   156a8:	a809883a 	mov	r4,r21
   156ac:	303ee83a 	callr	r6
   156b0:	003ff106 	br	15678 <__call_exitprocs+0xd4>
   156b4:	94400115 	stw	r17,4(r18)
   156b8:	003fe806 	br	1565c <__call_exitprocs+0xb8>
   156bc:	303ee83a 	callr	r6
   156c0:	003fed06 	br	15678 <__call_exitprocs+0xd4>

000156c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   156c4:	defffd04 	addi	sp,sp,-12
   156c8:	df000215 	stw	fp,8(sp)
   156cc:	df000204 	addi	fp,sp,8
   156d0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   156d4:	0001883a 	nop
   156d8:	e0bffe17 	ldw	r2,-8(fp)
   156dc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   156e0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   156e4:	10000226 	beq	r2,zero,156f0 <_exit+0x2c>
    ALT_SIM_FAIL();
   156e8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   156ec:	00000106 	br	156f4 <_exit+0x30>
    ALT_SIM_PASS();
   156f0:	002af0b0 	cmpltui	zero,zero,43970
}
   156f4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   156f8:	0001883a 	nop
   156fc:	003ffe06 	br	156f8 <_exit+0x34>
