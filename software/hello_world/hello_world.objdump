
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005754 memsz 0x00005754 flags r-x
    LOAD off    0x00006774 vaddr 0x00015774 paddr 0x00016ee0 align 2**12
         filesz 0x0000176c memsz 0x0000176c flags rw-
    LOAD off    0x0000064c vaddr 0x0001864c paddr 0x0001864c align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005508  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0001572c  0001572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000176c  00015774  00016ee0  00006774  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  0001864c  0001864c  0000864c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00018a74  00018a74  00007ee0  2**0
                  CONTENTS
  7 .comment      0000005a  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a18  00000000  00000000  00007f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00014911  00000000  00000000  00008958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006796  00000000  00000000  0001d269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005eb6  00000000  00000000  000239ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000153c  00000000  00000000  000298b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001ac8  00000000  00000000  0002adf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002c8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0002c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000013f5  00000000  00000000  0002c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041d6  00000000  00000000  0002dd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005e0  00000000  00000000  00031f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000349d3  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000349df  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000349e1  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000349ec  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000349f7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00034a02  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  00034a0c  2**0
                  CONTENTS, READONLY
 28 .jdi          00005177  00000000  00000000  00034a3b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
0001572c l    d  .rodata	00000000 .rodata
00015774 l    d  .rwdata	00000000 .rwdata
0001864c l    d  .bss	00000000 .bss
00018a74 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
0001044c l     F .text	00000008 __fp_lock
00010454 l     F .text	0000001c stdio_exit_handler
00010470 l     F .text	00000070 cleanup_stdio
000104e0 l     F .text	00000008 __fp_unlock
000104e8 l     F .text	00000174 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013290 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000133a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013410 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000135f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000136e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000138c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016ed0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013b2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013c6c l     F .text	00000034 alt_dev_reg
00015e4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013f48 l     F .text	00000214 altera_avalon_jtag_uart_irq
0001415c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014d8c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014edc l     F .text	0000003c alt_get_errno
00014f18 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00018680 g     O .bss	00000004 alt_instruction_exception_handler
00012eec g     F .text	00000058 _isatty_r
000137fc g     F .text	0000007c alt_main
000102d4 g     F .text	000000d0 _puts_r
000187e4 g     O .bss	00000100 alt_irq
0001152c g     F .text	00000064 _lseek_r
00016ee0 g       *ABS*	00000000 __flash_rwdata_start
00018a74 g       *ABS*	00000000 __alt_heap_start
00010e00 g     F .text	0000005c __sseek
0001077c g     F .text	00000028 __sinit
0001389c g     F .text	00000024 __malloc_unlock
000111a4 g     F .text	00000128 memmove
00015324 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00018650 g     O .bss	00000004 __stdio_exit_handler
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012e8c g     F .text	00000060 _fstat_r
0001864c g     O .bss	00000004 errno
00010d78 g     F .text	00000008 __seofread
00018668 g     O .bss	00000004 alt_argv
0001eeac g       *ABS*	00000000 _gp
00015ccc g     O .rwdata	00000180 alt_fd_list
00015348 g     F .text	00000090 alt_find_dev
000110a4 g     F .text	00000100 memcpy
00014e60 g     F .text	0000007c alt_io_redirect
0001572c g       *ABS*	00000000 __DTOR_END__
000103a4 g     F .text	00000010 puts
00015598 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00014360 g     F .text	00000220 altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000131a8 g     F .text	00000064 .hidden __udivsi3
00013544 g     F .text	000000b0 isatty
0001865c g     O .bss	00000004 __malloc_top_pad
000107dc g     F .text	000004a0 __sfvwrite_r
00012f44 g     F .text	00000058 _sbrk_r
00011590 g     F .text	00000064 _read_r
00016ec8 g     O .rwdata	00000004 alt_max_fd
00012868 g     F .text	000000f0 _fclose_r
00012bcc g     F .text	0000008c fflush
00018658 g     O .bss	00000004 __malloc_max_sbrked_mem
0001371c g     F .text	000000e0 lseek
0001227c g     F .text	000005ec _realloc_r
00018a74 g       *ABS*	00000000 __bss_end
00014ca4 g     F .text	000000e8 alt_iic_isr_register
000151f8 g     F .text	0000012c alt_tick
000107ac g     F .text	00000018 __fp_lock_all
00014c58 g     F .text	0000004c alt_ic_irq_enabled
00015154 g     F .text	000000a4 alt_alarm_stop
00018670 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000c8 alt_irq_handler
00015ca4 g     O .rwdata	00000028 alt_dev_null
00011464 g     F .text	000000c8 _reclaim_reent
00014908 g     F .text	00000020 alt_dcache_flush_all
00016ee0 g       *ABS*	00000000 __ram_rwdata_end
00018684 g     O .bss	00000138 __sf
00016ec0 g     O .rwdata	00000008 alt_dev_list
00013b68 g     F .text	00000104 write
00015774 g       *ABS*	00000000 __ram_rodata_end
0001344c g     F .text	000000bc fstat
0001320c g     F .text	0000005c .hidden __umodsi3
00018a74 g       *ABS*	00000000 end
00013e88 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001572c g       *ABS*	00000000 __CTOR_LIST__
0001c000 g       *ABS*	00000000 __alt_stack_pointer
00014580 g     F .text	00000228 altera_avalon_jtag_uart_write
000107a4 g     F .text	00000004 __sfp_lock_acquire
00010fa8 g     F .text	000000fc memchr
000117ac g     F .text	00000308 _free_r
00012f9c g     F .text	00000118 __call_exitprocs
000188e4 g     O .bss	00000190 __atexit0
00016eb0 g     O .rwdata	00000004 __malloc_sbrk_base
00010224 g     F .text	0000003c _start
00018674 g     O .bss	00000004 _alt_tick_rate
00018678 g     O .bss	00000008 _alt_nticks
000138fc g     F .text	00000108 read
00013cdc g     F .text	00000048 alt_sys_init
00015698 g     F .text	00000094 __register_exitproc
00014204 g     F .text	00000068 altera_avalon_jtag_uart_close
00013268 g     F .text	00000028 .hidden __mulsi3
00015774 g       *ABS*	00000000 __ram_rwdata_start
0001572c g       *ABS*	00000000 __ram_rodata_start
000187bc g     O .bss	00000028 __malloc_current_mallinfo
00013d24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000154e0 g     F .text	000000b8 alt_get_fd
0001140c g     F .text	00000058 _close_r
00015620 g     F .text	00000078 memcmp
00013de4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018a74 g       *ABS*	00000000 __alt_stack_base
00013e34 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010e64 g     F .text	00000144 __swsetup_r
0001065c g     F .text	00000120 __sfp
0001589c g     O .rwdata	00000408 __malloc_av_
00018660 g     O .bss	00000004 __atexit
00010d24 g     F .text	00000054 __sread
000153d8 g     F .text	00000108 alt_find_file
00014964 g     F .text	000000a8 alt_dev_llist_insert
00013878 g     F .text	00000024 __malloc_lock
00013a74 g     F .text	000000b8 sbrk
00012b70 g     F .text	0000005c _fflush_r
0001864c g       *ABS*	00000000 __bss_start
000112cc g     F .text	00000140 memset
00010260 g     F .text	00000074 main
0001866c g     O .bss	00000004 alt_envp
00018654 g     O .bss	00000004 __malloc_max_total_mem
00013d84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010e5c g     F .text	00000008 __sclose
0001c000 g       *ABS*	00000000 __alt_heap_limit
00012958 g     F .text	00000010 fclose
00011ab4 g     F .text	000007c8 _malloc_r
00016ecc g     O .rwdata	00000004 alt_errno
000130b4 g     F .text	00000080 .hidden __divsi3
00011688 g     F .text	00000124 _malloc_trim_r
0001572c g       *ABS*	00000000 __CTOR_END__
0001572c g       *ABS*	00000000 __flash_rodata_start
0001572c g       *ABS*	00000000 __DTOR_LIST__
00013ca0 g     F .text	0000003c alt_irq_init
00013a04 g     F .text	00000070 alt_release_fd
0001560c g     F .text	00000014 atexit
000115f4 g     F .text	00000064 _write_r
00016eac g     O .rwdata	00000004 _impure_ptr
00018664 g     O .bss	00000004 alt_argc
00012968 g     F .text	00000208 __sflush_r
00014a70 g     F .text	00000064 _do_dtors
00010c7c g     F .text	000000a8 _fwalk_sglue
00010020 g       .exceptions	00000000 alt_irq_entry
000107c4 g     F .text	00000018 __fp_unlock_all
00016eb8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012e00 g     F .text	0000008c __swhatbuf_r
00014af4 g     F .text	00000050 alt_ic_isr_register
00015890 g     O .rwdata	0000000c __sglue
00016ee0 g       *ABS*	00000000 _edata
00018a74 g       *ABS*	00000000 _end
00010224 g       *ABS*	00000000 __ram_exceptions_end
0001426c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014bcc g     F .text	0000008c alt_ic_irq_disable
00010d80 g     F .text	00000080 __swrite
00016eb4 g     O .rwdata	00000004 __malloc_trim_threshold
00011658 g     F .text	00000030 exit
00013134 g     F .text	00000074 .hidden __modsi3
00015774 g     O .rwdata	0000011c _impure_data
0001c000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000107a8 g     F .text	00000004 __sfp_lock_release
000133d4 g     F .text	0000003c _exit
000147a8 g     F .text	00000160 alt_alarm_start
00012c58 g     F .text	000001a8 __smakebuf_r
000103b4 g     F .text	00000098 strlen
00014ff4 g     F .text	00000160 open
00014ad4 g     F .text	00000020 alt_icache_flush_all
00016ed4 g     O .rwdata	00000004 alt_priority_mask
00014b44 g     F .text	00000088 alt_ic_irq_enable
00016ed8 g     O .rwdata	00000008 alt_alarm_list
00014a0c g     F .text	00000064 _do_ctors
000132cc g     F .text	000000dc close
0001365c g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e1f917 	ldw	r3,-30748(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a1fa17 	ldw	r2,-30744(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a5f517 	ldw	r2,-26668(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a5f517 	ldw	r2,-26668(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bbab14 	ori	gp,gp,61100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	10a19314 	ori	r2,r2,34380

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18e29d14 	ori	r3,r3,35444

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	001365c0 	call	1365c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00137fc0 	call	137fc <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <main>:
   10260:	defffc04 	addi	sp,sp,-16
   10264:	dfc00315 	stw	ra,12(sp)
   10268:	df000215 	stw	fp,8(sp)
   1026c:	df000204 	addi	fp,sp,8
   10270:	e03fff15 	stw	zero,-4(fp)
   10274:	01000074 	movhi	r4,1
   10278:	2115cb04 	addi	r4,r4,22316
   1027c:	00103a40 	call	103a4 <puts>
   10280:	e0bfff17 	ldw	r2,-4(fp)
   10284:	10c03fcc 	andi	r3,r2,255
   10288:	008000b4 	movhi	r2,2
   1028c:	10c40435 	stwio	r3,4112(r2)
   10290:	e03ffe15 	stw	zero,-8(fp)
   10294:	00000306 	br	102a4 <main+0x44>
   10298:	e0bffe17 	ldw	r2,-8(fp)
   1029c:	10800044 	addi	r2,r2,1
   102a0:	e0bffe15 	stw	r2,-8(fp)
   102a4:	e0fffe17 	ldw	r3,-8(fp)
   102a8:	008007f4 	movhi	r2,31
   102ac:	10a11fc4 	addi	r2,r2,-31617
   102b0:	10fff90e 	bge	r2,r3,10298 <main+0x38>
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800044 	addi	r2,r2,1
   102bc:	e0bfff15 	stw	r2,-4(fp)
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	10804010 	cmplti	r2,r2,256
   102c8:	103fed1e 	bne	r2,zero,10280 <main+0x20>
   102cc:	e03fff15 	stw	zero,-4(fp)
   102d0:	003feb06 	br	10280 <main+0x20>

000102d4 <_puts_r>:
   102d4:	defff504 	addi	sp,sp,-44
   102d8:	dc000815 	stw	r16,32(sp)
   102dc:	2021883a 	mov	r16,r4
   102e0:	2809883a 	mov	r4,r5
   102e4:	dc400915 	stw	r17,36(sp)
   102e8:	dfc00a15 	stw	ra,40(sp)
   102ec:	2823883a 	mov	r17,r5
   102f0:	00103b40 	call	103b4 <strlen>
   102f4:	11000044 	addi	r4,r2,1
   102f8:	d8800515 	stw	r2,20(sp)
   102fc:	00800044 	movi	r2,1
   10300:	00c00074 	movhi	r3,1
   10304:	d8800715 	stw	r2,28(sp)
   10308:	d8800404 	addi	r2,sp,16
   1030c:	18d5cf04 	addi	r3,r3,22332
   10310:	d8800115 	stw	r2,4(sp)
   10314:	00800084 	movi	r2,2
   10318:	dc400415 	stw	r17,16(sp)
   1031c:	d8c00615 	stw	r3,24(sp)
   10320:	d9000315 	stw	r4,12(sp)
   10324:	d8800215 	stw	r2,8(sp)
   10328:	81400217 	ldw	r5,8(r16)
   1032c:	80000226 	beq	r16,zero,10338 <_puts_r+0x64>
   10330:	80800d17 	ldw	r2,52(r16)
   10334:	10001426 	beq	r2,zero,10388 <_puts_r+0xb4>
   10338:	2880030b 	ldhu	r2,12(r5)
   1033c:	10c8000c 	andi	r3,r2,8192
   10340:	1800061e 	bne	r3,zero,1035c <_puts_r+0x88>
   10344:	28c01917 	ldw	r3,100(r5)
   10348:	0137ffc4 	movi	r4,-8193
   1034c:	10880014 	ori	r2,r2,8192
   10350:	1906703a 	and	r3,r3,r4
   10354:	2880030d 	sth	r2,12(r5)
   10358:	28c01915 	stw	r3,100(r5)
   1035c:	d9800104 	addi	r6,sp,4
   10360:	8009883a 	mov	r4,r16
   10364:	00107dc0 	call	107dc <__sfvwrite_r>
   10368:	1007883a 	mov	r3,r2
   1036c:	00800284 	movi	r2,10
   10370:	18000a1e 	bne	r3,zero,1039c <_puts_r+0xc8>
   10374:	dfc00a17 	ldw	ra,40(sp)
   10378:	dc400917 	ldw	r17,36(sp)
   1037c:	dc000817 	ldw	r16,32(sp)
   10380:	dec00b04 	addi	sp,sp,44
   10384:	f800283a 	ret
   10388:	8009883a 	mov	r4,r16
   1038c:	d9400015 	stw	r5,0(sp)
   10390:	001077c0 	call	1077c <__sinit>
   10394:	d9400017 	ldw	r5,0(sp)
   10398:	003fe706 	br	10338 <_puts_r+0x64>
   1039c:	00bfffc4 	movi	r2,-1
   103a0:	003ff406 	br	10374 <_puts_r+0xa0>

000103a4 <puts>:
   103a4:	00800074 	movhi	r2,1
   103a8:	200b883a 	mov	r5,r4
   103ac:	111bab17 	ldw	r4,28332(r2)
   103b0:	00102d41 	jmpi	102d4 <_puts_r>

000103b4 <strlen>:
   103b4:	208000cc 	andi	r2,r4,3
   103b8:	10000926 	beq	r2,zero,103e0 <strlen+0x2c>
   103bc:	2005883a 	mov	r2,r4
   103c0:	00000306 	br	103d0 <strlen+0x1c>
   103c4:	10800044 	addi	r2,r2,1
   103c8:	10c000cc 	andi	r3,r2,3
   103cc:	18000526 	beq	r3,zero,103e4 <strlen+0x30>
   103d0:	10c00007 	ldb	r3,0(r2)
   103d4:	183ffb1e 	bne	r3,zero,103c4 <strlen+0x10>
   103d8:	1105c83a 	sub	r2,r2,r4
   103dc:	f800283a 	ret
   103e0:	2005883a 	mov	r2,r4
   103e4:	11400017 	ldw	r5,0(r2)
   103e8:	01ffbff4 	movhi	r7,65279
   103ec:	39ffbfc4 	addi	r7,r7,-257
   103f0:	29c7883a 	add	r3,r5,r7
   103f4:	01a02074 	movhi	r6,32897
   103f8:	014a303a 	nor	r5,zero,r5
   103fc:	1946703a 	and	r3,r3,r5
   10400:	31a02004 	addi	r6,r6,-32640
   10404:	1986703a 	and	r3,r3,r6
   10408:	1800071e 	bne	r3,zero,10428 <strlen+0x74>
   1040c:	11400117 	ldw	r5,4(r2)
   10410:	10800104 	addi	r2,r2,4
   10414:	29c7883a 	add	r3,r5,r7
   10418:	014a303a 	nor	r5,zero,r5
   1041c:	1946703a 	and	r3,r3,r5
   10420:	1986703a 	and	r3,r3,r6
   10424:	183ff926 	beq	r3,zero,1040c <strlen+0x58>
   10428:	10c00007 	ldb	r3,0(r2)
   1042c:	183fea26 	beq	r3,zero,103d8 <strlen+0x24>
   10430:	10c00047 	ldb	r3,1(r2)
   10434:	10800044 	addi	r2,r2,1
   10438:	183fe726 	beq	r3,zero,103d8 <strlen+0x24>
   1043c:	10c00047 	ldb	r3,1(r2)
   10440:	10800044 	addi	r2,r2,1
   10444:	183ffa1e 	bne	r3,zero,10430 <strlen+0x7c>
   10448:	003fe306 	br	103d8 <strlen+0x24>

0001044c <__fp_lock>:
   1044c:	0005883a 	mov	r2,zero
   10450:	f800283a 	ret

00010454 <stdio_exit_handler>:
   10454:	01800074 	movhi	r6,1
   10458:	01400074 	movhi	r5,1
   1045c:	01000074 	movhi	r4,1
   10460:	31962404 	addi	r6,r6,22672
   10464:	294a1a04 	addi	r5,r5,10344
   10468:	2115dd04 	addi	r4,r4,22388
   1046c:	0010c7c1 	jmpi	10c7c <_fwalk_sglue>

00010470 <cleanup_stdio>:
   10470:	21400117 	ldw	r5,4(r4)
   10474:	defffe04 	addi	sp,sp,-8
   10478:	008000b4 	movhi	r2,2
   1047c:	dc000015 	stw	r16,0(sp)
   10480:	dfc00115 	stw	ra,4(sp)
   10484:	10a1a104 	addi	r2,r2,-31100
   10488:	2021883a 	mov	r16,r4
   1048c:	28800126 	beq	r5,r2,10494 <cleanup_stdio+0x24>
   10490:	00128680 	call	12868 <_fclose_r>
   10494:	81400217 	ldw	r5,8(r16)
   10498:	008000b4 	movhi	r2,2
   1049c:	10a1bb04 	addi	r2,r2,-30996
   104a0:	28800226 	beq	r5,r2,104ac <cleanup_stdio+0x3c>
   104a4:	8009883a 	mov	r4,r16
   104a8:	00128680 	call	12868 <_fclose_r>
   104ac:	81400317 	ldw	r5,12(r16)
   104b0:	008000b4 	movhi	r2,2
   104b4:	10a1d504 	addi	r2,r2,-30892
   104b8:	28800526 	beq	r5,r2,104d0 <cleanup_stdio+0x60>
   104bc:	8009883a 	mov	r4,r16
   104c0:	dfc00117 	ldw	ra,4(sp)
   104c4:	dc000017 	ldw	r16,0(sp)
   104c8:	dec00204 	addi	sp,sp,8
   104cc:	00128681 	jmpi	12868 <_fclose_r>
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	dc000017 	ldw	r16,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <__fp_unlock>:
   104e0:	0005883a 	mov	r2,zero
   104e4:	f800283a 	ret

000104e8 <global_stdio_init.part.0>:
   104e8:	00800074 	movhi	r2,1
   104ec:	defffa04 	addi	sp,sp,-24
   104f0:	00c000b4 	movhi	r3,2
   104f4:	10811504 	addi	r2,r2,1108
   104f8:	dc000015 	stw	r16,0(sp)
   104fc:	18a19415 	stw	r2,-31152(r3)
   10500:	040000b4 	movhi	r16,2
   10504:	008000b4 	movhi	r2,2
   10508:	010000b4 	movhi	r4,2
   1050c:	8421a104 	addi	r16,r16,-31100
   10510:	dfc00515 	stw	ra,20(sp)
   10514:	dd000415 	stw	r20,16(sp)
   10518:	dcc00315 	stw	r19,12(sp)
   1051c:	dc800215 	stw	r18,8(sp)
   10520:	dc400115 	stw	r17,4(sp)
   10524:	01800204 	movi	r6,8
   10528:	000b883a 	mov	r5,zero
   1052c:	2121b804 	addi	r4,r4,-31008
   10530:	1021a115 	stw	zero,-31100(r2)
   10534:	00800104 	movi	r2,4
   10538:	80000115 	stw	zero,4(r16)
   1053c:	80000215 	stw	zero,8(r16)
   10540:	80001915 	stw	zero,100(r16)
   10544:	80800315 	stw	r2,12(r16)
   10548:	80000415 	stw	zero,16(r16)
   1054c:	80000515 	stw	zero,20(r16)
   10550:	80000615 	stw	zero,24(r16)
   10554:	00112cc0 	call	112cc <memset>
   10558:	05000074 	movhi	r20,1
   1055c:	04c00074 	movhi	r19,1
   10560:	04800074 	movhi	r18,1
   10564:	04400074 	movhi	r17,1
   10568:	00800074 	movhi	r2,1
   1056c:	010000b4 	movhi	r4,2
   10570:	a5034904 	addi	r20,r20,3364
   10574:	9cc36004 	addi	r19,r19,3456
   10578:	94838004 	addi	r18,r18,3584
   1057c:	8c439704 	addi	r17,r17,3676
   10580:	10800284 	addi	r2,r2,10
   10584:	01800204 	movi	r6,8
   10588:	000b883a 	mov	r5,zero
   1058c:	2121d204 	addi	r4,r4,-30904
   10590:	84000715 	stw	r16,28(r16)
   10594:	85000815 	stw	r20,32(r16)
   10598:	84c00915 	stw	r19,36(r16)
   1059c:	84800a15 	stw	r18,40(r16)
   105a0:	84400b15 	stw	r17,44(r16)
   105a4:	80001a15 	stw	zero,104(r16)
   105a8:	80001b15 	stw	zero,108(r16)
   105ac:	80001c15 	stw	zero,112(r16)
   105b0:	80003315 	stw	zero,204(r16)
   105b4:	80801d15 	stw	r2,116(r16)
   105b8:	80001e15 	stw	zero,120(r16)
   105bc:	80001f15 	stw	zero,124(r16)
   105c0:	80002015 	stw	zero,128(r16)
   105c4:	00112cc0 	call	112cc <memset>
   105c8:	010000b4 	movhi	r4,2
   105cc:	00c000b4 	movhi	r3,2
   105d0:	008000b4 	movhi	r2,2
   105d4:	18e1bb04 	addi	r3,r3,-30996
   105d8:	10800484 	addi	r2,r2,18
   105dc:	01800204 	movi	r6,8
   105e0:	000b883a 	mov	r5,zero
   105e4:	2121ec04 	addi	r4,r4,-30800
   105e8:	80c02115 	stw	r3,132(r16)
   105ec:	85002215 	stw	r20,136(r16)
   105f0:	84c02315 	stw	r19,140(r16)
   105f4:	84802415 	stw	r18,144(r16)
   105f8:	84402515 	stw	r17,148(r16)
   105fc:	80003415 	stw	zero,208(r16)
   10600:	80003515 	stw	zero,212(r16)
   10604:	80003615 	stw	zero,216(r16)
   10608:	80004d15 	stw	zero,308(r16)
   1060c:	80803715 	stw	r2,220(r16)
   10610:	80003815 	stw	zero,224(r16)
   10614:	80003915 	stw	zero,228(r16)
   10618:	80003a15 	stw	zero,232(r16)
   1061c:	00112cc0 	call	112cc <memset>
   10620:	008000b4 	movhi	r2,2
   10624:	10a1d504 	addi	r2,r2,-30892
   10628:	80803b15 	stw	r2,236(r16)
   1062c:	85003c15 	stw	r20,240(r16)
   10630:	84c03d15 	stw	r19,244(r16)
   10634:	84803e15 	stw	r18,248(r16)
   10638:	84403f15 	stw	r17,252(r16)
   1063c:	dfc00517 	ldw	ra,20(sp)
   10640:	dd000417 	ldw	r20,16(sp)
   10644:	dcc00317 	ldw	r19,12(sp)
   10648:	dc800217 	ldw	r18,8(sp)
   1064c:	dc400117 	ldw	r17,4(sp)
   10650:	dc000017 	ldw	r16,0(sp)
   10654:	dec00604 	addi	sp,sp,24
   10658:	f800283a 	ret

0001065c <__sfp>:
   1065c:	008000b4 	movhi	r2,2
   10660:	10a19417 	ldw	r2,-31152(r2)
   10664:	defffc04 	addi	sp,sp,-16
   10668:	dc800215 	stw	r18,8(sp)
   1066c:	dfc00315 	stw	ra,12(sp)
   10670:	dc400115 	stw	r17,4(sp)
   10674:	dc000015 	stw	r16,0(sp)
   10678:	2025883a 	mov	r18,r4
   1067c:	10003926 	beq	r2,zero,10764 <__sfp+0x108>
   10680:	04400074 	movhi	r17,1
   10684:	8c562404 	addi	r17,r17,22672
   10688:	88800117 	ldw	r2,4(r17)
   1068c:	8c000217 	ldw	r16,8(r17)
   10690:	10bfffc4 	addi	r2,r2,-1
   10694:	1000030e 	bge	r2,zero,106a4 <__sfp+0x48>
   10698:	00001f06 	br	10718 <__sfp+0xbc>
   1069c:	84001a04 	addi	r16,r16,104
   106a0:	28001d26 	beq	r5,zero,10718 <__sfp+0xbc>
   106a4:	80c0030f 	ldh	r3,12(r16)
   106a8:	10bfffc4 	addi	r2,r2,-1
   106ac:	117fffd8 	cmpnei	r5,r2,-1
   106b0:	183ffa1e 	bne	r3,zero,1069c <__sfp+0x40>
   106b4:	00bffff4 	movhi	r2,65535
   106b8:	10800044 	addi	r2,r2,1
   106bc:	80800315 	stw	r2,12(r16)
   106c0:	80001915 	stw	zero,100(r16)
   106c4:	80000015 	stw	zero,0(r16)
   106c8:	80000215 	stw	zero,8(r16)
   106cc:	80000115 	stw	zero,4(r16)
   106d0:	80000415 	stw	zero,16(r16)
   106d4:	80000515 	stw	zero,20(r16)
   106d8:	80000615 	stw	zero,24(r16)
   106dc:	01800204 	movi	r6,8
   106e0:	000b883a 	mov	r5,zero
   106e4:	81001704 	addi	r4,r16,92
   106e8:	00112cc0 	call	112cc <memset>
   106ec:	80000c15 	stw	zero,48(r16)
   106f0:	80000d15 	stw	zero,52(r16)
   106f4:	80001115 	stw	zero,68(r16)
   106f8:	80001215 	stw	zero,72(r16)
   106fc:	8005883a 	mov	r2,r16
   10700:	dfc00317 	ldw	ra,12(sp)
   10704:	dc800217 	ldw	r18,8(sp)
   10708:	dc400117 	ldw	r17,4(sp)
   1070c:	dc000017 	ldw	r16,0(sp)
   10710:	dec00404 	addi	sp,sp,16
   10714:	f800283a 	ret
   10718:	8c000017 	ldw	r16,0(r17)
   1071c:	80000226 	beq	r16,zero,10728 <__sfp+0xcc>
   10720:	8023883a 	mov	r17,r16
   10724:	003fd806 	br	10688 <__sfp+0x2c>
   10728:	01406b04 	movi	r5,428
   1072c:	9009883a 	mov	r4,r18
   10730:	0011ab40 	call	11ab4 <_malloc_r>
   10734:	1021883a 	mov	r16,r2
   10738:	10000c26 	beq	r2,zero,1076c <__sfp+0x110>
   1073c:	10000015 	stw	zero,0(r2)
   10740:	11000304 	addi	r4,r2,12
   10744:	00800104 	movi	r2,4
   10748:	80800115 	stw	r2,4(r16)
   1074c:	81000215 	stw	r4,8(r16)
   10750:	01806804 	movi	r6,416
   10754:	000b883a 	mov	r5,zero
   10758:	00112cc0 	call	112cc <memset>
   1075c:	8c000015 	stw	r16,0(r17)
   10760:	003fef06 	br	10720 <__sfp+0xc4>
   10764:	00104e80 	call	104e8 <global_stdio_init.part.0>
   10768:	003fc506 	br	10680 <__sfp+0x24>
   1076c:	88000015 	stw	zero,0(r17)
   10770:	00800304 	movi	r2,12
   10774:	90800015 	stw	r2,0(r18)
   10778:	003fe006 	br	106fc <__sfp+0xa0>

0001077c <__sinit>:
   1077c:	20800d17 	ldw	r2,52(r4)
   10780:	10000126 	beq	r2,zero,10788 <__sinit+0xc>
   10784:	f800283a 	ret
   10788:	00c000b4 	movhi	r3,2
   1078c:	00800074 	movhi	r2,1
   10790:	18e19417 	ldw	r3,-31152(r3)
   10794:	10811c04 	addi	r2,r2,1136
   10798:	20800d15 	stw	r2,52(r4)
   1079c:	183ff91e 	bne	r3,zero,10784 <__sinit+0x8>
   107a0:	00104e81 	jmpi	104e8 <global_stdio_init.part.0>

000107a4 <__sfp_lock_acquire>:
   107a4:	f800283a 	ret

000107a8 <__sfp_lock_release>:
   107a8:	f800283a 	ret

000107ac <__fp_lock_all>:
   107ac:	01800074 	movhi	r6,1
   107b0:	01400074 	movhi	r5,1
   107b4:	31962404 	addi	r6,r6,22672
   107b8:	29411304 	addi	r5,r5,1100
   107bc:	0009883a 	mov	r4,zero
   107c0:	0010c7c1 	jmpi	10c7c <_fwalk_sglue>

000107c4 <__fp_unlock_all>:
   107c4:	01800074 	movhi	r6,1
   107c8:	01400074 	movhi	r5,1
   107cc:	31962404 	addi	r6,r6,22672
   107d0:	29413804 	addi	r5,r5,1248
   107d4:	0009883a 	mov	r4,zero
   107d8:	0010c7c1 	jmpi	10c7c <_fwalk_sglue>

000107dc <__sfvwrite_r>:
   107dc:	30800217 	ldw	r2,8(r6)
   107e0:	1000c426 	beq	r2,zero,10af4 <__sfvwrite_r+0x318>
   107e4:	2a80030b 	ldhu	r10,12(r5)
   107e8:	defff504 	addi	sp,sp,-44
   107ec:	df000915 	stw	fp,36(sp)
   107f0:	dcc00415 	stw	r19,16(sp)
   107f4:	dc000115 	stw	r16,4(sp)
   107f8:	dfc00a15 	stw	ra,40(sp)
   107fc:	ddc00815 	stw	r23,32(sp)
   10800:	dd800715 	stw	r22,28(sp)
   10804:	dd400615 	stw	r21,24(sp)
   10808:	dd000515 	stw	r20,20(sp)
   1080c:	dc800315 	stw	r18,12(sp)
   10810:	dc400215 	stw	r17,8(sp)
   10814:	5080020c 	andi	r2,r10,8
   10818:	3039883a 	mov	fp,r6
   1081c:	2027883a 	mov	r19,r4
   10820:	2821883a 	mov	r16,r5
   10824:	10002226 	beq	r2,zero,108b0 <__sfvwrite_r+0xd4>
   10828:	28800417 	ldw	r2,16(r5)
   1082c:	10002026 	beq	r2,zero,108b0 <__sfvwrite_r+0xd4>
   10830:	5080008c 	andi	r2,r10,2
   10834:	e4400017 	ldw	r17,0(fp)
   10838:	10002526 	beq	r2,zero,108d0 <__sfvwrite_r+0xf4>
   1083c:	80800917 	ldw	r2,36(r16)
   10840:	81400717 	ldw	r5,28(r16)
   10844:	05600034 	movhi	r21,32768
   10848:	0029883a 	mov	r20,zero
   1084c:	0025883a 	mov	r18,zero
   10850:	ad7f0004 	addi	r21,r21,-1024
   10854:	a00d883a 	mov	r6,r20
   10858:	9809883a 	mov	r4,r19
   1085c:	90001026 	beq	r18,zero,108a0 <__sfvwrite_r+0xc4>
   10860:	900f883a 	mov	r7,r18
   10864:	ac80012e 	bgeu	r21,r18,1086c <__sfvwrite_r+0x90>
   10868:	a80f883a 	mov	r7,r21
   1086c:	103ee83a 	callr	r2
   10870:	00809b0e 	bge	zero,r2,10ae0 <__sfvwrite_r+0x304>
   10874:	e0c00217 	ldw	r3,8(fp)
   10878:	a0a9883a 	add	r20,r20,r2
   1087c:	90a5c83a 	sub	r18,r18,r2
   10880:	1885c83a 	sub	r2,r3,r2
   10884:	e0800215 	stw	r2,8(fp)
   10888:	10008426 	beq	r2,zero,10a9c <__sfvwrite_r+0x2c0>
   1088c:	80800917 	ldw	r2,36(r16)
   10890:	81400717 	ldw	r5,28(r16)
   10894:	a00d883a 	mov	r6,r20
   10898:	9809883a 	mov	r4,r19
   1089c:	903ff01e 	bne	r18,zero,10860 <__sfvwrite_r+0x84>
   108a0:	8d000017 	ldw	r20,0(r17)
   108a4:	8c800117 	ldw	r18,4(r17)
   108a8:	8c400204 	addi	r17,r17,8
   108ac:	003fe906 	br	10854 <__sfvwrite_r+0x78>
   108b0:	800b883a 	mov	r5,r16
   108b4:	9809883a 	mov	r4,r19
   108b8:	0010e640 	call	10e64 <__swsetup_r>
   108bc:	10008b1e 	bne	r2,zero,10aec <__sfvwrite_r+0x310>
   108c0:	8280030b 	ldhu	r10,12(r16)
   108c4:	e4400017 	ldw	r17,0(fp)
   108c8:	5080008c 	andi	r2,r10,2
   108cc:	103fdb1e 	bne	r2,zero,1083c <__sfvwrite_r+0x60>
   108d0:	5080004c 	andi	r2,r10,1
   108d4:	1000501e 	bne	r2,zero,10a18 <__sfvwrite_r+0x23c>
   108d8:	00a00034 	movhi	r2,32768
   108dc:	81c00017 	ldw	r7,0(r16)
   108e0:	80c00217 	ldw	r3,8(r16)
   108e4:	10bfffc4 	addi	r2,r2,-1
   108e8:	002d883a 	mov	r22,zero
   108ec:	0025883a 	mov	r18,zero
   108f0:	d8800015 	stw	r2,0(sp)
   108f4:	3809883a 	mov	r4,r7
   108f8:	1829883a 	mov	r20,r3
   108fc:	90004226 	beq	r18,zero,10a08 <__sfvwrite_r+0x22c>
   10900:	5080800c 	andi	r2,r10,512
   10904:	10009526 	beq	r2,zero,10b5c <__sfvwrite_r+0x380>
   10908:	182b883a 	mov	r21,r3
   1090c:	90c0ba36 	bltu	r18,r3,10bf8 <__sfvwrite_r+0x41c>
   10910:	5081200c 	andi	r2,r10,1152
   10914:	10002626 	beq	r2,zero,109b0 <__sfvwrite_r+0x1d4>
   10918:	80c00517 	ldw	r3,20(r16)
   1091c:	81400417 	ldw	r5,16(r16)
   10920:	18c5883a 	add	r2,r3,r3
   10924:	10c5883a 	add	r2,r2,r3
   10928:	1006d7fa 	srli	r3,r2,31
   1092c:	396bc83a 	sub	r21,r7,r5
   10930:	a9000044 	addi	r4,r21,1
   10934:	1887883a 	add	r3,r3,r2
   10938:	1829d07a 	srai	r20,r3,1
   1093c:	2485883a 	add	r2,r4,r18
   10940:	a00d883a 	mov	r6,r20
   10944:	a080022e 	bgeu	r20,r2,10950 <__sfvwrite_r+0x174>
   10948:	1029883a 	mov	r20,r2
   1094c:	100d883a 	mov	r6,r2
   10950:	5281000c 	andi	r10,r10,1024
   10954:	5000b626 	beq	r10,zero,10c30 <__sfvwrite_r+0x454>
   10958:	300b883a 	mov	r5,r6
   1095c:	9809883a 	mov	r4,r19
   10960:	0011ab40 	call	11ab4 <_malloc_r>
   10964:	102f883a 	mov	r23,r2
   10968:	1000c026 	beq	r2,zero,10c6c <__sfvwrite_r+0x490>
   1096c:	81400417 	ldw	r5,16(r16)
   10970:	a80d883a 	mov	r6,r21
   10974:	1009883a 	mov	r4,r2
   10978:	00110a40 	call	110a4 <memcpy>
   1097c:	8080030b 	ldhu	r2,12(r16)
   10980:	00fedfc4 	movi	r3,-1153
   10984:	10c4703a 	and	r2,r2,r3
   10988:	10802014 	ori	r2,r2,128
   1098c:	8080030d 	sth	r2,12(r16)
   10990:	a54fc83a 	sub	r7,r20,r21
   10994:	bd49883a 	add	r4,r23,r21
   10998:	85000515 	stw	r20,20(r16)
   1099c:	85c00415 	stw	r23,16(r16)
   109a0:	81000015 	stw	r4,0(r16)
   109a4:	9029883a 	mov	r20,r18
   109a8:	81c00215 	stw	r7,8(r16)
   109ac:	902b883a 	mov	r21,r18
   109b0:	a80d883a 	mov	r6,r21
   109b4:	b00b883a 	mov	r5,r22
   109b8:	00111a40 	call	111a4 <memmove>
   109bc:	80c00217 	ldw	r3,8(r16)
   109c0:	81c00017 	ldw	r7,0(r16)
   109c4:	902f883a 	mov	r23,r18
   109c8:	1d07c83a 	sub	r3,r3,r20
   109cc:	3d4d883a 	add	r6,r7,r21
   109d0:	80c00215 	stw	r3,8(r16)
   109d4:	81800015 	stw	r6,0(r16)
   109d8:	0025883a 	mov	r18,zero
   109dc:	e0800217 	ldw	r2,8(fp)
   109e0:	b5ed883a 	add	r22,r22,r23
   109e4:	15c5c83a 	sub	r2,r2,r23
   109e8:	e0800215 	stw	r2,8(fp)
   109ec:	10002b26 	beq	r2,zero,10a9c <__sfvwrite_r+0x2c0>
   109f0:	81c00017 	ldw	r7,0(r16)
   109f4:	80c00217 	ldw	r3,8(r16)
   109f8:	8280030b 	ldhu	r10,12(r16)
   109fc:	3809883a 	mov	r4,r7
   10a00:	1829883a 	mov	r20,r3
   10a04:	903fbe1e 	bne	r18,zero,10900 <__sfvwrite_r+0x124>
   10a08:	8d800017 	ldw	r22,0(r17)
   10a0c:	8c800117 	ldw	r18,4(r17)
   10a10:	8c400204 	addi	r17,r17,8
   10a14:	003fb706 	br	108f4 <__sfvwrite_r+0x118>
   10a18:	002f883a 	mov	r23,zero
   10a1c:	0005883a 	mov	r2,zero
   10a20:	002d883a 	mov	r22,zero
   10a24:	002b883a 	mov	r21,zero
   10a28:	a8003426 	beq	r21,zero,10afc <__sfvwrite_r+0x320>
   10a2c:	10003826 	beq	r2,zero,10b10 <__sfvwrite_r+0x334>
   10a30:	b829883a 	mov	r20,r23
   10a34:	ad00012e 	bgeu	r21,r20,10a3c <__sfvwrite_r+0x260>
   10a38:	a829883a 	mov	r20,r21
   10a3c:	81000017 	ldw	r4,0(r16)
   10a40:	80800417 	ldw	r2,16(r16)
   10a44:	84800217 	ldw	r18,8(r16)
   10a48:	81c00517 	ldw	r7,20(r16)
   10a4c:	1100022e 	bgeu	r2,r4,10a58 <__sfvwrite_r+0x27c>
   10a50:	91e5883a 	add	r18,r18,r7
   10a54:	95003616 	blt	r18,r20,10b30 <__sfvwrite_r+0x354>
   10a58:	a1c06a16 	blt	r20,r7,10c04 <__sfvwrite_r+0x428>
   10a5c:	80800917 	ldw	r2,36(r16)
   10a60:	81400717 	ldw	r5,28(r16)
   10a64:	b00d883a 	mov	r6,r22
   10a68:	9809883a 	mov	r4,r19
   10a6c:	103ee83a 	callr	r2
   10a70:	1025883a 	mov	r18,r2
   10a74:	00801a0e 	bge	zero,r2,10ae0 <__sfvwrite_r+0x304>
   10a78:	bcafc83a 	sub	r23,r23,r18
   10a7c:	b8001426 	beq	r23,zero,10ad0 <__sfvwrite_r+0x2f4>
   10a80:	00800044 	movi	r2,1
   10a84:	e0c00217 	ldw	r3,8(fp)
   10a88:	b4ad883a 	add	r22,r22,r18
   10a8c:	acabc83a 	sub	r21,r21,r18
   10a90:	1c87c83a 	sub	r3,r3,r18
   10a94:	e0c00215 	stw	r3,8(fp)
   10a98:	183fe31e 	bne	r3,zero,10a28 <__sfvwrite_r+0x24c>
   10a9c:	0005883a 	mov	r2,zero
   10aa0:	dfc00a17 	ldw	ra,40(sp)
   10aa4:	df000917 	ldw	fp,36(sp)
   10aa8:	ddc00817 	ldw	r23,32(sp)
   10aac:	dd800717 	ldw	r22,28(sp)
   10ab0:	dd400617 	ldw	r21,24(sp)
   10ab4:	dd000517 	ldw	r20,20(sp)
   10ab8:	dcc00417 	ldw	r19,16(sp)
   10abc:	dc800317 	ldw	r18,12(sp)
   10ac0:	dc400217 	ldw	r17,8(sp)
   10ac4:	dc000117 	ldw	r16,4(sp)
   10ac8:	dec00b04 	addi	sp,sp,44
   10acc:	f800283a 	ret
   10ad0:	800b883a 	mov	r5,r16
   10ad4:	9809883a 	mov	r4,r19
   10ad8:	0012b700 	call	12b70 <_fflush_r>
   10adc:	103fe926 	beq	r2,zero,10a84 <__sfvwrite_r+0x2a8>
   10ae0:	8080030b 	ldhu	r2,12(r16)
   10ae4:	10801014 	ori	r2,r2,64
   10ae8:	8080030d 	sth	r2,12(r16)
   10aec:	00bfffc4 	movi	r2,-1
   10af0:	003feb06 	br	10aa0 <__sfvwrite_r+0x2c4>
   10af4:	0005883a 	mov	r2,zero
   10af8:	f800283a 	ret
   10afc:	8d400117 	ldw	r21,4(r17)
   10b00:	8805883a 	mov	r2,r17
   10b04:	8c400204 	addi	r17,r17,8
   10b08:	a83ffc26 	beq	r21,zero,10afc <__sfvwrite_r+0x320>
   10b0c:	15800017 	ldw	r22,0(r2)
   10b10:	a80d883a 	mov	r6,r21
   10b14:	01400284 	movi	r5,10
   10b18:	b009883a 	mov	r4,r22
   10b1c:	0010fa80 	call	10fa8 <memchr>
   10b20:	10004f26 	beq	r2,zero,10c60 <__sfvwrite_r+0x484>
   10b24:	10800044 	addi	r2,r2,1
   10b28:	15afc83a 	sub	r23,r2,r22
   10b2c:	003fc006 	br	10a30 <__sfvwrite_r+0x254>
   10b30:	b00b883a 	mov	r5,r22
   10b34:	900d883a 	mov	r6,r18
   10b38:	00111a40 	call	111a4 <memmove>
   10b3c:	80800017 	ldw	r2,0(r16)
   10b40:	800b883a 	mov	r5,r16
   10b44:	9809883a 	mov	r4,r19
   10b48:	1485883a 	add	r2,r2,r18
   10b4c:	80800015 	stw	r2,0(r16)
   10b50:	0012b700 	call	12b70 <_fflush_r>
   10b54:	103fc826 	beq	r2,zero,10a78 <__sfvwrite_r+0x29c>
   10b58:	003fe106 	br	10ae0 <__sfvwrite_r+0x304>
   10b5c:	80800417 	ldw	r2,16(r16)
   10b60:	11c01236 	bltu	r2,r7,10bac <__sfvwrite_r+0x3d0>
   10b64:	81400517 	ldw	r5,20(r16)
   10b68:	91401036 	bltu	r18,r5,10bac <__sfvwrite_r+0x3d0>
   10b6c:	00a00034 	movhi	r2,32768
   10b70:	902f883a 	mov	r23,r18
   10b74:	90800136 	bltu	r18,r2,10b7c <__sfvwrite_r+0x3a0>
   10b78:	ddc00017 	ldw	r23,0(sp)
   10b7c:	b809883a 	mov	r4,r23
   10b80:	00131340 	call	13134 <__modsi3>
   10b84:	80c00917 	ldw	r3,36(r16)
   10b88:	81400717 	ldw	r5,28(r16)
   10b8c:	b88fc83a 	sub	r7,r23,r2
   10b90:	b00d883a 	mov	r6,r22
   10b94:	9809883a 	mov	r4,r19
   10b98:	183ee83a 	callr	r3
   10b9c:	102f883a 	mov	r23,r2
   10ba0:	00bfcf0e 	bge	zero,r2,10ae0 <__sfvwrite_r+0x304>
   10ba4:	95e5c83a 	sub	r18,r18,r23
   10ba8:	003f8c06 	br	109dc <__sfvwrite_r+0x200>
   10bac:	182f883a 	mov	r23,r3
   10bb0:	90c0012e 	bgeu	r18,r3,10bb8 <__sfvwrite_r+0x3dc>
   10bb4:	902f883a 	mov	r23,r18
   10bb8:	3809883a 	mov	r4,r7
   10bbc:	b80d883a 	mov	r6,r23
   10bc0:	b00b883a 	mov	r5,r22
   10bc4:	00111a40 	call	111a4 <memmove>
   10bc8:	80c00217 	ldw	r3,8(r16)
   10bcc:	81c00017 	ldw	r7,0(r16)
   10bd0:	1dc7c83a 	sub	r3,r3,r23
   10bd4:	3dcf883a 	add	r7,r7,r23
   10bd8:	80c00215 	stw	r3,8(r16)
   10bdc:	81c00015 	stw	r7,0(r16)
   10be0:	183ff01e 	bne	r3,zero,10ba4 <__sfvwrite_r+0x3c8>
   10be4:	800b883a 	mov	r5,r16
   10be8:	9809883a 	mov	r4,r19
   10bec:	0012b700 	call	12b70 <_fflush_r>
   10bf0:	103fec26 	beq	r2,zero,10ba4 <__sfvwrite_r+0x3c8>
   10bf4:	003fba06 	br	10ae0 <__sfvwrite_r+0x304>
   10bf8:	9029883a 	mov	r20,r18
   10bfc:	902b883a 	mov	r21,r18
   10c00:	003f6b06 	br	109b0 <__sfvwrite_r+0x1d4>
   10c04:	a00d883a 	mov	r6,r20
   10c08:	b00b883a 	mov	r5,r22
   10c0c:	00111a40 	call	111a4 <memmove>
   10c10:	80c00217 	ldw	r3,8(r16)
   10c14:	80800017 	ldw	r2,0(r16)
   10c18:	a025883a 	mov	r18,r20
   10c1c:	1d07c83a 	sub	r3,r3,r20
   10c20:	1505883a 	add	r2,r2,r20
   10c24:	80c00215 	stw	r3,8(r16)
   10c28:	80800015 	stw	r2,0(r16)
   10c2c:	003f9206 	br	10a78 <__sfvwrite_r+0x29c>
   10c30:	9809883a 	mov	r4,r19
   10c34:	001227c0 	call	1227c <_realloc_r>
   10c38:	102f883a 	mov	r23,r2
   10c3c:	103f541e 	bne	r2,zero,10990 <__sfvwrite_r+0x1b4>
   10c40:	81400417 	ldw	r5,16(r16)
   10c44:	9809883a 	mov	r4,r19
   10c48:	00117ac0 	call	117ac <_free_r>
   10c4c:	8080030b 	ldhu	r2,12(r16)
   10c50:	00c00304 	movi	r3,12
   10c54:	98c00015 	stw	r3,0(r19)
   10c58:	10bfdfcc 	andi	r2,r2,65407
   10c5c:	003fa106 	br	10ae4 <__sfvwrite_r+0x308>
   10c60:	ad000044 	addi	r20,r21,1
   10c64:	a02f883a 	mov	r23,r20
   10c68:	003f7206 	br	10a34 <__sfvwrite_r+0x258>
   10c6c:	00c00304 	movi	r3,12
   10c70:	8080030b 	ldhu	r2,12(r16)
   10c74:	98c00015 	stw	r3,0(r19)
   10c78:	003f9a06 	br	10ae4 <__sfvwrite_r+0x308>

00010c7c <_fwalk_sglue>:
   10c7c:	defff904 	addi	sp,sp,-28
   10c80:	dd400515 	stw	r21,20(sp)
   10c84:	dd000415 	stw	r20,16(sp)
   10c88:	dcc00315 	stw	r19,12(sp)
   10c8c:	dc800215 	stw	r18,8(sp)
   10c90:	dfc00615 	stw	ra,24(sp)
   10c94:	dc400115 	stw	r17,4(sp)
   10c98:	dc000015 	stw	r16,0(sp)
   10c9c:	2027883a 	mov	r19,r4
   10ca0:	2829883a 	mov	r20,r5
   10ca4:	3025883a 	mov	r18,r6
   10ca8:	002b883a 	mov	r21,zero
   10cac:	94400117 	ldw	r17,4(r18)
   10cb0:	94000217 	ldw	r16,8(r18)
   10cb4:	8c7fffc4 	addi	r17,r17,-1
   10cb8:	88000e16 	blt	r17,zero,10cf4 <_fwalk_sglue+0x78>
   10cbc:	8080030b 	ldhu	r2,12(r16)
   10cc0:	8c7fffc4 	addi	r17,r17,-1
   10cc4:	108000b0 	cmpltui	r2,r2,2
   10cc8:	1000071e 	bne	r2,zero,10ce8 <_fwalk_sglue+0x6c>
   10ccc:	8080038f 	ldh	r2,14(r16)
   10cd0:	800b883a 	mov	r5,r16
   10cd4:	9809883a 	mov	r4,r19
   10cd8:	10bfffe0 	cmpeqi	r2,r2,-1
   10cdc:	1000021e 	bne	r2,zero,10ce8 <_fwalk_sglue+0x6c>
   10ce0:	a03ee83a 	callr	r20
   10ce4:	a8aab03a 	or	r21,r21,r2
   10ce8:	88bfffd8 	cmpnei	r2,r17,-1
   10cec:	84001a04 	addi	r16,r16,104
   10cf0:	103ff21e 	bne	r2,zero,10cbc <_fwalk_sglue+0x40>
   10cf4:	94800017 	ldw	r18,0(r18)
   10cf8:	903fec1e 	bne	r18,zero,10cac <_fwalk_sglue+0x30>
   10cfc:	a805883a 	mov	r2,r21
   10d00:	dfc00617 	ldw	ra,24(sp)
   10d04:	dd400517 	ldw	r21,20(sp)
   10d08:	dd000417 	ldw	r20,16(sp)
   10d0c:	dcc00317 	ldw	r19,12(sp)
   10d10:	dc800217 	ldw	r18,8(sp)
   10d14:	dc400117 	ldw	r17,4(sp)
   10d18:	dc000017 	ldw	r16,0(sp)
   10d1c:	dec00704 	addi	sp,sp,28
   10d20:	f800283a 	ret

00010d24 <__sread>:
   10d24:	defffe04 	addi	sp,sp,-8
   10d28:	dc000015 	stw	r16,0(sp)
   10d2c:	2821883a 	mov	r16,r5
   10d30:	2940038f 	ldh	r5,14(r5)
   10d34:	dfc00115 	stw	ra,4(sp)
   10d38:	00115900 	call	11590 <_read_r>
   10d3c:	10000716 	blt	r2,zero,10d5c <__sread+0x38>
   10d40:	80c01417 	ldw	r3,80(r16)
   10d44:	1887883a 	add	r3,r3,r2
   10d48:	80c01415 	stw	r3,80(r16)
   10d4c:	dfc00117 	ldw	ra,4(sp)
   10d50:	dc000017 	ldw	r16,0(sp)
   10d54:	dec00204 	addi	sp,sp,8
   10d58:	f800283a 	ret
   10d5c:	80c0030b 	ldhu	r3,12(r16)
   10d60:	18fbffcc 	andi	r3,r3,61439
   10d64:	80c0030d 	sth	r3,12(r16)
   10d68:	dfc00117 	ldw	ra,4(sp)
   10d6c:	dc000017 	ldw	r16,0(sp)
   10d70:	dec00204 	addi	sp,sp,8
   10d74:	f800283a 	ret

00010d78 <__seofread>:
   10d78:	0005883a 	mov	r2,zero
   10d7c:	f800283a 	ret

00010d80 <__swrite>:
   10d80:	2880030b 	ldhu	r2,12(r5)
   10d84:	defffb04 	addi	sp,sp,-20
   10d88:	dcc00315 	stw	r19,12(sp)
   10d8c:	dc800215 	stw	r18,8(sp)
   10d90:	dc400115 	stw	r17,4(sp)
   10d94:	dc000015 	stw	r16,0(sp)
   10d98:	dfc00415 	stw	ra,16(sp)
   10d9c:	10c0400c 	andi	r3,r2,256
   10da0:	2821883a 	mov	r16,r5
   10da4:	2023883a 	mov	r17,r4
   10da8:	3025883a 	mov	r18,r6
   10dac:	3827883a 	mov	r19,r7
   10db0:	18000d1e 	bne	r3,zero,10de8 <__swrite+0x68>
   10db4:	8140038f 	ldh	r5,14(r16)
   10db8:	10bbffcc 	andi	r2,r2,61439
   10dbc:	980f883a 	mov	r7,r19
   10dc0:	900d883a 	mov	r6,r18
   10dc4:	8809883a 	mov	r4,r17
   10dc8:	8080030d 	sth	r2,12(r16)
   10dcc:	dfc00417 	ldw	ra,16(sp)
   10dd0:	dcc00317 	ldw	r19,12(sp)
   10dd4:	dc800217 	ldw	r18,8(sp)
   10dd8:	dc400117 	ldw	r17,4(sp)
   10ddc:	dc000017 	ldw	r16,0(sp)
   10de0:	dec00504 	addi	sp,sp,20
   10de4:	00115f41 	jmpi	115f4 <_write_r>
   10de8:	2940038f 	ldh	r5,14(r5)
   10dec:	01c00084 	movi	r7,2
   10df0:	000d883a 	mov	r6,zero
   10df4:	001152c0 	call	1152c <_lseek_r>
   10df8:	8080030b 	ldhu	r2,12(r16)
   10dfc:	003fed06 	br	10db4 <__swrite+0x34>

00010e00 <__sseek>:
   10e00:	defffe04 	addi	sp,sp,-8
   10e04:	dc000015 	stw	r16,0(sp)
   10e08:	2821883a 	mov	r16,r5
   10e0c:	2940038f 	ldh	r5,14(r5)
   10e10:	dfc00115 	stw	ra,4(sp)
   10e14:	001152c0 	call	1152c <_lseek_r>
   10e18:	10ffffd8 	cmpnei	r3,r2,-1
   10e1c:	18000826 	beq	r3,zero,10e40 <__sseek+0x40>
   10e20:	80c0030b 	ldhu	r3,12(r16)
   10e24:	80801415 	stw	r2,80(r16)
   10e28:	18c40014 	ori	r3,r3,4096
   10e2c:	80c0030d 	sth	r3,12(r16)
   10e30:	dfc00117 	ldw	ra,4(sp)
   10e34:	dc000017 	ldw	r16,0(sp)
   10e38:	dec00204 	addi	sp,sp,8
   10e3c:	f800283a 	ret
   10e40:	80c0030b 	ldhu	r3,12(r16)
   10e44:	18fbffcc 	andi	r3,r3,61439
   10e48:	80c0030d 	sth	r3,12(r16)
   10e4c:	dfc00117 	ldw	ra,4(sp)
   10e50:	dc000017 	ldw	r16,0(sp)
   10e54:	dec00204 	addi	sp,sp,8
   10e58:	f800283a 	ret

00010e5c <__sclose>:
   10e5c:	2940038f 	ldh	r5,14(r5)
   10e60:	001140c1 	jmpi	1140c <_close_r>

00010e64 <__swsetup_r>:
   10e64:	00800074 	movhi	r2,1
   10e68:	109bab17 	ldw	r2,28332(r2)
   10e6c:	defffd04 	addi	sp,sp,-12
   10e70:	dc400115 	stw	r17,4(sp)
   10e74:	dc000015 	stw	r16,0(sp)
   10e78:	dfc00215 	stw	ra,8(sp)
   10e7c:	2023883a 	mov	r17,r4
   10e80:	2821883a 	mov	r16,r5
   10e84:	10000226 	beq	r2,zero,10e90 <__swsetup_r+0x2c>
   10e88:	10c00d17 	ldw	r3,52(r2)
   10e8c:	18003f26 	beq	r3,zero,10f8c <__swsetup_r+0x128>
   10e90:	80c0030b 	ldhu	r3,12(r16)
   10e94:	1880020c 	andi	r2,r3,8
   10e98:	10001a26 	beq	r2,zero,10f04 <__swsetup_r+0xa0>
   10e9c:	80800417 	ldw	r2,16(r16)
   10ea0:	10002126 	beq	r2,zero,10f28 <__swsetup_r+0xc4>
   10ea4:	1900004c 	andi	r4,r3,1
   10ea8:	20000b1e 	bne	r4,zero,10ed8 <__swsetup_r+0x74>
   10eac:	1900008c 	andi	r4,r3,2
   10eb0:	2000261e 	bne	r4,zero,10f4c <__swsetup_r+0xe8>
   10eb4:	81000517 	ldw	r4,20(r16)
   10eb8:	81000215 	stw	r4,8(r16)
   10ebc:	10000b26 	beq	r2,zero,10eec <__swsetup_r+0x88>
   10ec0:	0005883a 	mov	r2,zero
   10ec4:	dfc00217 	ldw	ra,8(sp)
   10ec8:	dc400117 	ldw	r17,4(sp)
   10ecc:	dc000017 	ldw	r16,0(sp)
   10ed0:	dec00304 	addi	sp,sp,12
   10ed4:	f800283a 	ret
   10ed8:	81000517 	ldw	r4,20(r16)
   10edc:	80000215 	stw	zero,8(r16)
   10ee0:	0109c83a 	sub	r4,zero,r4
   10ee4:	81000615 	stw	r4,24(r16)
   10ee8:	103ff51e 	bne	r2,zero,10ec0 <__swsetup_r+0x5c>
   10eec:	1900200c 	andi	r4,r3,128
   10ef0:	203ff426 	beq	r4,zero,10ec4 <__swsetup_r+0x60>
   10ef4:	18c01014 	ori	r3,r3,64
   10ef8:	80c0030d 	sth	r3,12(r16)
   10efc:	00bfffc4 	movi	r2,-1
   10f00:	003ff006 	br	10ec4 <__swsetup_r+0x60>
   10f04:	1880040c 	andi	r2,r3,16
   10f08:	10002326 	beq	r2,zero,10f98 <__swsetup_r+0x134>
   10f0c:	1880010c 	andi	r2,r3,4
   10f10:	1000101e 	bne	r2,zero,10f54 <__swsetup_r+0xf0>
   10f14:	80800417 	ldw	r2,16(r16)
   10f18:	19000214 	ori	r4,r3,8
   10f1c:	8100030d 	sth	r4,12(r16)
   10f20:	2007883a 	mov	r3,r4
   10f24:	103fdf1e 	bne	r2,zero,10ea4 <__swsetup_r+0x40>
   10f28:	1900a00c 	andi	r4,r3,640
   10f2c:	21008020 	cmpeqi	r4,r4,512
   10f30:	203fdc1e 	bne	r4,zero,10ea4 <__swsetup_r+0x40>
   10f34:	800b883a 	mov	r5,r16
   10f38:	8809883a 	mov	r4,r17
   10f3c:	0012c580 	call	12c58 <__smakebuf_r>
   10f40:	80c0030b 	ldhu	r3,12(r16)
   10f44:	80800417 	ldw	r2,16(r16)
   10f48:	003fd606 	br	10ea4 <__swsetup_r+0x40>
   10f4c:	0009883a 	mov	r4,zero
   10f50:	003fd906 	br	10eb8 <__swsetup_r+0x54>
   10f54:	81400c17 	ldw	r5,48(r16)
   10f58:	28000626 	beq	r5,zero,10f74 <__swsetup_r+0x110>
   10f5c:	80801004 	addi	r2,r16,64
   10f60:	28800326 	beq	r5,r2,10f70 <__swsetup_r+0x10c>
   10f64:	8809883a 	mov	r4,r17
   10f68:	00117ac0 	call	117ac <_free_r>
   10f6c:	80c0030b 	ldhu	r3,12(r16)
   10f70:	80000c15 	stw	zero,48(r16)
   10f74:	80800417 	ldw	r2,16(r16)
   10f78:	013ff6c4 	movi	r4,-37
   10f7c:	20c6703a 	and	r3,r4,r3
   10f80:	80000115 	stw	zero,4(r16)
   10f84:	80800015 	stw	r2,0(r16)
   10f88:	003fe306 	br	10f18 <__swsetup_r+0xb4>
   10f8c:	1009883a 	mov	r4,r2
   10f90:	001077c0 	call	1077c <__sinit>
   10f94:	003fbe06 	br	10e90 <__swsetup_r+0x2c>
   10f98:	00800244 	movi	r2,9
   10f9c:	88800015 	stw	r2,0(r17)
   10fa0:	18c01014 	ori	r3,r3,64
   10fa4:	003fd406 	br	10ef8 <__swsetup_r+0x94>

00010fa8 <memchr>:
   10fa8:	defffc04 	addi	sp,sp,-16
   10fac:	dc000015 	stw	r16,0(sp)
   10fb0:	2021883a 	mov	r16,r4
   10fb4:	dc800215 	stw	r18,8(sp)
   10fb8:	dfc00315 	stw	ra,12(sp)
   10fbc:	dc400115 	stw	r17,4(sp)
   10fc0:	808000cc 	andi	r2,r16,3
   10fc4:	2809883a 	mov	r4,r5
   10fc8:	2825883a 	mov	r18,r5
   10fcc:	10000e26 	beq	r2,zero,11008 <memchr+0x60>
   10fd0:	347fffc4 	addi	r17,r6,-1
   10fd4:	30001726 	beq	r6,zero,11034 <memchr+0x8c>
   10fd8:	28c03fcc 	andi	r3,r5,255
   10fdc:	00000606 	br	10ff8 <memchr+0x50>
   10fe0:	84000044 	addi	r16,r16,1
   10fe4:	808000cc 	andi	r2,r16,3
   10fe8:	10000826 	beq	r2,zero,1100c <memchr+0x64>
   10fec:	8c7fffc4 	addi	r17,r17,-1
   10ff0:	88bfffe0 	cmpeqi	r2,r17,-1
   10ff4:	10000f1e 	bne	r2,zero,11034 <memchr+0x8c>
   10ff8:	80800003 	ldbu	r2,0(r16)
   10ffc:	10fff81e 	bne	r2,r3,10fe0 <memchr+0x38>
   11000:	8005883a 	mov	r2,r16
   11004:	00000c06 	br	11038 <memchr+0x90>
   11008:	3023883a 	mov	r17,r6
   1100c:	88800130 	cmpltui	r2,r17,4
   11010:	10000f26 	beq	r2,zero,11050 <memchr+0xa8>
   11014:	88000726 	beq	r17,zero,11034 <memchr+0x8c>
   11018:	8463883a 	add	r17,r16,r17
   1101c:	8005883a 	mov	r2,r16
   11020:	90c03fcc 	andi	r3,r18,255
   11024:	11000003 	ldbu	r4,0(r2)
   11028:	20c00326 	beq	r4,r3,11038 <memchr+0x90>
   1102c:	10800044 	addi	r2,r2,1
   11030:	88bffc1e 	bne	r17,r2,11024 <memchr+0x7c>
   11034:	0005883a 	mov	r2,zero
   11038:	dfc00317 	ldw	ra,12(sp)
   1103c:	dc800217 	ldw	r18,8(sp)
   11040:	dc400117 	ldw	r17,4(sp)
   11044:	dc000017 	ldw	r16,0(sp)
   11048:	dec00404 	addi	sp,sp,16
   1104c:	f800283a 	ret
   11050:	01404074 	movhi	r5,257
   11054:	29404044 	addi	r5,r5,257
   11058:	21003fcc 	andi	r4,r4,255
   1105c:	00132680 	call	13268 <__mulsi3>
   11060:	01bfbff4 	movhi	r6,65279
   11064:	01602074 	movhi	r5,32897
   11068:	31bfbfc4 	addi	r6,r6,-257
   1106c:	29602004 	addi	r5,r5,-32640
   11070:	00000406 	br	11084 <memchr+0xdc>
   11074:	8c7fff04 	addi	r17,r17,-4
   11078:	88c00128 	cmpgeui	r3,r17,4
   1107c:	84000104 	addi	r16,r16,4
   11080:	183fe426 	beq	r3,zero,11014 <memchr+0x6c>
   11084:	80c00017 	ldw	r3,0(r16)
   11088:	10c6f03a 	xor	r3,r2,r3
   1108c:	1989883a 	add	r4,r3,r6
   11090:	00c6303a 	nor	r3,zero,r3
   11094:	20c6703a 	and	r3,r4,r3
   11098:	1946703a 	and	r3,r3,r5
   1109c:	183ff526 	beq	r3,zero,11074 <memchr+0xcc>
   110a0:	003fdc06 	br	11014 <memchr+0x6c>

000110a4 <memcpy>:
   110a4:	30c00428 	cmpgeui	r3,r6,16
   110a8:	2005883a 	mov	r2,r4
   110ac:	18000b1e 	bne	r3,zero,110dc <memcpy+0x38>
   110b0:	2007883a 	mov	r3,r4
   110b4:	31ffffc4 	addi	r7,r6,-1
   110b8:	30003426 	beq	r6,zero,1118c <memcpy+0xe8>
   110bc:	39c00044 	addi	r7,r7,1
   110c0:	19cf883a 	add	r7,r3,r7
   110c4:	29800003 	ldbu	r6,0(r5)
   110c8:	18c00044 	addi	r3,r3,1
   110cc:	29400044 	addi	r5,r5,1
   110d0:	19bfffc5 	stb	r6,-1(r3)
   110d4:	19fffb1e 	bne	r3,r7,110c4 <memcpy+0x20>
   110d8:	f800283a 	ret
   110dc:	2146b03a 	or	r3,r4,r5
   110e0:	18c000cc 	andi	r3,r3,3
   110e4:	18002a1e 	bne	r3,zero,11190 <memcpy+0xec>
   110e8:	333ffc04 	addi	r12,r6,-16
   110ec:	6018d13a 	srli	r12,r12,4
   110f0:	2811883a 	mov	r8,r5
   110f4:	200f883a 	mov	r7,r4
   110f8:	63000044 	addi	r12,r12,1
   110fc:	6018913a 	slli	r12,r12,4
   11100:	2307883a 	add	r3,r4,r12
   11104:	42c00017 	ldw	r11,0(r8)
   11108:	42800117 	ldw	r10,4(r8)
   1110c:	42400217 	ldw	r9,8(r8)
   11110:	41000317 	ldw	r4,12(r8)
   11114:	39c00404 	addi	r7,r7,16
   11118:	3afffc15 	stw	r11,-16(r7)
   1111c:	3abffd15 	stw	r10,-12(r7)
   11120:	3a7ffe15 	stw	r9,-8(r7)
   11124:	393fff15 	stw	r4,-4(r7)
   11128:	42000404 	addi	r8,r8,16
   1112c:	38fff51e 	bne	r7,r3,11104 <memcpy+0x60>
   11130:	3100030c 	andi	r4,r6,12
   11134:	2b0b883a 	add	r5,r5,r12
   11138:	324003cc 	andi	r9,r6,15
   1113c:	20001726 	beq	r4,zero,1119c <memcpy+0xf8>
   11140:	2811883a 	mov	r8,r5
   11144:	1809883a 	mov	r4,r3
   11148:	1a57883a 	add	r11,r3,r9
   1114c:	42800017 	ldw	r10,0(r8)
   11150:	21000104 	addi	r4,r4,4
   11154:	590fc83a 	sub	r7,r11,r4
   11158:	39c00128 	cmpgeui	r7,r7,4
   1115c:	22bfff15 	stw	r10,-4(r4)
   11160:	42000104 	addi	r8,r8,4
   11164:	383ff91e 	bne	r7,zero,1114c <memcpy+0xa8>
   11168:	493fff04 	addi	r4,r9,-4
   1116c:	2008d0ba 	srli	r4,r4,2
   11170:	318000cc 	andi	r6,r6,3
   11174:	31ffffc4 	addi	r7,r6,-1
   11178:	21000044 	addi	r4,r4,1
   1117c:	200890ba 	slli	r4,r4,2
   11180:	1907883a 	add	r3,r3,r4
   11184:	290b883a 	add	r5,r5,r4
   11188:	303fcc1e 	bne	r6,zero,110bc <memcpy+0x18>
   1118c:	f800283a 	ret
   11190:	31ffffc4 	addi	r7,r6,-1
   11194:	2007883a 	mov	r3,r4
   11198:	003fc806 	br	110bc <memcpy+0x18>
   1119c:	480d883a 	mov	r6,r9
   111a0:	003fc406 	br	110b4 <memcpy+0x10>

000111a4 <memmove>:
   111a4:	2005883a 	mov	r2,r4
   111a8:	29000a2e 	bgeu	r5,r4,111d4 <memmove+0x30>
   111ac:	298f883a 	add	r7,r5,r6
   111b0:	21c0082e 	bgeu	r4,r7,111d4 <memmove+0x30>
   111b4:	2187883a 	add	r3,r4,r6
   111b8:	30001226 	beq	r6,zero,11204 <memmove+0x60>
   111bc:	397fffc3 	ldbu	r5,-1(r7)
   111c0:	18ffffc4 	addi	r3,r3,-1
   111c4:	39ffffc4 	addi	r7,r7,-1
   111c8:	19400005 	stb	r5,0(r3)
   111cc:	10fffb1e 	bne	r2,r3,111bc <memmove+0x18>
   111d0:	f800283a 	ret
   111d4:	30c00428 	cmpgeui	r3,r6,16
   111d8:	18000b1e 	bne	r3,zero,11208 <memmove+0x64>
   111dc:	1007883a 	mov	r3,r2
   111e0:	31ffffc4 	addi	r7,r6,-1
   111e4:	30003626 	beq	r6,zero,112c0 <memmove+0x11c>
   111e8:	39c00044 	addi	r7,r7,1
   111ec:	19cf883a 	add	r7,r3,r7
   111f0:	29800003 	ldbu	r6,0(r5)
   111f4:	18c00044 	addi	r3,r3,1
   111f8:	29400044 	addi	r5,r5,1
   111fc:	19bfffc5 	stb	r6,-1(r3)
   11200:	19fffb1e 	bne	r3,r7,111f0 <memmove+0x4c>
   11204:	f800283a 	ret
   11208:	1146b03a 	or	r3,r2,r5
   1120c:	18c000cc 	andi	r3,r3,3
   11210:	1800281e 	bne	r3,zero,112b4 <memmove+0x110>
   11214:	313ffc04 	addi	r4,r6,-16
   11218:	2008d13a 	srli	r4,r4,4
   1121c:	2811883a 	mov	r8,r5
   11220:	100f883a 	mov	r7,r2
   11224:	21000044 	addi	r4,r4,1
   11228:	2008913a 	slli	r4,r4,4
   1122c:	1107883a 	add	r3,r2,r4
   11230:	42400017 	ldw	r9,0(r8)
   11234:	42000404 	addi	r8,r8,16
   11238:	39c00404 	addi	r7,r7,16
   1123c:	3a7ffc15 	stw	r9,-16(r7)
   11240:	427ffd17 	ldw	r9,-12(r8)
   11244:	3a7ffd15 	stw	r9,-12(r7)
   11248:	427ffe17 	ldw	r9,-8(r8)
   1124c:	3a7ffe15 	stw	r9,-8(r7)
   11250:	427fff17 	ldw	r9,-4(r8)
   11254:	3a7fff15 	stw	r9,-4(r7)
   11258:	38fff51e 	bne	r7,r3,11230 <memmove+0x8c>
   1125c:	31c0030c 	andi	r7,r6,12
   11260:	290b883a 	add	r5,r5,r4
   11264:	324003cc 	andi	r9,r6,15
   11268:	38001626 	beq	r7,zero,112c4 <memmove+0x120>
   1126c:	2809883a 	mov	r4,r5
   11270:	180f883a 	mov	r7,r3
   11274:	1a57883a 	add	r11,r3,r9
   11278:	22800017 	ldw	r10,0(r4)
   1127c:	39c00104 	addi	r7,r7,4
   11280:	59d1c83a 	sub	r8,r11,r7
   11284:	42000128 	cmpgeui	r8,r8,4
   11288:	3abfff15 	stw	r10,-4(r7)
   1128c:	21000104 	addi	r4,r4,4
   11290:	403ff91e 	bne	r8,zero,11278 <memmove+0xd4>
   11294:	493fff04 	addi	r4,r9,-4
   11298:	2008d0ba 	srli	r4,r4,2
   1129c:	318000cc 	andi	r6,r6,3
   112a0:	21000044 	addi	r4,r4,1
   112a4:	200890ba 	slli	r4,r4,2
   112a8:	1907883a 	add	r3,r3,r4
   112ac:	290b883a 	add	r5,r5,r4
   112b0:	003fcb06 	br	111e0 <memmove+0x3c>
   112b4:	31ffffc4 	addi	r7,r6,-1
   112b8:	1007883a 	mov	r3,r2
   112bc:	003fca06 	br	111e8 <memmove+0x44>
   112c0:	f800283a 	ret
   112c4:	480d883a 	mov	r6,r9
   112c8:	003fc506 	br	111e0 <memmove+0x3c>

000112cc <memset>:
   112cc:	defffb04 	addi	sp,sp,-20
   112d0:	dc800215 	stw	r18,8(sp)
   112d4:	dc400115 	stw	r17,4(sp)
   112d8:	dfc00415 	stw	ra,16(sp)
   112dc:	dcc00315 	stw	r19,12(sp)
   112e0:	dc000015 	stw	r16,0(sp)
   112e4:	208000cc 	andi	r2,r4,3
   112e8:	2023883a 	mov	r17,r4
   112ec:	2825883a 	mov	r18,r5
   112f0:	10004026 	beq	r2,zero,113f4 <memset+0x128>
   112f4:	34ffffc4 	addi	r19,r6,-1
   112f8:	30003326 	beq	r6,zero,113c8 <memset+0xfc>
   112fc:	280f883a 	mov	r7,r5
   11300:	2021883a 	mov	r16,r4
   11304:	00000306 	br	11314 <memset+0x48>
   11308:	9cffffc4 	addi	r19,r19,-1
   1130c:	99bfffe0 	cmpeqi	r6,r19,-1
   11310:	30002d1e 	bne	r6,zero,113c8 <memset+0xfc>
   11314:	84000044 	addi	r16,r16,1
   11318:	818000cc 	andi	r6,r16,3
   1131c:	81ffffc5 	stb	r7,-1(r16)
   11320:	303ff91e 	bne	r6,zero,11308 <memset+0x3c>
   11324:	98800128 	cmpgeui	r2,r19,4
   11328:	10002126 	beq	r2,zero,113b0 <memset+0xe4>
   1132c:	01404074 	movhi	r5,257
   11330:	29404044 	addi	r5,r5,257
   11334:	91003fcc 	andi	r4,r18,255
   11338:	00132680 	call	13268 <__mulsi3>
   1133c:	98c00430 	cmpltui	r3,r19,16
   11340:	18002f1e 	bne	r3,zero,11400 <memset+0x134>
   11344:	99bffc04 	addi	r6,r19,-16
   11348:	300cd13a 	srli	r6,r6,4
   1134c:	31800044 	addi	r6,r6,1
   11350:	300c913a 	slli	r6,r6,4
   11354:	818d883a 	add	r6,r16,r6
   11358:	80800015 	stw	r2,0(r16)
   1135c:	80800115 	stw	r2,4(r16)
   11360:	80800215 	stw	r2,8(r16)
   11364:	80800315 	stw	r2,12(r16)
   11368:	84000404 	addi	r16,r16,16
   1136c:	81bffa1e 	bne	r16,r6,11358 <memset+0x8c>
   11370:	9900030c 	andi	r4,r19,12
   11374:	98c003cc 	andi	r3,r19,15
   11378:	20001b26 	beq	r4,zero,113e8 <memset+0x11c>
   1137c:	3009883a 	mov	r4,r6
   11380:	30cb883a 	add	r5,r6,r3
   11384:	21000104 	addi	r4,r4,4
   11388:	290fc83a 	sub	r7,r5,r4
   1138c:	39c00128 	cmpgeui	r7,r7,4
   11390:	20bfff15 	stw	r2,-4(r4)
   11394:	383ffb1e 	bne	r7,zero,11384 <memset+0xb8>
   11398:	1c3fff04 	addi	r16,r3,-4
   1139c:	8020d0ba 	srli	r16,r16,2
   113a0:	1cc000cc 	andi	r19,r3,3
   113a4:	84000044 	addi	r16,r16,1
   113a8:	802090ba 	slli	r16,r16,2
   113ac:	3421883a 	add	r16,r6,r16
   113b0:	98000526 	beq	r19,zero,113c8 <memset+0xfc>
   113b4:	900b883a 	mov	r5,r18
   113b8:	84c7883a 	add	r3,r16,r19
   113bc:	84000044 	addi	r16,r16,1
   113c0:	817fffc5 	stb	r5,-1(r16)
   113c4:	1c3ffd1e 	bne	r3,r16,113bc <memset+0xf0>
   113c8:	8805883a 	mov	r2,r17
   113cc:	dfc00417 	ldw	ra,16(sp)
   113d0:	dcc00317 	ldw	r19,12(sp)
   113d4:	dc800217 	ldw	r18,8(sp)
   113d8:	dc400117 	ldw	r17,4(sp)
   113dc:	dc000017 	ldw	r16,0(sp)
   113e0:	dec00504 	addi	sp,sp,20
   113e4:	f800283a 	ret
   113e8:	1827883a 	mov	r19,r3
   113ec:	983ff11e 	bne	r19,zero,113b4 <memset+0xe8>
   113f0:	003ff506 	br	113c8 <memset+0xfc>
   113f4:	2021883a 	mov	r16,r4
   113f8:	3027883a 	mov	r19,r6
   113fc:	003fc906 	br	11324 <memset+0x58>
   11400:	800d883a 	mov	r6,r16
   11404:	9807883a 	mov	r3,r19
   11408:	003fdc06 	br	1137c <memset+0xb0>

0001140c <_close_r>:
   1140c:	defffe04 	addi	sp,sp,-8
   11410:	dc000015 	stw	r16,0(sp)
   11414:	008000b4 	movhi	r2,2
   11418:	2021883a 	mov	r16,r4
   1141c:	2809883a 	mov	r4,r5
   11420:	dfc00115 	stw	ra,4(sp)
   11424:	10219315 	stw	zero,-31156(r2)
   11428:	00132cc0 	call	132cc <close>
   1142c:	10ffffd8 	cmpnei	r3,r2,-1
   11430:	18000426 	beq	r3,zero,11444 <_close_r+0x38>
   11434:	dfc00117 	ldw	ra,4(sp)
   11438:	dc000017 	ldw	r16,0(sp)
   1143c:	dec00204 	addi	sp,sp,8
   11440:	f800283a 	ret
   11444:	00c000b4 	movhi	r3,2
   11448:	18e19317 	ldw	r3,-31156(r3)
   1144c:	183ff926 	beq	r3,zero,11434 <_close_r+0x28>
   11450:	80c00015 	stw	r3,0(r16)
   11454:	dfc00117 	ldw	ra,4(sp)
   11458:	dc000017 	ldw	r16,0(sp)
   1145c:	dec00204 	addi	sp,sp,8
   11460:	f800283a 	ret

00011464 <_reclaim_reent>:
   11464:	00800074 	movhi	r2,1
   11468:	109bab17 	ldw	r2,28332(r2)
   1146c:	11002e26 	beq	r2,r4,11528 <_reclaim_reent+0xc4>
   11470:	21401117 	ldw	r5,68(r4)
   11474:	defffc04 	addi	sp,sp,-16
   11478:	dc400115 	stw	r17,4(sp)
   1147c:	dfc00315 	stw	ra,12(sp)
   11480:	dc800215 	stw	r18,8(sp)
   11484:	dc000015 	stw	r16,0(sp)
   11488:	2023883a 	mov	r17,r4
   1148c:	28000f26 	beq	r5,zero,114cc <_reclaim_reent+0x68>
   11490:	0025883a 	mov	r18,zero
   11494:	2c85883a 	add	r2,r5,r18
   11498:	14000017 	ldw	r16,0(r2)
   1149c:	80000626 	beq	r16,zero,114b8 <_reclaim_reent+0x54>
   114a0:	800b883a 	mov	r5,r16
   114a4:	84000017 	ldw	r16,0(r16)
   114a8:	8809883a 	mov	r4,r17
   114ac:	00117ac0 	call	117ac <_free_r>
   114b0:	803ffb1e 	bne	r16,zero,114a0 <_reclaim_reent+0x3c>
   114b4:	89401117 	ldw	r5,68(r17)
   114b8:	94800104 	addi	r18,r18,4
   114bc:	90802018 	cmpnei	r2,r18,128
   114c0:	103ff41e 	bne	r2,zero,11494 <_reclaim_reent+0x30>
   114c4:	8809883a 	mov	r4,r17
   114c8:	00117ac0 	call	117ac <_free_r>
   114cc:	89400e17 	ldw	r5,56(r17)
   114d0:	28000226 	beq	r5,zero,114dc <_reclaim_reent+0x78>
   114d4:	8809883a 	mov	r4,r17
   114d8:	00117ac0 	call	117ac <_free_r>
   114dc:	89401317 	ldw	r5,76(r17)
   114e0:	28000226 	beq	r5,zero,114ec <_reclaim_reent+0x88>
   114e4:	8809883a 	mov	r4,r17
   114e8:	00117ac0 	call	117ac <_free_r>
   114ec:	88800d17 	ldw	r2,52(r17)
   114f0:	10000726 	beq	r2,zero,11510 <_reclaim_reent+0xac>
   114f4:	8809883a 	mov	r4,r17
   114f8:	dfc00317 	ldw	ra,12(sp)
   114fc:	dc800217 	ldw	r18,8(sp)
   11500:	dc400117 	ldw	r17,4(sp)
   11504:	dc000017 	ldw	r16,0(sp)
   11508:	dec00404 	addi	sp,sp,16
   1150c:	1000683a 	jmp	r2
   11510:	dfc00317 	ldw	ra,12(sp)
   11514:	dc800217 	ldw	r18,8(sp)
   11518:	dc400117 	ldw	r17,4(sp)
   1151c:	dc000017 	ldw	r16,0(sp)
   11520:	dec00404 	addi	sp,sp,16
   11524:	f800283a 	ret
   11528:	f800283a 	ret

0001152c <_lseek_r>:
   1152c:	2807883a 	mov	r3,r5
   11530:	defffe04 	addi	sp,sp,-8
   11534:	dc000015 	stw	r16,0(sp)
   11538:	300b883a 	mov	r5,r6
   1153c:	008000b4 	movhi	r2,2
   11540:	380d883a 	mov	r6,r7
   11544:	2021883a 	mov	r16,r4
   11548:	1809883a 	mov	r4,r3
   1154c:	dfc00115 	stw	ra,4(sp)
   11550:	10219315 	stw	zero,-31156(r2)
   11554:	001371c0 	call	1371c <lseek>
   11558:	10ffffd8 	cmpnei	r3,r2,-1
   1155c:	18000426 	beq	r3,zero,11570 <_lseek_r+0x44>
   11560:	dfc00117 	ldw	ra,4(sp)
   11564:	dc000017 	ldw	r16,0(sp)
   11568:	dec00204 	addi	sp,sp,8
   1156c:	f800283a 	ret
   11570:	00c000b4 	movhi	r3,2
   11574:	18e19317 	ldw	r3,-31156(r3)
   11578:	183ff926 	beq	r3,zero,11560 <_lseek_r+0x34>
   1157c:	80c00015 	stw	r3,0(r16)
   11580:	dfc00117 	ldw	ra,4(sp)
   11584:	dc000017 	ldw	r16,0(sp)
   11588:	dec00204 	addi	sp,sp,8
   1158c:	f800283a 	ret

00011590 <_read_r>:
   11590:	2807883a 	mov	r3,r5
   11594:	defffe04 	addi	sp,sp,-8
   11598:	dc000015 	stw	r16,0(sp)
   1159c:	300b883a 	mov	r5,r6
   115a0:	008000b4 	movhi	r2,2
   115a4:	380d883a 	mov	r6,r7
   115a8:	2021883a 	mov	r16,r4
   115ac:	1809883a 	mov	r4,r3
   115b0:	dfc00115 	stw	ra,4(sp)
   115b4:	10219315 	stw	zero,-31156(r2)
   115b8:	00138fc0 	call	138fc <read>
   115bc:	10ffffd8 	cmpnei	r3,r2,-1
   115c0:	18000426 	beq	r3,zero,115d4 <_read_r+0x44>
   115c4:	dfc00117 	ldw	ra,4(sp)
   115c8:	dc000017 	ldw	r16,0(sp)
   115cc:	dec00204 	addi	sp,sp,8
   115d0:	f800283a 	ret
   115d4:	00c000b4 	movhi	r3,2
   115d8:	18e19317 	ldw	r3,-31156(r3)
   115dc:	183ff926 	beq	r3,zero,115c4 <_read_r+0x34>
   115e0:	80c00015 	stw	r3,0(r16)
   115e4:	dfc00117 	ldw	ra,4(sp)
   115e8:	dc000017 	ldw	r16,0(sp)
   115ec:	dec00204 	addi	sp,sp,8
   115f0:	f800283a 	ret

000115f4 <_write_r>:
   115f4:	2807883a 	mov	r3,r5
   115f8:	defffe04 	addi	sp,sp,-8
   115fc:	dc000015 	stw	r16,0(sp)
   11600:	300b883a 	mov	r5,r6
   11604:	008000b4 	movhi	r2,2
   11608:	380d883a 	mov	r6,r7
   1160c:	2021883a 	mov	r16,r4
   11610:	1809883a 	mov	r4,r3
   11614:	dfc00115 	stw	ra,4(sp)
   11618:	10219315 	stw	zero,-31156(r2)
   1161c:	0013b680 	call	13b68 <write>
   11620:	10ffffd8 	cmpnei	r3,r2,-1
   11624:	18000426 	beq	r3,zero,11638 <_write_r+0x44>
   11628:	dfc00117 	ldw	ra,4(sp)
   1162c:	dc000017 	ldw	r16,0(sp)
   11630:	dec00204 	addi	sp,sp,8
   11634:	f800283a 	ret
   11638:	00c000b4 	movhi	r3,2
   1163c:	18e19317 	ldw	r3,-31156(r3)
   11640:	183ff926 	beq	r3,zero,11628 <_write_r+0x34>
   11644:	80c00015 	stw	r3,0(r16)
   11648:	dfc00117 	ldw	ra,4(sp)
   1164c:	dc000017 	ldw	r16,0(sp)
   11650:	dec00204 	addi	sp,sp,8
   11654:	f800283a 	ret

00011658 <exit>:
   11658:	defffe04 	addi	sp,sp,-8
   1165c:	000b883a 	mov	r5,zero
   11660:	dc000015 	stw	r16,0(sp)
   11664:	dfc00115 	stw	ra,4(sp)
   11668:	2021883a 	mov	r16,r4
   1166c:	0012f9c0 	call	12f9c <__call_exitprocs>
   11670:	008000b4 	movhi	r2,2
   11674:	10a19417 	ldw	r2,-31152(r2)
   11678:	10000126 	beq	r2,zero,11680 <exit+0x28>
   1167c:	103ee83a 	callr	r2
   11680:	8009883a 	mov	r4,r16
   11684:	00133d40 	call	133d4 <_exit>

00011688 <_malloc_trim_r>:
   11688:	defffa04 	addi	sp,sp,-24
   1168c:	dcc00315 	stw	r19,12(sp)
   11690:	04c00074 	movhi	r19,1
   11694:	dd000415 	stw	r20,16(sp)
   11698:	dc800215 	stw	r18,8(sp)
   1169c:	dc400115 	stw	r17,4(sp)
   116a0:	dc000015 	stw	r16,0(sp)
   116a4:	2829883a 	mov	r20,r5
   116a8:	dfc00515 	stw	ra,20(sp)
   116ac:	9cd62704 	addi	r19,r19,22684
   116b0:	2025883a 	mov	r18,r4
   116b4:	00138780 	call	13878 <__malloc_lock>
   116b8:	98800217 	ldw	r2,8(r19)
   116bc:	14400117 	ldw	r17,4(r2)
   116c0:	00bfff04 	movi	r2,-4
   116c4:	88a2703a 	and	r17,r17,r2
   116c8:	8c03fbc4 	addi	r16,r17,4079
   116cc:	8521c83a 	sub	r16,r16,r20
   116d0:	8020d33a 	srli	r16,r16,12
   116d4:	843fffc4 	addi	r16,r16,-1
   116d8:	8020933a 	slli	r16,r16,12
   116dc:	80840008 	cmpgei	r2,r16,4096
   116e0:	10000626 	beq	r2,zero,116fc <_malloc_trim_r+0x74>
   116e4:	000b883a 	mov	r5,zero
   116e8:	9009883a 	mov	r4,r18
   116ec:	0012f440 	call	12f44 <_sbrk_r>
   116f0:	98c00217 	ldw	r3,8(r19)
   116f4:	1c47883a 	add	r3,r3,r17
   116f8:	10c00b26 	beq	r2,r3,11728 <_malloc_trim_r+0xa0>
   116fc:	9009883a 	mov	r4,r18
   11700:	001389c0 	call	1389c <__malloc_unlock>
   11704:	0005883a 	mov	r2,zero
   11708:	dfc00517 	ldw	ra,20(sp)
   1170c:	dd000417 	ldw	r20,16(sp)
   11710:	dcc00317 	ldw	r19,12(sp)
   11714:	dc800217 	ldw	r18,8(sp)
   11718:	dc400117 	ldw	r17,4(sp)
   1171c:	dc000017 	ldw	r16,0(sp)
   11720:	dec00604 	addi	sp,sp,24
   11724:	f800283a 	ret
   11728:	040bc83a 	sub	r5,zero,r16
   1172c:	9009883a 	mov	r4,r18
   11730:	0012f440 	call	12f44 <_sbrk_r>
   11734:	10bfffd8 	cmpnei	r2,r2,-1
   11738:	10000d26 	beq	r2,zero,11770 <_malloc_trim_r+0xe8>
   1173c:	008000b4 	movhi	r2,2
   11740:	10a1ef17 	ldw	r2,-30788(r2)
   11744:	98c00217 	ldw	r3,8(r19)
   11748:	8c23c83a 	sub	r17,r17,r16
   1174c:	8c400054 	ori	r17,r17,1
   11750:	1405c83a 	sub	r2,r2,r16
   11754:	1c400115 	stw	r17,4(r3)
   11758:	9009883a 	mov	r4,r18
   1175c:	00c000b4 	movhi	r3,2
   11760:	18a1ef15 	stw	r2,-30788(r3)
   11764:	001389c0 	call	1389c <__malloc_unlock>
   11768:	00800044 	movi	r2,1
   1176c:	003fe606 	br	11708 <_malloc_trim_r+0x80>
   11770:	000b883a 	mov	r5,zero
   11774:	9009883a 	mov	r4,r18
   11778:	0012f440 	call	12f44 <_sbrk_r>
   1177c:	99000217 	ldw	r4,8(r19)
   11780:	1107c83a 	sub	r3,r2,r4
   11784:	19400410 	cmplti	r5,r3,16
   11788:	283fdc1e 	bne	r5,zero,116fc <_malloc_trim_r+0x74>
   1178c:	01400074 	movhi	r5,1
   11790:	295bac17 	ldw	r5,28336(r5)
   11794:	18c00054 	ori	r3,r3,1
   11798:	20c00115 	stw	r3,4(r4)
   1179c:	1145c83a 	sub	r2,r2,r5
   117a0:	014000b4 	movhi	r5,2
   117a4:	28a1ef15 	stw	r2,-30788(r5)
   117a8:	003fd406 	br	116fc <_malloc_trim_r+0x74>

000117ac <_free_r>:
   117ac:	28005f26 	beq	r5,zero,1192c <_free_r+0x180>
   117b0:	defffd04 	addi	sp,sp,-12
   117b4:	dc400115 	stw	r17,4(sp)
   117b8:	dc000015 	stw	r16,0(sp)
   117bc:	2023883a 	mov	r17,r4
   117c0:	2821883a 	mov	r16,r5
   117c4:	dfc00215 	stw	ra,8(sp)
   117c8:	00138780 	call	13878 <__malloc_lock>
   117cc:	81ffff17 	ldw	r7,-4(r16)
   117d0:	00bfff84 	movi	r2,-2
   117d4:	80fffe04 	addi	r3,r16,-8
   117d8:	3884703a 	and	r2,r7,r2
   117dc:	01800074 	movhi	r6,1
   117e0:	1889883a 	add	r4,r3,r2
   117e4:	31962704 	addi	r6,r6,22684
   117e8:	21400117 	ldw	r5,4(r4)
   117ec:	32000217 	ldw	r8,8(r6)
   117f0:	027fff04 	movi	r9,-4
   117f4:	2a4a703a 	and	r5,r5,r9
   117f8:	41006526 	beq	r8,r4,11990 <_free_r+0x1e4>
   117fc:	21400115 	stw	r5,4(r4)
   11800:	39c0004c 	andi	r7,r7,1
   11804:	2151883a 	add	r8,r4,r5
   11808:	3800281e 	bne	r7,zero,118ac <_free_r+0x100>
   1180c:	82bffe17 	ldw	r10,-8(r16)
   11810:	42000117 	ldw	r8,4(r8)
   11814:	01c00074 	movhi	r7,1
   11818:	1a87c83a 	sub	r3,r3,r10
   1181c:	1a400217 	ldw	r9,8(r3)
   11820:	39d62904 	addi	r7,r7,22692
   11824:	1285883a 	add	r2,r2,r10
   11828:	4200004c 	andi	r8,r8,1
   1182c:	49c04d26 	beq	r9,r7,11964 <_free_r+0x1b8>
   11830:	1a800317 	ldw	r10,12(r3)
   11834:	4a800315 	stw	r10,12(r9)
   11838:	52400215 	stw	r9,8(r10)
   1183c:	40006926 	beq	r8,zero,119e4 <_free_r+0x238>
   11840:	11400054 	ori	r5,r2,1
   11844:	19400115 	stw	r5,4(r3)
   11848:	20800015 	stw	r2,0(r4)
   1184c:	11008028 	cmpgeui	r4,r2,512
   11850:	20001e1e 	bne	r4,zero,118cc <_free_r+0x120>
   11854:	1008d0fa 	srli	r4,r2,3
   11858:	100ad17a 	srli	r5,r2,5
   1185c:	31c00117 	ldw	r7,4(r6)
   11860:	20800044 	addi	r2,r4,1
   11864:	100490fa 	slli	r2,r2,3
   11868:	01000044 	movi	r4,1
   1186c:	2148983a 	sll	r4,r4,r5
   11870:	3085883a 	add	r2,r6,r2
   11874:	11400017 	ldw	r5,0(r2)
   11878:	21c8b03a 	or	r4,r4,r7
   1187c:	11fffe04 	addi	r7,r2,-8
   11880:	19c00315 	stw	r7,12(r3)
   11884:	19400215 	stw	r5,8(r3)
   11888:	31000115 	stw	r4,4(r6)
   1188c:	10c00015 	stw	r3,0(r2)
   11890:	28c00315 	stw	r3,12(r5)
   11894:	8809883a 	mov	r4,r17
   11898:	dfc00217 	ldw	ra,8(sp)
   1189c:	dc400117 	ldw	r17,4(sp)
   118a0:	dc000017 	ldw	r16,0(sp)
   118a4:	dec00304 	addi	sp,sp,12
   118a8:	001389c1 	jmpi	1389c <__malloc_unlock>
   118ac:	41c00117 	ldw	r7,4(r8)
   118b0:	39c0004c 	andi	r7,r7,1
   118b4:	38001e26 	beq	r7,zero,11930 <_free_r+0x184>
   118b8:	11400054 	ori	r5,r2,1
   118bc:	817fff15 	stw	r5,-4(r16)
   118c0:	20800015 	stw	r2,0(r4)
   118c4:	11008028 	cmpgeui	r4,r2,512
   118c8:	203fe226 	beq	r4,zero,11854 <_free_r+0xa8>
   118cc:	1008d27a 	srli	r4,r2,9
   118d0:	21400168 	cmpgeui	r5,r4,5
   118d4:	2800451e 	bne	r5,zero,119ec <_free_r+0x240>
   118d8:	1008d1ba 	srli	r4,r2,6
   118dc:	21c00e44 	addi	r7,r4,57
   118e0:	380e90fa 	slli	r7,r7,3
   118e4:	21000e04 	addi	r4,r4,56
   118e8:	31cf883a 	add	r7,r6,r7
   118ec:	39400017 	ldw	r5,0(r7)
   118f0:	39fffe04 	addi	r7,r7,-8
   118f4:	39405326 	beq	r7,r5,11a44 <_free_r+0x298>
   118f8:	01bfff04 	movi	r6,-4
   118fc:	00000206 	br	11908 <_free_r+0x15c>
   11900:	29400217 	ldw	r5,8(r5)
   11904:	39400326 	beq	r7,r5,11914 <_free_r+0x168>
   11908:	29000117 	ldw	r4,4(r5)
   1190c:	2188703a 	and	r4,r4,r6
   11910:	113ffb36 	bltu	r2,r4,11900 <_free_r+0x154>
   11914:	29c00317 	ldw	r7,12(r5)
   11918:	19c00315 	stw	r7,12(r3)
   1191c:	19400215 	stw	r5,8(r3)
   11920:	38c00215 	stw	r3,8(r7)
   11924:	28c00315 	stw	r3,12(r5)
   11928:	003fda06 	br	11894 <_free_r+0xe8>
   1192c:	f800283a 	ret
   11930:	01c00074 	movhi	r7,1
   11934:	1145883a 	add	r2,r2,r5
   11938:	39d62904 	addi	r7,r7,22692
   1193c:	21400217 	ldw	r5,8(r4)
   11940:	29c03726 	beq	r5,r7,11a20 <_free_r+0x274>
   11944:	22000317 	ldw	r8,12(r4)
   11948:	11c00054 	ori	r7,r2,1
   1194c:	1889883a 	add	r4,r3,r2
   11950:	2a000315 	stw	r8,12(r5)
   11954:	41400215 	stw	r5,8(r8)
   11958:	19c00115 	stw	r7,4(r3)
   1195c:	20800015 	stw	r2,0(r4)
   11960:	003fba06 	br	1184c <_free_r+0xa0>
   11964:	40004f1e 	bne	r8,zero,11aa4 <_free_r+0x2f8>
   11968:	21800217 	ldw	r6,8(r4)
   1196c:	21000317 	ldw	r4,12(r4)
   11970:	288b883a 	add	r5,r5,r2
   11974:	28800054 	ori	r2,r5,1
   11978:	31000315 	stw	r4,12(r6)
   1197c:	21800215 	stw	r6,8(r4)
   11980:	18800115 	stw	r2,4(r3)
   11984:	1947883a 	add	r3,r3,r5
   11988:	19400015 	stw	r5,0(r3)
   1198c:	003fc106 	br	11894 <_free_r+0xe8>
   11990:	39c0004c 	andi	r7,r7,1
   11994:	114b883a 	add	r5,r2,r5
   11998:	3800071e 	bne	r7,zero,119b8 <_free_r+0x20c>
   1199c:	81fffe17 	ldw	r7,-8(r16)
   119a0:	19c7c83a 	sub	r3,r3,r7
   119a4:	18800317 	ldw	r2,12(r3)
   119a8:	19000217 	ldw	r4,8(r3)
   119ac:	29cb883a 	add	r5,r5,r7
   119b0:	20800315 	stw	r2,12(r4)
   119b4:	11000215 	stw	r4,8(r2)
   119b8:	00800074 	movhi	r2,1
   119bc:	29000054 	ori	r4,r5,1
   119c0:	109bad17 	ldw	r2,28340(r2)
   119c4:	19000115 	stw	r4,4(r3)
   119c8:	30c00215 	stw	r3,8(r6)
   119cc:	28bfb136 	bltu	r5,r2,11894 <_free_r+0xe8>
   119d0:	008000b4 	movhi	r2,2
   119d4:	11619717 	ldw	r5,-31140(r2)
   119d8:	8809883a 	mov	r4,r17
   119dc:	00116880 	call	11688 <_malloc_trim_r>
   119e0:	003fac06 	br	11894 <_free_r+0xe8>
   119e4:	1145883a 	add	r2,r2,r5
   119e8:	003fd406 	br	1193c <_free_r+0x190>
   119ec:	21400568 	cmpgeui	r5,r4,21
   119f0:	28000726 	beq	r5,zero,11a10 <_free_r+0x264>
   119f4:	21401568 	cmpgeui	r5,r4,85
   119f8:	2800191e 	bne	r5,zero,11a60 <_free_r+0x2b4>
   119fc:	1008d33a 	srli	r4,r2,12
   11a00:	21c01bc4 	addi	r7,r4,111
   11a04:	380e90fa 	slli	r7,r7,3
   11a08:	21001b84 	addi	r4,r4,110
   11a0c:	003fb606 	br	118e8 <_free_r+0x13c>
   11a10:	21c01704 	addi	r7,r4,92
   11a14:	380e90fa 	slli	r7,r7,3
   11a18:	210016c4 	addi	r4,r4,91
   11a1c:	003fb206 	br	118e8 <_free_r+0x13c>
   11a20:	30c00515 	stw	r3,20(r6)
   11a24:	30c00415 	stw	r3,16(r6)
   11a28:	11000054 	ori	r4,r2,1
   11a2c:	19c00315 	stw	r7,12(r3)
   11a30:	19c00215 	stw	r7,8(r3)
   11a34:	19000115 	stw	r4,4(r3)
   11a38:	1887883a 	add	r3,r3,r2
   11a3c:	18800015 	stw	r2,0(r3)
   11a40:	003f9406 	br	11894 <_free_r+0xe8>
   11a44:	2009d0ba 	srai	r4,r4,2
   11a48:	00800044 	movi	r2,1
   11a4c:	32000117 	ldw	r8,4(r6)
   11a50:	1104983a 	sll	r2,r2,r4
   11a54:	1204b03a 	or	r2,r2,r8
   11a58:	30800115 	stw	r2,4(r6)
   11a5c:	003fae06 	br	11918 <_free_r+0x16c>
   11a60:	21405568 	cmpgeui	r5,r4,341
   11a64:	2800051e 	bne	r5,zero,11a7c <_free_r+0x2d0>
   11a68:	1008d3fa 	srli	r4,r2,15
   11a6c:	21c01e04 	addi	r7,r4,120
   11a70:	380e90fa 	slli	r7,r7,3
   11a74:	21001dc4 	addi	r4,r4,119
   11a78:	003f9b06 	br	118e8 <_free_r+0x13c>
   11a7c:	21015568 	cmpgeui	r4,r4,1365
   11a80:	2000051e 	bne	r4,zero,11a98 <_free_r+0x2ec>
   11a84:	1008d4ba 	srli	r4,r2,18
   11a88:	21c01f44 	addi	r7,r4,125
   11a8c:	380e90fa 	slli	r7,r7,3
   11a90:	21001f04 	addi	r4,r4,124
   11a94:	003f9406 	br	118e8 <_free_r+0x13c>
   11a98:	01c0fe04 	movi	r7,1016
   11a9c:	01001f84 	movi	r4,126
   11aa0:	003f9106 	br	118e8 <_free_r+0x13c>
   11aa4:	11400054 	ori	r5,r2,1
   11aa8:	19400115 	stw	r5,4(r3)
   11aac:	20800015 	stw	r2,0(r4)
   11ab0:	003f7806 	br	11894 <_free_r+0xe8>

00011ab4 <_malloc_r>:
   11ab4:	defff604 	addi	sp,sp,-40
   11ab8:	dc400115 	stw	r17,4(sp)
   11abc:	2c4002c4 	addi	r17,r5,11
   11ac0:	dc800215 	stw	r18,8(sp)
   11ac4:	dfc00915 	stw	ra,36(sp)
   11ac8:	df000815 	stw	fp,32(sp)
   11acc:	ddc00715 	stw	r23,28(sp)
   11ad0:	dd800615 	stw	r22,24(sp)
   11ad4:	dd400515 	stw	r21,20(sp)
   11ad8:	dd000415 	stw	r20,16(sp)
   11adc:	dcc00315 	stw	r19,12(sp)
   11ae0:	dc000015 	stw	r16,0(sp)
   11ae4:	888005e8 	cmpgeui	r2,r17,23
   11ae8:	2025883a 	mov	r18,r4
   11aec:	1000261e 	bne	r2,zero,11b88 <_malloc_r+0xd4>
   11af0:	29400468 	cmpgeui	r5,r5,17
   11af4:	28008e1e 	bne	r5,zero,11d30 <_malloc_r+0x27c>
   11af8:	00138780 	call	13878 <__malloc_lock>
   11afc:	04400404 	movi	r17,16
   11b00:	00800604 	movi	r2,24
   11b04:	01c00084 	movi	r7,2
   11b08:	04c00074 	movhi	r19,1
   11b0c:	9cd62704 	addi	r19,r19,22684
   11b10:	9885883a 	add	r2,r19,r2
   11b14:	14000117 	ldw	r16,4(r2)
   11b18:	10fffe04 	addi	r3,r2,-8
   11b1c:	80c0d026 	beq	r16,r3,11e60 <_malloc_r+0x3ac>
   11b20:	80800117 	ldw	r2,4(r16)
   11b24:	81000317 	ldw	r4,12(r16)
   11b28:	81400217 	ldw	r5,8(r16)
   11b2c:	00ffff04 	movi	r3,-4
   11b30:	10c4703a 	and	r2,r2,r3
   11b34:	8085883a 	add	r2,r16,r2
   11b38:	10c00117 	ldw	r3,4(r2)
   11b3c:	29000315 	stw	r4,12(r5)
   11b40:	21400215 	stw	r5,8(r4)
   11b44:	18c00054 	ori	r3,r3,1
   11b48:	10c00115 	stw	r3,4(r2)
   11b4c:	9009883a 	mov	r4,r18
   11b50:	001389c0 	call	1389c <__malloc_unlock>
   11b54:	80800204 	addi	r2,r16,8
   11b58:	dfc00917 	ldw	ra,36(sp)
   11b5c:	df000817 	ldw	fp,32(sp)
   11b60:	ddc00717 	ldw	r23,28(sp)
   11b64:	dd800617 	ldw	r22,24(sp)
   11b68:	dd400517 	ldw	r21,20(sp)
   11b6c:	dd000417 	ldw	r20,16(sp)
   11b70:	dcc00317 	ldw	r19,12(sp)
   11b74:	dc800217 	ldw	r18,8(sp)
   11b78:	dc400117 	ldw	r17,4(sp)
   11b7c:	dc000017 	ldw	r16,0(sp)
   11b80:	dec00a04 	addi	sp,sp,40
   11b84:	f800283a 	ret
   11b88:	00bffe04 	movi	r2,-8
   11b8c:	88a2703a 	and	r17,r17,r2
   11b90:	88006716 	blt	r17,zero,11d30 <_malloc_r+0x27c>
   11b94:	89406636 	bltu	r17,r5,11d30 <_malloc_r+0x27c>
   11b98:	00138780 	call	13878 <__malloc_lock>
   11b9c:	88807e28 	cmpgeui	r2,r17,504
   11ba0:	1000f426 	beq	r2,zero,11f74 <_malloc_r+0x4c0>
   11ba4:	8804d27a 	srli	r2,r17,9
   11ba8:	10006526 	beq	r2,zero,11d40 <_malloc_r+0x28c>
   11bac:	10c00168 	cmpgeui	r3,r2,5
   11bb0:	1800c81e 	bne	r3,zero,11ed4 <_malloc_r+0x420>
   11bb4:	8804d1ba 	srli	r2,r17,6
   11bb8:	11c00e44 	addi	r7,r2,57
   11bbc:	380890fa 	slli	r4,r7,3
   11bc0:	12000e04 	addi	r8,r2,56
   11bc4:	04c00074 	movhi	r19,1
   11bc8:	9cd62704 	addi	r19,r19,22684
   11bcc:	9909883a 	add	r4,r19,r4
   11bd0:	24000117 	ldw	r16,4(r4)
   11bd4:	213ffe04 	addi	r4,r4,-8
   11bd8:	24000c26 	beq	r4,r16,11c0c <_malloc_r+0x158>
   11bdc:	01bfff04 	movi	r6,-4
   11be0:	00000406 	br	11bf4 <_malloc_r+0x140>
   11be4:	81400317 	ldw	r5,12(r16)
   11be8:	1800970e 	bge	r3,zero,11e48 <_malloc_r+0x394>
   11bec:	21400726 	beq	r4,r5,11c0c <_malloc_r+0x158>
   11bf0:	2821883a 	mov	r16,r5
   11bf4:	80800117 	ldw	r2,4(r16)
   11bf8:	1184703a 	and	r2,r2,r6
   11bfc:	1447c83a 	sub	r3,r2,r17
   11c00:	19400408 	cmpgei	r5,r3,16
   11c04:	283ff726 	beq	r5,zero,11be4 <_malloc_r+0x130>
   11c08:	400f883a 	mov	r7,r8
   11c0c:	9c000417 	ldw	r16,16(r19)
   11c10:	02400074 	movhi	r9,1
   11c14:	4a562904 	addi	r9,r9,22692
   11c18:	82407f26 	beq	r16,r9,11e18 <_malloc_r+0x364>
   11c1c:	80800117 	ldw	r2,4(r16)
   11c20:	00ffff04 	movi	r3,-4
   11c24:	10c4703a 	and	r2,r2,r3
   11c28:	1447c83a 	sub	r3,r2,r17
   11c2c:	19000410 	cmplti	r4,r3,16
   11c30:	2000d326 	beq	r4,zero,11f80 <_malloc_r+0x4cc>
   11c34:	9a400515 	stw	r9,20(r19)
   11c38:	9a400415 	stw	r9,16(r19)
   11c3c:	1800c50e 	bge	r3,zero,11f54 <_malloc_r+0x4a0>
   11c40:	10c08028 	cmpgeui	r3,r2,512
   11c44:	99400117 	ldw	r5,4(r19)
   11c48:	1800891e 	bne	r3,zero,11e70 <_malloc_r+0x3bc>
   11c4c:	1006d0fa 	srli	r3,r2,3
   11c50:	1008d17a 	srli	r4,r2,5
   11c54:	18800044 	addi	r2,r3,1
   11c58:	100490fa 	slli	r2,r2,3
   11c5c:	00c00044 	movi	r3,1
   11c60:	1906983a 	sll	r3,r3,r4
   11c64:	9885883a 	add	r2,r19,r2
   11c68:	11000017 	ldw	r4,0(r2)
   11c6c:	28cab03a 	or	r5,r5,r3
   11c70:	10fffe04 	addi	r3,r2,-8
   11c74:	80c00315 	stw	r3,12(r16)
   11c78:	81000215 	stw	r4,8(r16)
   11c7c:	99400115 	stw	r5,4(r19)
   11c80:	14000015 	stw	r16,0(r2)
   11c84:	24000315 	stw	r16,12(r4)
   11c88:	3805d0ba 	srai	r2,r7,2
   11c8c:	01000044 	movi	r4,1
   11c90:	2088983a 	sll	r4,r4,r2
   11c94:	29002e36 	bltu	r5,r4,11d50 <_malloc_r+0x29c>
   11c98:	2144703a 	and	r2,r4,r5
   11c9c:	10000a1e 	bne	r2,zero,11cc8 <_malloc_r+0x214>
   11ca0:	2109883a 	add	r4,r4,r4
   11ca4:	00bfff04 	movi	r2,-4
   11ca8:	3884703a 	and	r2,r7,r2
   11cac:	2146703a 	and	r3,r4,r5
   11cb0:	11c00104 	addi	r7,r2,4
   11cb4:	1800041e 	bne	r3,zero,11cc8 <_malloc_r+0x214>
   11cb8:	2109883a 	add	r4,r4,r4
   11cbc:	2144703a 	and	r2,r4,r5
   11cc0:	39c00104 	addi	r7,r7,4
   11cc4:	103ffc26 	beq	r2,zero,11cb8 <_malloc_r+0x204>
   11cc8:	02bfff04 	movi	r10,-4
   11ccc:	381690fa 	slli	r11,r7,3
   11cd0:	3819883a 	mov	r12,r7
   11cd4:	9ad7883a 	add	r11,r19,r11
   11cd8:	5811883a 	mov	r8,r11
   11cdc:	40800317 	ldw	r2,12(r8)
   11ce0:	40808526 	beq	r8,r2,11ef8 <_malloc_r+0x444>
   11ce4:	10c00117 	ldw	r3,4(r2)
   11ce8:	1021883a 	mov	r16,r2
   11cec:	10800317 	ldw	r2,12(r2)
   11cf0:	1a86703a 	and	r3,r3,r10
   11cf4:	1c4bc83a 	sub	r5,r3,r17
   11cf8:	29800410 	cmplti	r6,r5,16
   11cfc:	30008326 	beq	r6,zero,11f0c <_malloc_r+0x458>
   11d00:	283ff716 	blt	r5,zero,11ce0 <_malloc_r+0x22c>
   11d04:	80c7883a 	add	r3,r16,r3
   11d08:	19400117 	ldw	r5,4(r3)
   11d0c:	81800217 	ldw	r6,8(r16)
   11d10:	9009883a 	mov	r4,r18
   11d14:	29400054 	ori	r5,r5,1
   11d18:	19400115 	stw	r5,4(r3)
   11d1c:	30800315 	stw	r2,12(r6)
   11d20:	11800215 	stw	r6,8(r2)
   11d24:	001389c0 	call	1389c <__malloc_unlock>
   11d28:	80800204 	addi	r2,r16,8
   11d2c:	003f8a06 	br	11b58 <_malloc_r+0xa4>
   11d30:	00800304 	movi	r2,12
   11d34:	90800015 	stw	r2,0(r18)
   11d38:	0005883a 	mov	r2,zero
   11d3c:	003f8606 	br	11b58 <_malloc_r+0xa4>
   11d40:	01008004 	movi	r4,512
   11d44:	01c01004 	movi	r7,64
   11d48:	02000fc4 	movi	r8,63
   11d4c:	003f9d06 	br	11bc4 <_malloc_r+0x110>
   11d50:	9c000217 	ldw	r16,8(r19)
   11d54:	00bfff04 	movi	r2,-4
   11d58:	80c00117 	ldw	r3,4(r16)
   11d5c:	18aa703a 	and	r21,r3,r2
   11d60:	ac400336 	bltu	r21,r17,11d70 <_malloc_r+0x2bc>
   11d64:	ac47c83a 	sub	r3,r21,r17
   11d68:	18800408 	cmpgei	r2,r3,16
   11d6c:	10002c1e 	bne	r2,zero,11e20 <_malloc_r+0x36c>
   11d70:	00800074 	movhi	r2,1
   11d74:	109bac17 	ldw	r2,28336(r2)
   11d78:	00c000b4 	movhi	r3,2
   11d7c:	1d219717 	ldw	r20,-31140(r3)
   11d80:	10bfffd8 	cmpnei	r2,r2,-1
   11d84:	856f883a 	add	r23,r16,r21
   11d88:	8d29883a 	add	r20,r17,r20
   11d8c:	1000eb26 	beq	r2,zero,1213c <_malloc_r+0x688>
   11d90:	a50403c4 	addi	r20,r20,4111
   11d94:	00bc0004 	movi	r2,-4096
   11d98:	a0a8703a 	and	r20,r20,r2
   11d9c:	a00b883a 	mov	r5,r20
   11da0:	9009883a 	mov	r4,r18
   11da4:	0012f440 	call	12f44 <_sbrk_r>
   11da8:	102d883a 	mov	r22,r2
   11dac:	10bfffd8 	cmpnei	r2,r2,-1
   11db0:	10008826 	beq	r2,zero,11fd4 <_malloc_r+0x520>
   11db4:	b5c08636 	bltu	r22,r23,11fd0 <_malloc_r+0x51c>
   11db8:	008000b4 	movhi	r2,2
   11dbc:	1121ef17 	ldw	r4,-30788(r2)
   11dc0:	a109883a 	add	r4,r20,r4
   11dc4:	1121ef15 	stw	r4,-30788(r2)
   11dc8:	2007883a 	mov	r3,r4
   11dcc:	bd80a91e 	bne	r23,r22,12074 <_malloc_r+0x5c0>
   11dd0:	b083ffcc 	andi	r2,r22,4095
   11dd4:	1000a71e 	bne	r2,zero,12074 <_malloc_r+0x5c0>
   11dd8:	9d800217 	ldw	r22,8(r19)
   11ddc:	ad07883a 	add	r3,r21,r20
   11de0:	18c00054 	ori	r3,r3,1
   11de4:	b0c00115 	stw	r3,4(r22)
   11de8:	008000b4 	movhi	r2,2
   11dec:	10a19617 	ldw	r2,-31144(r2)
   11df0:	1100022e 	bgeu	r2,r4,11dfc <_malloc_r+0x348>
   11df4:	008000b4 	movhi	r2,2
   11df8:	11219615 	stw	r4,-31144(r2)
   11dfc:	008000b4 	movhi	r2,2
   11e00:	10a19517 	ldw	r2,-31148(r2)
   11e04:	1100022e 	bgeu	r2,r4,11e10 <_malloc_r+0x35c>
   11e08:	008000b4 	movhi	r2,2
   11e0c:	11219515 	stw	r4,-31148(r2)
   11e10:	b021883a 	mov	r16,r22
   11e14:	00007106 	br	11fdc <_malloc_r+0x528>
   11e18:	99400117 	ldw	r5,4(r19)
   11e1c:	003f9a06 	br	11c88 <_malloc_r+0x1d4>
   11e20:	88800054 	ori	r2,r17,1
   11e24:	80800115 	stw	r2,4(r16)
   11e28:	8463883a 	add	r17,r16,r17
   11e2c:	9c400215 	stw	r17,8(r19)
   11e30:	18c00054 	ori	r3,r3,1
   11e34:	88c00115 	stw	r3,4(r17)
   11e38:	9009883a 	mov	r4,r18
   11e3c:	001389c0 	call	1389c <__malloc_unlock>
   11e40:	80800204 	addi	r2,r16,8
   11e44:	003f4406 	br	11b58 <_malloc_r+0xa4>
   11e48:	81000217 	ldw	r4,8(r16)
   11e4c:	8085883a 	add	r2,r16,r2
   11e50:	10c00117 	ldw	r3,4(r2)
   11e54:	21400315 	stw	r5,12(r4)
   11e58:	29000215 	stw	r4,8(r5)
   11e5c:	003f3906 	br	11b44 <_malloc_r+0x90>
   11e60:	14000317 	ldw	r16,12(r2)
   11e64:	143f2e1e 	bne	r2,r16,11b20 <_malloc_r+0x6c>
   11e68:	39c00084 	addi	r7,r7,2
   11e6c:	003f6706 	br	11c0c <_malloc_r+0x158>
   11e70:	1006d27a 	srli	r3,r2,9
   11e74:	19000168 	cmpgeui	r4,r3,5
   11e78:	20005026 	beq	r4,zero,11fbc <_malloc_r+0x508>
   11e7c:	19000568 	cmpgeui	r4,r3,21
   11e80:	2000c01e 	bne	r4,zero,12184 <_malloc_r+0x6d0>
   11e84:	19801704 	addi	r6,r3,92
   11e88:	300c90fa 	slli	r6,r6,3
   11e8c:	190016c4 	addi	r4,r3,91
   11e90:	998d883a 	add	r6,r19,r6
   11e94:	30c00017 	ldw	r3,0(r6)
   11e98:	31bffe04 	addi	r6,r6,-8
   11e9c:	30c0a926 	beq	r6,r3,12144 <_malloc_r+0x690>
   11ea0:	023fff04 	movi	r8,-4
   11ea4:	00000206 	br	11eb0 <_malloc_r+0x3fc>
   11ea8:	18c00217 	ldw	r3,8(r3)
   11eac:	30c00326 	beq	r6,r3,11ebc <_malloc_r+0x408>
   11eb0:	19000117 	ldw	r4,4(r3)
   11eb4:	2208703a 	and	r4,r4,r8
   11eb8:	113ffb36 	bltu	r2,r4,11ea8 <_malloc_r+0x3f4>
   11ebc:	19800317 	ldw	r6,12(r3)
   11ec0:	81800315 	stw	r6,12(r16)
   11ec4:	80c00215 	stw	r3,8(r16)
   11ec8:	34000215 	stw	r16,8(r6)
   11ecc:	1c000315 	stw	r16,12(r3)
   11ed0:	003f6d06 	br	11c88 <_malloc_r+0x1d4>
   11ed4:	10c00568 	cmpgeui	r3,r2,21
   11ed8:	18004926 	beq	r3,zero,12000 <_malloc_r+0x54c>
   11edc:	10c01568 	cmpgeui	r3,r2,85
   11ee0:	1800af1e 	bne	r3,zero,121a0 <_malloc_r+0x6ec>
   11ee4:	8804d33a 	srli	r2,r17,12
   11ee8:	11c01bc4 	addi	r7,r2,111
   11eec:	380890fa 	slli	r4,r7,3
   11ef0:	12001b84 	addi	r8,r2,110
   11ef4:	003f3306 	br	11bc4 <_malloc_r+0x110>
   11ef8:	63000044 	addi	r12,r12,1
   11efc:	608000cc 	andi	r2,r12,3
   11f00:	42000204 	addi	r8,r8,8
   11f04:	103f751e 	bne	r2,zero,11cdc <_malloc_r+0x228>
   11f08:	00004406 	br	1201c <_malloc_r+0x568>
   11f0c:	81000217 	ldw	r4,8(r16)
   11f10:	89800054 	ori	r6,r17,1
   11f14:	81800115 	stw	r6,4(r16)
   11f18:	20800315 	stw	r2,12(r4)
   11f1c:	11000215 	stw	r4,8(r2)
   11f20:	8463883a 	add	r17,r16,r17
   11f24:	9c400515 	stw	r17,20(r19)
   11f28:	9c400415 	stw	r17,16(r19)
   11f2c:	28800054 	ori	r2,r5,1
   11f30:	88800115 	stw	r2,4(r17)
   11f34:	8a400315 	stw	r9,12(r17)
   11f38:	8a400215 	stw	r9,8(r17)
   11f3c:	80c7883a 	add	r3,r16,r3
   11f40:	19400015 	stw	r5,0(r3)
   11f44:	9009883a 	mov	r4,r18
   11f48:	001389c0 	call	1389c <__malloc_unlock>
   11f4c:	80800204 	addi	r2,r16,8
   11f50:	003f0106 	br	11b58 <_malloc_r+0xa4>
   11f54:	8085883a 	add	r2,r16,r2
   11f58:	10c00117 	ldw	r3,4(r2)
   11f5c:	9009883a 	mov	r4,r18
   11f60:	18c00054 	ori	r3,r3,1
   11f64:	10c00115 	stw	r3,4(r2)
   11f68:	001389c0 	call	1389c <__malloc_unlock>
   11f6c:	80800204 	addi	r2,r16,8
   11f70:	003ef906 	br	11b58 <_malloc_r+0xa4>
   11f74:	880ed0fa 	srli	r7,r17,3
   11f78:	88800204 	addi	r2,r17,8
   11f7c:	003ee206 	br	11b08 <_malloc_r+0x54>
   11f80:	89000054 	ori	r4,r17,1
   11f84:	81000115 	stw	r4,4(r16)
   11f88:	8463883a 	add	r17,r16,r17
   11f8c:	9c400515 	stw	r17,20(r19)
   11f90:	9c400415 	stw	r17,16(r19)
   11f94:	19000054 	ori	r4,r3,1
   11f98:	89000115 	stw	r4,4(r17)
   11f9c:	8085883a 	add	r2,r16,r2
   11fa0:	8a400315 	stw	r9,12(r17)
   11fa4:	8a400215 	stw	r9,8(r17)
   11fa8:	10c00015 	stw	r3,0(r2)
   11fac:	9009883a 	mov	r4,r18
   11fb0:	001389c0 	call	1389c <__malloc_unlock>
   11fb4:	80800204 	addi	r2,r16,8
   11fb8:	003ee706 	br	11b58 <_malloc_r+0xa4>
   11fbc:	1006d1ba 	srli	r3,r2,6
   11fc0:	19800e44 	addi	r6,r3,57
   11fc4:	300c90fa 	slli	r6,r6,3
   11fc8:	19000e04 	addi	r4,r3,56
   11fcc:	003fb006 	br	11e90 <_malloc_r+0x3dc>
   11fd0:	84c02426 	beq	r16,r19,12064 <_malloc_r+0x5b0>
   11fd4:	9c000217 	ldw	r16,8(r19)
   11fd8:	80c00117 	ldw	r3,4(r16)
   11fdc:	00bfff04 	movi	r2,-4
   11fe0:	1884703a 	and	r2,r3,r2
   11fe4:	1447c83a 	sub	r3,r2,r17
   11fe8:	14400236 	bltu	r2,r17,11ff4 <_malloc_r+0x540>
   11fec:	18800408 	cmpgei	r2,r3,16
   11ff0:	103f8b1e 	bne	r2,zero,11e20 <_malloc_r+0x36c>
   11ff4:	9009883a 	mov	r4,r18
   11ff8:	001389c0 	call	1389c <__malloc_unlock>
   11ffc:	003f4e06 	br	11d38 <_malloc_r+0x284>
   12000:	11c01704 	addi	r7,r2,92
   12004:	380890fa 	slli	r4,r7,3
   12008:	120016c4 	addi	r8,r2,91
   1200c:	003eed06 	br	11bc4 <_malloc_r+0x110>
   12010:	58800217 	ldw	r2,8(r11)
   12014:	39ffffc4 	addi	r7,r7,-1
   12018:	12c0961e 	bne	r2,r11,12274 <_malloc_r+0x7c0>
   1201c:	388000cc 	andi	r2,r7,3
   12020:	5afffe04 	addi	r11,r11,-8
   12024:	103ffa1e 	bne	r2,zero,12010 <_malloc_r+0x55c>
   12028:	98c00117 	ldw	r3,4(r19)
   1202c:	0104303a 	nor	r2,zero,r4
   12030:	10c4703a 	and	r2,r2,r3
   12034:	98800115 	stw	r2,4(r19)
   12038:	2109883a 	add	r4,r4,r4
   1203c:	113f4436 	bltu	r2,r4,11d50 <_malloc_r+0x29c>
   12040:	203f4326 	beq	r4,zero,11d50 <_malloc_r+0x29c>
   12044:	2086703a 	and	r3,r4,r2
   12048:	1800041e 	bne	r3,zero,1205c <_malloc_r+0x5a8>
   1204c:	2109883a 	add	r4,r4,r4
   12050:	2086703a 	and	r3,r4,r2
   12054:	63000104 	addi	r12,r12,4
   12058:	183ffc26 	beq	r3,zero,1204c <_malloc_r+0x598>
   1205c:	600f883a 	mov	r7,r12
   12060:	003f1a06 	br	11ccc <_malloc_r+0x218>
   12064:	008000b4 	movhi	r2,2
   12068:	10e1ef17 	ldw	r3,-30788(r2)
   1206c:	a0c7883a 	add	r3,r20,r3
   12070:	10e1ef15 	stw	r3,-30788(r2)
   12074:	00800074 	movhi	r2,1
   12078:	109bac17 	ldw	r2,28336(r2)
   1207c:	10bfffd8 	cmpnei	r2,r2,-1
   12080:	10004e26 	beq	r2,zero,121bc <_malloc_r+0x708>
   12084:	b5c5c83a 	sub	r2,r22,r23
   12088:	10c5883a 	add	r2,r2,r3
   1208c:	00c000b4 	movhi	r3,2
   12090:	18a1ef15 	stw	r2,-30788(r3)
   12094:	b70001cc 	andi	fp,r22,7
   12098:	e0003026 	beq	fp,zero,1215c <_malloc_r+0x6a8>
   1209c:	b72dc83a 	sub	r22,r22,fp
   120a0:	b5800204 	addi	r22,r22,8
   120a4:	01040204 	movi	r4,4104
   120a8:	2709c83a 	sub	r4,r4,fp
   120ac:	b529883a 	add	r20,r22,r20
   120b0:	2509c83a 	sub	r4,r4,r20
   120b4:	25c3ffcc 	andi	r23,r4,4095
   120b8:	b80b883a 	mov	r5,r23
   120bc:	9009883a 	mov	r4,r18
   120c0:	0012f440 	call	12f44 <_sbrk_r>
   120c4:	10ffffe0 	cmpeqi	r3,r2,-1
   120c8:	1800501e 	bne	r3,zero,1220c <_malloc_r+0x758>
   120cc:	1585c83a 	sub	r2,r2,r22
   120d0:	15e9883a 	add	r20,r2,r23
   120d4:	008000b4 	movhi	r2,2
   120d8:	10a1ef17 	ldw	r2,-30788(r2)
   120dc:	9d800215 	stw	r22,8(r19)
   120e0:	a0c00054 	ori	r3,r20,1
   120e4:	b889883a 	add	r4,r23,r2
   120e8:	008000b4 	movhi	r2,2
   120ec:	1121ef15 	stw	r4,-30788(r2)
   120f0:	b0c00115 	stw	r3,4(r22)
   120f4:	84ff3c26 	beq	r16,r19,11de8 <_malloc_r+0x334>
   120f8:	a8800428 	cmpgeui	r2,r21,16
   120fc:	10003226 	beq	r2,zero,121c8 <_malloc_r+0x714>
   12100:	80800117 	ldw	r2,4(r16)
   12104:	017ffe04 	movi	r5,-8
   12108:	a8fffd04 	addi	r3,r21,-12
   1210c:	1946703a 	and	r3,r3,r5
   12110:	1080004c 	andi	r2,r2,1
   12114:	10c4b03a 	or	r2,r2,r3
   12118:	80800115 	stw	r2,4(r16)
   1211c:	01400144 	movi	r5,5
   12120:	80c5883a 	add	r2,r16,r3
   12124:	11400115 	stw	r5,4(r2)
   12128:	11400215 	stw	r5,8(r2)
   1212c:	18c00428 	cmpgeui	r3,r3,16
   12130:	18003b1e 	bne	r3,zero,12220 <_malloc_r+0x76c>
   12134:	b0c00117 	ldw	r3,4(r22)
   12138:	003f2b06 	br	11de8 <_malloc_r+0x334>
   1213c:	a5000404 	addi	r20,r20,16
   12140:	003f1606 	br	11d9c <_malloc_r+0x2e8>
   12144:	2009d0ba 	srai	r4,r4,2
   12148:	00800044 	movi	r2,1
   1214c:	1104983a 	sll	r2,r2,r4
   12150:	288ab03a 	or	r5,r5,r2
   12154:	99400115 	stw	r5,4(r19)
   12158:	003f5906 	br	11ec0 <_malloc_r+0x40c>
   1215c:	b509883a 	add	r4,r22,r20
   12160:	0109c83a 	sub	r4,zero,r4
   12164:	25c3ffcc 	andi	r23,r4,4095
   12168:	b80b883a 	mov	r5,r23
   1216c:	9009883a 	mov	r4,r18
   12170:	0012f440 	call	12f44 <_sbrk_r>
   12174:	10ffffe0 	cmpeqi	r3,r2,-1
   12178:	183fd426 	beq	r3,zero,120cc <_malloc_r+0x618>
   1217c:	002f883a 	mov	r23,zero
   12180:	003fd406 	br	120d4 <_malloc_r+0x620>
   12184:	19001568 	cmpgeui	r4,r3,85
   12188:	2000121e 	bne	r4,zero,121d4 <_malloc_r+0x720>
   1218c:	1006d33a 	srli	r3,r2,12
   12190:	19801bc4 	addi	r6,r3,111
   12194:	300c90fa 	slli	r6,r6,3
   12198:	19001b84 	addi	r4,r3,110
   1219c:	003f3c06 	br	11e90 <_malloc_r+0x3dc>
   121a0:	10c05568 	cmpgeui	r3,r2,341
   121a4:	1800121e 	bne	r3,zero,121f0 <_malloc_r+0x73c>
   121a8:	8804d3fa 	srli	r2,r17,15
   121ac:	11c01e04 	addi	r7,r2,120
   121b0:	380890fa 	slli	r4,r7,3
   121b4:	12001dc4 	addi	r8,r2,119
   121b8:	003e8206 	br	11bc4 <_malloc_r+0x110>
   121bc:	00800074 	movhi	r2,1
   121c0:	159bac15 	stw	r22,28336(r2)
   121c4:	003fb306 	br	12094 <_malloc_r+0x5e0>
   121c8:	00800044 	movi	r2,1
   121cc:	b0800115 	stw	r2,4(r22)
   121d0:	003f8806 	br	11ff4 <_malloc_r+0x540>
   121d4:	19005568 	cmpgeui	r4,r3,341
   121d8:	2000181e 	bne	r4,zero,1223c <_malloc_r+0x788>
   121dc:	1006d3fa 	srli	r3,r2,15
   121e0:	19801e04 	addi	r6,r3,120
   121e4:	300c90fa 	slli	r6,r6,3
   121e8:	19001dc4 	addi	r4,r3,119
   121ec:	003f2806 	br	11e90 <_malloc_r+0x3dc>
   121f0:	10815568 	cmpgeui	r2,r2,1365
   121f4:	1000181e 	bne	r2,zero,12258 <_malloc_r+0x7a4>
   121f8:	8804d4ba 	srli	r2,r17,18
   121fc:	11c01f44 	addi	r7,r2,125
   12200:	380890fa 	slli	r4,r7,3
   12204:	12001f04 	addi	r8,r2,124
   12208:	003e6e06 	br	11bc4 <_malloc_r+0x110>
   1220c:	e73ffe04 	addi	fp,fp,-8
   12210:	a729883a 	add	r20,r20,fp
   12214:	a5a9c83a 	sub	r20,r20,r22
   12218:	002f883a 	mov	r23,zero
   1221c:	003fad06 	br	120d4 <_malloc_r+0x620>
   12220:	9009883a 	mov	r4,r18
   12224:	81400204 	addi	r5,r16,8
   12228:	00117ac0 	call	117ac <_free_r>
   1222c:	008000b4 	movhi	r2,2
   12230:	9d800217 	ldw	r22,8(r19)
   12234:	1121ef17 	ldw	r4,-30788(r2)
   12238:	003fbe06 	br	12134 <_malloc_r+0x680>
   1223c:	18c15568 	cmpgeui	r3,r3,1365
   12240:	1800091e 	bne	r3,zero,12268 <_malloc_r+0x7b4>
   12244:	1006d4ba 	srli	r3,r2,18
   12248:	19801f44 	addi	r6,r3,125
   1224c:	300c90fa 	slli	r6,r6,3
   12250:	19001f04 	addi	r4,r3,124
   12254:	003f0e06 	br	11e90 <_malloc_r+0x3dc>
   12258:	0100fe04 	movi	r4,1016
   1225c:	01c01fc4 	movi	r7,127
   12260:	02001f84 	movi	r8,126
   12264:	003e5706 	br	11bc4 <_malloc_r+0x110>
   12268:	0180fe04 	movi	r6,1016
   1226c:	01001f84 	movi	r4,126
   12270:	003f0706 	br	11e90 <_malloc_r+0x3dc>
   12274:	98800117 	ldw	r2,4(r19)
   12278:	003f6f06 	br	12038 <_malloc_r+0x584>

0001227c <_realloc_r>:
   1227c:	defff604 	addi	sp,sp,-40
   12280:	dcc00315 	stw	r19,12(sp)
   12284:	dfc00915 	stw	ra,36(sp)
   12288:	df000815 	stw	fp,32(sp)
   1228c:	ddc00715 	stw	r23,28(sp)
   12290:	dd800615 	stw	r22,24(sp)
   12294:	dd400515 	stw	r21,20(sp)
   12298:	dd000415 	stw	r20,16(sp)
   1229c:	dc800215 	stw	r18,8(sp)
   122a0:	dc400115 	stw	r17,4(sp)
   122a4:	dc000015 	stw	r16,0(sp)
   122a8:	3027883a 	mov	r19,r6
   122ac:	28008a26 	beq	r5,zero,124d8 <_realloc_r+0x25c>
   122b0:	2821883a 	mov	r16,r5
   122b4:	2029883a 	mov	r20,r4
   122b8:	00138780 	call	13878 <__malloc_lock>
   122bc:	80bfff17 	ldw	r2,-4(r16)
   122c0:	9c4002c4 	addi	r17,r19,11
   122c4:	04bfff04 	movi	r18,-4
   122c8:	88c005f0 	cmpltui	r3,r17,23
   122cc:	857ffe04 	addi	r21,r16,-8
   122d0:	14a4703a 	and	r18,r2,r18
   122d4:	18005a1e 	bne	r3,zero,12440 <_realloc_r+0x1c4>
   122d8:	00fffe04 	movi	r3,-8
   122dc:	88e2703a 	and	r17,r17,r3
   122e0:	88005916 	blt	r17,zero,12448 <_realloc_r+0x1cc>
   122e4:	8cc05836 	bltu	r17,r19,12448 <_realloc_r+0x1cc>
   122e8:	94403a0e 	bge	r18,r17,123d4 <_realloc_r+0x158>
   122ec:	05800074 	movhi	r22,1
   122f0:	b5962704 	addi	r22,r22,22684
   122f4:	b1800217 	ldw	r6,8(r22)
   122f8:	ac8b883a 	add	r5,r21,r18
   122fc:	28c00117 	ldw	r3,4(r5)
   12300:	31408e26 	beq	r6,r5,1253c <_realloc_r+0x2c0>
   12304:	013fff84 	movi	r4,-2
   12308:	1908703a 	and	r4,r3,r4
   1230c:	2909883a 	add	r4,r5,r4
   12310:	21000117 	ldw	r4,4(r4)
   12314:	2100004c 	andi	r4,r4,1
   12318:	20004f1e 	bne	r4,zero,12458 <_realloc_r+0x1dc>
   1231c:	013fff04 	movi	r4,-4
   12320:	1906703a 	and	r3,r3,r4
   12324:	90c9883a 	add	r4,r18,r3
   12328:	2440ca0e 	bge	r4,r17,12654 <_realloc_r+0x3d8>
   1232c:	1080004c 	andi	r2,r2,1
   12330:	10004b1e 	bne	r2,zero,12460 <_realloc_r+0x1e4>
   12334:	85fffe17 	ldw	r23,-8(r16)
   12338:	013fff04 	movi	r4,-4
   1233c:	adefc83a 	sub	r23,r21,r23
   12340:	b8800117 	ldw	r2,4(r23)
   12344:	1104703a 	and	r2,r2,r4
   12348:	28000426 	beq	r5,zero,1235c <_realloc_r+0xe0>
   1234c:	90b9883a 	add	fp,r18,r2
   12350:	e0f9883a 	add	fp,fp,r3
   12354:	3140c926 	beq	r6,r5,1267c <_realloc_r+0x400>
   12358:	e4409e0e 	bge	fp,r17,125d4 <_realloc_r+0x358>
   1235c:	b8004026 	beq	r23,zero,12460 <_realloc_r+0x1e4>
   12360:	90ad883a 	add	r22,r18,r2
   12364:	b4403e16 	blt	r22,r17,12460 <_realloc_r+0x1e4>
   12368:	b8800317 	ldw	r2,12(r23)
   1236c:	b8c00217 	ldw	r3,8(r23)
   12370:	91bfff04 	addi	r6,r18,-4
   12374:	31400968 	cmpgeui	r5,r6,37
   12378:	18800315 	stw	r2,12(r3)
   1237c:	10c00215 	stw	r3,8(r2)
   12380:	bc800204 	addi	r18,r23,8
   12384:	2800ee1e 	bne	r5,zero,12740 <_realloc_r+0x4c4>
   12388:	30800530 	cmpltui	r2,r6,20
   1238c:	1000ea1e 	bne	r2,zero,12738 <_realloc_r+0x4bc>
   12390:	80c00017 	ldw	r3,0(r16)
   12394:	30800728 	cmpgeui	r2,r6,28
   12398:	b8c00215 	stw	r3,8(r23)
   1239c:	80c00117 	ldw	r3,4(r16)
   123a0:	b8c00315 	stw	r3,12(r23)
   123a4:	1000fa1e 	bne	r2,zero,12790 <_realloc_r+0x514>
   123a8:	84000204 	addi	r16,r16,8
   123ac:	b8800404 	addi	r2,r23,16
   123b0:	80c00017 	ldw	r3,0(r16)
   123b4:	10c00015 	stw	r3,0(r2)
   123b8:	80c00117 	ldw	r3,4(r16)
   123bc:	10c00115 	stw	r3,4(r2)
   123c0:	80c00217 	ldw	r3,8(r16)
   123c4:	10c00215 	stw	r3,8(r2)
   123c8:	9021883a 	mov	r16,r18
   123cc:	b82b883a 	mov	r21,r23
   123d0:	b025883a 	mov	r18,r22
   123d4:	a8800117 	ldw	r2,4(r21)
   123d8:	9449c83a 	sub	r4,r18,r17
   123dc:	21400430 	cmpltui	r5,r4,16
   123e0:	1080004c 	andi	r2,r2,1
   123e4:	ac87883a 	add	r3,r21,r18
   123e8:	28004826 	beq	r5,zero,1250c <_realloc_r+0x290>
   123ec:	9084b03a 	or	r2,r18,r2
   123f0:	a8800115 	stw	r2,4(r21)
   123f4:	18800117 	ldw	r2,4(r3)
   123f8:	10800054 	ori	r2,r2,1
   123fc:	18800115 	stw	r2,4(r3)
   12400:	a009883a 	mov	r4,r20
   12404:	001389c0 	call	1389c <__malloc_unlock>
   12408:	8027883a 	mov	r19,r16
   1240c:	9805883a 	mov	r2,r19
   12410:	dfc00917 	ldw	ra,36(sp)
   12414:	df000817 	ldw	fp,32(sp)
   12418:	ddc00717 	ldw	r23,28(sp)
   1241c:	dd800617 	ldw	r22,24(sp)
   12420:	dd400517 	ldw	r21,20(sp)
   12424:	dd000417 	ldw	r20,16(sp)
   12428:	dcc00317 	ldw	r19,12(sp)
   1242c:	dc800217 	ldw	r18,8(sp)
   12430:	dc400117 	ldw	r17,4(sp)
   12434:	dc000017 	ldw	r16,0(sp)
   12438:	dec00a04 	addi	sp,sp,40
   1243c:	f800283a 	ret
   12440:	04400404 	movi	r17,16
   12444:	8cffa82e 	bgeu	r17,r19,122e8 <_realloc_r+0x6c>
   12448:	00800304 	movi	r2,12
   1244c:	a0800015 	stw	r2,0(r20)
   12450:	0027883a 	mov	r19,zero
   12454:	003fed06 	br	1240c <_realloc_r+0x190>
   12458:	1080004c 	andi	r2,r2,1
   1245c:	10004e26 	beq	r2,zero,12598 <_realloc_r+0x31c>
   12460:	980b883a 	mov	r5,r19
   12464:	a009883a 	mov	r4,r20
   12468:	0011ab40 	call	11ab4 <_malloc_r>
   1246c:	1027883a 	mov	r19,r2
   12470:	1000bd26 	beq	r2,zero,12768 <_realloc_r+0x4ec>
   12474:	80bfff17 	ldw	r2,-4(r16)
   12478:	013fff84 	movi	r4,-2
   1247c:	98fffe04 	addi	r3,r19,-8
   12480:	1104703a 	and	r2,r2,r4
   12484:	a885883a 	add	r2,r21,r2
   12488:	10c03e26 	beq	r2,r3,12584 <_realloc_r+0x308>
   1248c:	91bfff04 	addi	r6,r18,-4
   12490:	30800968 	cmpgeui	r2,r6,37
   12494:	1000751e 	bne	r2,zero,1266c <_realloc_r+0x3f0>
   12498:	30800530 	cmpltui	r2,r6,20
   1249c:	10004426 	beq	r2,zero,125b0 <_realloc_r+0x334>
   124a0:	9805883a 	mov	r2,r19
   124a4:	8007883a 	mov	r3,r16
   124a8:	19000017 	ldw	r4,0(r3)
   124ac:	11000015 	stw	r4,0(r2)
   124b0:	19000117 	ldw	r4,4(r3)
   124b4:	11000115 	stw	r4,4(r2)
   124b8:	18c00217 	ldw	r3,8(r3)
   124bc:	10c00215 	stw	r3,8(r2)
   124c0:	a009883a 	mov	r4,r20
   124c4:	800b883a 	mov	r5,r16
   124c8:	00117ac0 	call	117ac <_free_r>
   124cc:	a009883a 	mov	r4,r20
   124d0:	001389c0 	call	1389c <__malloc_unlock>
   124d4:	003fcd06 	br	1240c <_realloc_r+0x190>
   124d8:	300b883a 	mov	r5,r6
   124dc:	dfc00917 	ldw	ra,36(sp)
   124e0:	df000817 	ldw	fp,32(sp)
   124e4:	ddc00717 	ldw	r23,28(sp)
   124e8:	dd800617 	ldw	r22,24(sp)
   124ec:	dd400517 	ldw	r21,20(sp)
   124f0:	dd000417 	ldw	r20,16(sp)
   124f4:	dcc00317 	ldw	r19,12(sp)
   124f8:	dc800217 	ldw	r18,8(sp)
   124fc:	dc400117 	ldw	r17,4(sp)
   12500:	dc000017 	ldw	r16,0(sp)
   12504:	dec00a04 	addi	sp,sp,40
   12508:	0011ab41 	jmpi	11ab4 <_malloc_r>
   1250c:	8884b03a 	or	r2,r17,r2
   12510:	a8800115 	stw	r2,4(r21)
   12514:	ac4b883a 	add	r5,r21,r17
   12518:	21000054 	ori	r4,r4,1
   1251c:	29000115 	stw	r4,4(r5)
   12520:	18800117 	ldw	r2,4(r3)
   12524:	29400204 	addi	r5,r5,8
   12528:	a009883a 	mov	r4,r20
   1252c:	10800054 	ori	r2,r2,1
   12530:	18800115 	stw	r2,4(r3)
   12534:	00117ac0 	call	117ac <_free_r>
   12538:	003fb106 	br	12400 <_realloc_r+0x184>
   1253c:	013fff04 	movi	r4,-4
   12540:	1906703a 	and	r3,r3,r4
   12544:	1c89883a 	add	r4,r3,r18
   12548:	89c00404 	addi	r7,r17,16
   1254c:	21ff7716 	blt	r4,r7,1232c <_realloc_r+0xb0>
   12550:	ac6b883a 	add	r21,r21,r17
   12554:	2445c83a 	sub	r2,r4,r17
   12558:	b5400215 	stw	r21,8(r22)
   1255c:	10800054 	ori	r2,r2,1
   12560:	a8800115 	stw	r2,4(r21)
   12564:	80bfff17 	ldw	r2,-4(r16)
   12568:	a009883a 	mov	r4,r20
   1256c:	8027883a 	mov	r19,r16
   12570:	1080004c 	andi	r2,r2,1
   12574:	1444b03a 	or	r2,r2,r17
   12578:	80bfff15 	stw	r2,-4(r16)
   1257c:	001389c0 	call	1389c <__malloc_unlock>
   12580:	003fa206 	br	1240c <_realloc_r+0x190>
   12584:	98bfff17 	ldw	r2,-4(r19)
   12588:	00ffff04 	movi	r3,-4
   1258c:	10c4703a 	and	r2,r2,r3
   12590:	90a5883a 	add	r18,r18,r2
   12594:	003f8f06 	br	123d4 <_realloc_r+0x158>
   12598:	85fffe17 	ldw	r23,-8(r16)
   1259c:	00ffff04 	movi	r3,-4
   125a0:	adefc83a 	sub	r23,r21,r23
   125a4:	b8800117 	ldw	r2,4(r23)
   125a8:	10c4703a 	and	r2,r2,r3
   125ac:	003f6b06 	br	1235c <_realloc_r+0xe0>
   125b0:	80c00017 	ldw	r3,0(r16)
   125b4:	30800728 	cmpgeui	r2,r6,28
   125b8:	98c00015 	stw	r3,0(r19)
   125bc:	80c00117 	ldw	r3,4(r16)
   125c0:	98c00115 	stw	r3,4(r19)
   125c4:	1000531e 	bne	r2,zero,12714 <_realloc_r+0x498>
   125c8:	80c00204 	addi	r3,r16,8
   125cc:	98800204 	addi	r2,r19,8
   125d0:	003fb506 	br	124a8 <_realloc_r+0x22c>
   125d4:	28800317 	ldw	r2,12(r5)
   125d8:	28c00217 	ldw	r3,8(r5)
   125dc:	91bfff04 	addi	r6,r18,-4
   125e0:	31400968 	cmpgeui	r5,r6,37
   125e4:	18800315 	stw	r2,12(r3)
   125e8:	10c00215 	stw	r3,8(r2)
   125ec:	b8c00217 	ldw	r3,8(r23)
   125f0:	b8800317 	ldw	r2,12(r23)
   125f4:	bc800204 	addi	r18,r23,8
   125f8:	18800315 	stw	r2,12(r3)
   125fc:	10c00215 	stw	r3,8(r2)
   12600:	2800551e 	bne	r5,zero,12758 <_realloc_r+0x4dc>
   12604:	30800530 	cmpltui	r2,r6,20
   12608:	1000511e 	bne	r2,zero,12750 <_realloc_r+0x4d4>
   1260c:	80c00017 	ldw	r3,0(r16)
   12610:	30800728 	cmpgeui	r2,r6,28
   12614:	b8c00215 	stw	r3,8(r23)
   12618:	80c00117 	ldw	r3,4(r16)
   1261c:	b8c00315 	stw	r3,12(r23)
   12620:	1000641e 	bne	r2,zero,127b4 <_realloc_r+0x538>
   12624:	84000204 	addi	r16,r16,8
   12628:	b8800404 	addi	r2,r23,16
   1262c:	80c00017 	ldw	r3,0(r16)
   12630:	10c00015 	stw	r3,0(r2)
   12634:	80c00117 	ldw	r3,4(r16)
   12638:	10c00115 	stw	r3,4(r2)
   1263c:	80c00217 	ldw	r3,8(r16)
   12640:	10c00215 	stw	r3,8(r2)
   12644:	9021883a 	mov	r16,r18
   12648:	b82b883a 	mov	r21,r23
   1264c:	e025883a 	mov	r18,fp
   12650:	003f6006 	br	123d4 <_realloc_r+0x158>
   12654:	28800317 	ldw	r2,12(r5)
   12658:	28c00217 	ldw	r3,8(r5)
   1265c:	2025883a 	mov	r18,r4
   12660:	18800315 	stw	r2,12(r3)
   12664:	10c00215 	stw	r3,8(r2)
   12668:	003f5a06 	br	123d4 <_realloc_r+0x158>
   1266c:	800b883a 	mov	r5,r16
   12670:	9809883a 	mov	r4,r19
   12674:	00111a40 	call	111a4 <memmove>
   12678:	003f9106 	br	124c0 <_realloc_r+0x244>
   1267c:	88c00404 	addi	r3,r17,16
   12680:	e0ff3616 	blt	fp,r3,1235c <_realloc_r+0xe0>
   12684:	b8800317 	ldw	r2,12(r23)
   12688:	b8c00217 	ldw	r3,8(r23)
   1268c:	91bfff04 	addi	r6,r18,-4
   12690:	31000968 	cmpgeui	r4,r6,37
   12694:	18800315 	stw	r2,12(r3)
   12698:	10c00215 	stw	r3,8(r2)
   1269c:	bcc00204 	addi	r19,r23,8
   126a0:	20004f1e 	bne	r4,zero,127e0 <_realloc_r+0x564>
   126a4:	30800530 	cmpltui	r2,r6,20
   126a8:	10004b1e 	bne	r2,zero,127d8 <_realloc_r+0x55c>
   126ac:	80c00017 	ldw	r3,0(r16)
   126b0:	30800728 	cmpgeui	r2,r6,28
   126b4:	b8c00215 	stw	r3,8(r23)
   126b8:	80c00117 	ldw	r3,4(r16)
   126bc:	b8c00315 	stw	r3,12(r23)
   126c0:	10004b1e 	bne	r2,zero,127f0 <_realloc_r+0x574>
   126c4:	84000204 	addi	r16,r16,8
   126c8:	b8800404 	addi	r2,r23,16
   126cc:	80c00017 	ldw	r3,0(r16)
   126d0:	10c00015 	stw	r3,0(r2)
   126d4:	80c00117 	ldw	r3,4(r16)
   126d8:	10c00115 	stw	r3,4(r2)
   126dc:	80c00217 	ldw	r3,8(r16)
   126e0:	10c00215 	stw	r3,8(r2)
   126e4:	bc47883a 	add	r3,r23,r17
   126e8:	e445c83a 	sub	r2,fp,r17
   126ec:	b0c00215 	stw	r3,8(r22)
   126f0:	10800054 	ori	r2,r2,1
   126f4:	18800115 	stw	r2,4(r3)
   126f8:	b8800117 	ldw	r2,4(r23)
   126fc:	a009883a 	mov	r4,r20
   12700:	1080004c 	andi	r2,r2,1
   12704:	1444b03a 	or	r2,r2,r17
   12708:	b8800115 	stw	r2,4(r23)
   1270c:	001389c0 	call	1389c <__malloc_unlock>
   12710:	003f3e06 	br	1240c <_realloc_r+0x190>
   12714:	80800217 	ldw	r2,8(r16)
   12718:	31800920 	cmpeqi	r6,r6,36
   1271c:	98800215 	stw	r2,8(r19)
   12720:	80800317 	ldw	r2,12(r16)
   12724:	98800315 	stw	r2,12(r19)
   12728:	3000121e 	bne	r6,zero,12774 <_realloc_r+0x4f8>
   1272c:	80c00404 	addi	r3,r16,16
   12730:	98800404 	addi	r2,r19,16
   12734:	003f5c06 	br	124a8 <_realloc_r+0x22c>
   12738:	9005883a 	mov	r2,r18
   1273c:	003f1c06 	br	123b0 <_realloc_r+0x134>
   12740:	800b883a 	mov	r5,r16
   12744:	9009883a 	mov	r4,r18
   12748:	00111a40 	call	111a4 <memmove>
   1274c:	003f1e06 	br	123c8 <_realloc_r+0x14c>
   12750:	9005883a 	mov	r2,r18
   12754:	003fb506 	br	1262c <_realloc_r+0x3b0>
   12758:	800b883a 	mov	r5,r16
   1275c:	9009883a 	mov	r4,r18
   12760:	00111a40 	call	111a4 <memmove>
   12764:	003fb706 	br	12644 <_realloc_r+0x3c8>
   12768:	a009883a 	mov	r4,r20
   1276c:	001389c0 	call	1389c <__malloc_unlock>
   12770:	003f3706 	br	12450 <_realloc_r+0x1d4>
   12774:	81000417 	ldw	r4,16(r16)
   12778:	80c00604 	addi	r3,r16,24
   1277c:	98800604 	addi	r2,r19,24
   12780:	99000415 	stw	r4,16(r19)
   12784:	81000517 	ldw	r4,20(r16)
   12788:	99000515 	stw	r4,20(r19)
   1278c:	003f4606 	br	124a8 <_realloc_r+0x22c>
   12790:	80800217 	ldw	r2,8(r16)
   12794:	31800920 	cmpeqi	r6,r6,36
   12798:	b8800415 	stw	r2,16(r23)
   1279c:	80800317 	ldw	r2,12(r16)
   127a0:	b8800515 	stw	r2,20(r23)
   127a4:	30001b1e 	bne	r6,zero,12814 <_realloc_r+0x598>
   127a8:	84000404 	addi	r16,r16,16
   127ac:	b8800604 	addi	r2,r23,24
   127b0:	003eff06 	br	123b0 <_realloc_r+0x134>
   127b4:	80800217 	ldw	r2,8(r16)
   127b8:	31800920 	cmpeqi	r6,r6,36
   127bc:	b8800415 	stw	r2,16(r23)
   127c0:	80800317 	ldw	r2,12(r16)
   127c4:	b8800515 	stw	r2,20(r23)
   127c8:	3000191e 	bne	r6,zero,12830 <_realloc_r+0x5b4>
   127cc:	84000404 	addi	r16,r16,16
   127d0:	b8800604 	addi	r2,r23,24
   127d4:	003f9506 	br	1262c <_realloc_r+0x3b0>
   127d8:	9805883a 	mov	r2,r19
   127dc:	003fbb06 	br	126cc <_realloc_r+0x450>
   127e0:	800b883a 	mov	r5,r16
   127e4:	9809883a 	mov	r4,r19
   127e8:	00111a40 	call	111a4 <memmove>
   127ec:	003fbd06 	br	126e4 <_realloc_r+0x468>
   127f0:	80800217 	ldw	r2,8(r16)
   127f4:	31800920 	cmpeqi	r6,r6,36
   127f8:	b8800415 	stw	r2,16(r23)
   127fc:	80800317 	ldw	r2,12(r16)
   12800:	b8800515 	stw	r2,20(r23)
   12804:	3000111e 	bne	r6,zero,1284c <_realloc_r+0x5d0>
   12808:	84000404 	addi	r16,r16,16
   1280c:	b8800604 	addi	r2,r23,24
   12810:	003fae06 	br	126cc <_realloc_r+0x450>
   12814:	80c00417 	ldw	r3,16(r16)
   12818:	84000604 	addi	r16,r16,24
   1281c:	b8800804 	addi	r2,r23,32
   12820:	b8c00615 	stw	r3,24(r23)
   12824:	80ffff17 	ldw	r3,-4(r16)
   12828:	b8c00715 	stw	r3,28(r23)
   1282c:	003ee006 	br	123b0 <_realloc_r+0x134>
   12830:	80c00417 	ldw	r3,16(r16)
   12834:	84000604 	addi	r16,r16,24
   12838:	b8800804 	addi	r2,r23,32
   1283c:	b8c00615 	stw	r3,24(r23)
   12840:	80ffff17 	ldw	r3,-4(r16)
   12844:	b8c00715 	stw	r3,28(r23)
   12848:	003f7806 	br	1262c <_realloc_r+0x3b0>
   1284c:	80c00417 	ldw	r3,16(r16)
   12850:	84000604 	addi	r16,r16,24
   12854:	b8800804 	addi	r2,r23,32
   12858:	b8c00615 	stw	r3,24(r23)
   1285c:	80ffff17 	ldw	r3,-4(r16)
   12860:	b8c00715 	stw	r3,28(r23)
   12864:	003f9906 	br	126cc <_realloc_r+0x450>

00012868 <_fclose_r>:
   12868:	defffc04 	addi	sp,sp,-16
   1286c:	dfc00315 	stw	ra,12(sp)
   12870:	dc800215 	stw	r18,8(sp)
   12874:	dc400115 	stw	r17,4(sp)
   12878:	dc000015 	stw	r16,0(sp)
   1287c:	28000726 	beq	r5,zero,1289c <_fclose_r+0x34>
   12880:	2821883a 	mov	r16,r5
   12884:	2023883a 	mov	r17,r4
   12888:	20000226 	beq	r4,zero,12894 <_fclose_r+0x2c>
   1288c:	20800d17 	ldw	r2,52(r4)
   12890:	10002f26 	beq	r2,zero,12950 <_fclose_r+0xe8>
   12894:	8080030f 	ldh	r2,12(r16)
   12898:	1000081e 	bne	r2,zero,128bc <_fclose_r+0x54>
   1289c:	0025883a 	mov	r18,zero
   128a0:	9005883a 	mov	r2,r18
   128a4:	dfc00317 	ldw	ra,12(sp)
   128a8:	dc800217 	ldw	r18,8(sp)
   128ac:	dc400117 	ldw	r17,4(sp)
   128b0:	dc000017 	ldw	r16,0(sp)
   128b4:	dec00404 	addi	sp,sp,16
   128b8:	f800283a 	ret
   128bc:	800b883a 	mov	r5,r16
   128c0:	8809883a 	mov	r4,r17
   128c4:	00129680 	call	12968 <__sflush_r>
   128c8:	80c00b17 	ldw	r3,44(r16)
   128cc:	1025883a 	mov	r18,r2
   128d0:	18000426 	beq	r3,zero,128e4 <_fclose_r+0x7c>
   128d4:	81400717 	ldw	r5,28(r16)
   128d8:	8809883a 	mov	r4,r17
   128dc:	183ee83a 	callr	r3
   128e0:	10001316 	blt	r2,zero,12930 <_fclose_r+0xc8>
   128e4:	8080030b 	ldhu	r2,12(r16)
   128e8:	1080200c 	andi	r2,r2,128
   128ec:	1000141e 	bne	r2,zero,12940 <_fclose_r+0xd8>
   128f0:	81400c17 	ldw	r5,48(r16)
   128f4:	28000526 	beq	r5,zero,1290c <_fclose_r+0xa4>
   128f8:	80801004 	addi	r2,r16,64
   128fc:	28800226 	beq	r5,r2,12908 <_fclose_r+0xa0>
   12900:	8809883a 	mov	r4,r17
   12904:	00117ac0 	call	117ac <_free_r>
   12908:	80000c15 	stw	zero,48(r16)
   1290c:	81401117 	ldw	r5,68(r16)
   12910:	28000326 	beq	r5,zero,12920 <_fclose_r+0xb8>
   12914:	8809883a 	mov	r4,r17
   12918:	00117ac0 	call	117ac <_free_r>
   1291c:	80001115 	stw	zero,68(r16)
   12920:	00107a40 	call	107a4 <__sfp_lock_acquire>
   12924:	8000030d 	sth	zero,12(r16)
   12928:	00107a80 	call	107a8 <__sfp_lock_release>
   1292c:	003fdc06 	br	128a0 <_fclose_r+0x38>
   12930:	8080030b 	ldhu	r2,12(r16)
   12934:	04bfffc4 	movi	r18,-1
   12938:	1080200c 	andi	r2,r2,128
   1293c:	103fec26 	beq	r2,zero,128f0 <_fclose_r+0x88>
   12940:	81400417 	ldw	r5,16(r16)
   12944:	8809883a 	mov	r4,r17
   12948:	00117ac0 	call	117ac <_free_r>
   1294c:	003fe806 	br	128f0 <_fclose_r+0x88>
   12950:	001077c0 	call	1077c <__sinit>
   12954:	003fcf06 	br	12894 <_fclose_r+0x2c>

00012958 <fclose>:
   12958:	00800074 	movhi	r2,1
   1295c:	200b883a 	mov	r5,r4
   12960:	111bab17 	ldw	r4,28332(r2)
   12964:	00128681 	jmpi	12868 <_fclose_r>

00012968 <__sflush_r>:
   12968:	2880030b 	ldhu	r2,12(r5)
   1296c:	defffb04 	addi	sp,sp,-20
   12970:	dcc00315 	stw	r19,12(sp)
   12974:	dc000015 	stw	r16,0(sp)
   12978:	dfc00415 	stw	ra,16(sp)
   1297c:	dc800215 	stw	r18,8(sp)
   12980:	dc400115 	stw	r17,4(sp)
   12984:	10c0020c 	andi	r3,r2,8
   12988:	2821883a 	mov	r16,r5
   1298c:	2027883a 	mov	r19,r4
   12990:	18003c1e 	bne	r3,zero,12a84 <__sflush_r+0x11c>
   12994:	29000117 	ldw	r4,4(r5)
   12998:	10c20014 	ori	r3,r2,2048
   1299c:	28c0030d 	sth	r3,12(r5)
   129a0:	0100580e 	bge	zero,r4,12b04 <__sflush_r+0x19c>
   129a4:	82000a17 	ldw	r8,40(r16)
   129a8:	40003426 	beq	r8,zero,12a7c <__sflush_r+0x114>
   129ac:	9c400017 	ldw	r17,0(r19)
   129b0:	1084000c 	andi	r2,r2,4096
   129b4:	98000015 	stw	zero,0(r19)
   129b8:	81400717 	ldw	r5,28(r16)
   129bc:	1000561e 	bne	r2,zero,12b18 <__sflush_r+0x1b0>
   129c0:	000d883a 	mov	r6,zero
   129c4:	01c00044 	movi	r7,1
   129c8:	9809883a 	mov	r4,r19
   129cc:	403ee83a 	callr	r8
   129d0:	100d883a 	mov	r6,r2
   129d4:	10bfffd8 	cmpnei	r2,r2,-1
   129d8:	10005b26 	beq	r2,zero,12b48 <__sflush_r+0x1e0>
   129dc:	80c0030b 	ldhu	r3,12(r16)
   129e0:	82000a17 	ldw	r8,40(r16)
   129e4:	18c0010c 	andi	r3,r3,4
   129e8:	18000626 	beq	r3,zero,12a04 <__sflush_r+0x9c>
   129ec:	80c00117 	ldw	r3,4(r16)
   129f0:	80800c17 	ldw	r2,48(r16)
   129f4:	30cdc83a 	sub	r6,r6,r3
   129f8:	10000226 	beq	r2,zero,12a04 <__sflush_r+0x9c>
   129fc:	80800f17 	ldw	r2,60(r16)
   12a00:	308dc83a 	sub	r6,r6,r2
   12a04:	81400717 	ldw	r5,28(r16)
   12a08:	000f883a 	mov	r7,zero
   12a0c:	9809883a 	mov	r4,r19
   12a10:	403ee83a 	callr	r8
   12a14:	10ffffd8 	cmpnei	r3,r2,-1
   12a18:	1800411e 	bne	r3,zero,12b20 <__sflush_r+0x1b8>
   12a1c:	99400017 	ldw	r5,0(r19)
   12a20:	28c007b0 	cmpltui	r3,r5,30
   12a24:	18002c26 	beq	r3,zero,12ad8 <__sflush_r+0x170>
   12a28:	00f7f034 	movhi	r3,57280
   12a2c:	18ffff84 	addi	r3,r3,-2
   12a30:	1949d83a 	sra	r4,r3,r5
   12a34:	80c0030b 	ldhu	r3,12(r16)
   12a38:	2100004c 	andi	r4,r4,1
   12a3c:	2000271e 	bne	r4,zero,12adc <__sflush_r+0x174>
   12a40:	81000417 	ldw	r4,16(r16)
   12a44:	19bdffcc 	andi	r6,r3,63487
   12a48:	8180030d 	sth	r6,12(r16)
   12a4c:	80000115 	stw	zero,4(r16)
   12a50:	81000015 	stw	r4,0(r16)
   12a54:	18c4000c 	andi	r3,r3,4096
   12a58:	1800431e 	bne	r3,zero,12b68 <__sflush_r+0x200>
   12a5c:	81400c17 	ldw	r5,48(r16)
   12a60:	9c400015 	stw	r17,0(r19)
   12a64:	28000526 	beq	r5,zero,12a7c <__sflush_r+0x114>
   12a68:	80801004 	addi	r2,r16,64
   12a6c:	28800226 	beq	r5,r2,12a78 <__sflush_r+0x110>
   12a70:	9809883a 	mov	r4,r19
   12a74:	00117ac0 	call	117ac <_free_r>
   12a78:	80000c15 	stw	zero,48(r16)
   12a7c:	0005883a 	mov	r2,zero
   12a80:	00001906 	br	12ae8 <__sflush_r+0x180>
   12a84:	2c800417 	ldw	r18,16(r5)
   12a88:	903ffc26 	beq	r18,zero,12a7c <__sflush_r+0x114>
   12a8c:	2c400017 	ldw	r17,0(r5)
   12a90:	108000cc 	andi	r2,r2,3
   12a94:	2c800015 	stw	r18,0(r5)
   12a98:	8ca3c83a 	sub	r17,r17,r18
   12a9c:	10001c1e 	bne	r2,zero,12b10 <__sflush_r+0x1a8>
   12aa0:	28800517 	ldw	r2,20(r5)
   12aa4:	80800215 	stw	r2,8(r16)
   12aa8:	04400316 	blt	zero,r17,12ab8 <__sflush_r+0x150>
   12aac:	003ff306 	br	12a7c <__sflush_r+0x114>
   12ab0:	90a5883a 	add	r18,r18,r2
   12ab4:	047ff10e 	bge	zero,r17,12a7c <__sflush_r+0x114>
   12ab8:	80800917 	ldw	r2,36(r16)
   12abc:	81400717 	ldw	r5,28(r16)
   12ac0:	880f883a 	mov	r7,r17
   12ac4:	900d883a 	mov	r6,r18
   12ac8:	9809883a 	mov	r4,r19
   12acc:	103ee83a 	callr	r2
   12ad0:	88a3c83a 	sub	r17,r17,r2
   12ad4:	00bff616 	blt	zero,r2,12ab0 <__sflush_r+0x148>
   12ad8:	80c0030b 	ldhu	r3,12(r16)
   12adc:	18c01014 	ori	r3,r3,64
   12ae0:	80c0030d 	sth	r3,12(r16)
   12ae4:	00bfffc4 	movi	r2,-1
   12ae8:	dfc00417 	ldw	ra,16(sp)
   12aec:	dcc00317 	ldw	r19,12(sp)
   12af0:	dc800217 	ldw	r18,8(sp)
   12af4:	dc400117 	ldw	r17,4(sp)
   12af8:	dc000017 	ldw	r16,0(sp)
   12afc:	dec00504 	addi	sp,sp,20
   12b00:	f800283a 	ret
   12b04:	29000f17 	ldw	r4,60(r5)
   12b08:	013fa616 	blt	zero,r4,129a4 <__sflush_r+0x3c>
   12b0c:	003fdb06 	br	12a7c <__sflush_r+0x114>
   12b10:	0005883a 	mov	r2,zero
   12b14:	003fe306 	br	12aa4 <__sflush_r+0x13c>
   12b18:	81801417 	ldw	r6,80(r16)
   12b1c:	003fb106 	br	129e4 <__sflush_r+0x7c>
   12b20:	80c0030b 	ldhu	r3,12(r16)
   12b24:	81000417 	ldw	r4,16(r16)
   12b28:	80000115 	stw	zero,4(r16)
   12b2c:	197dffcc 	andi	r5,r3,63487
   12b30:	8140030d 	sth	r5,12(r16)
   12b34:	81000015 	stw	r4,0(r16)
   12b38:	18c4000c 	andi	r3,r3,4096
   12b3c:	183fc726 	beq	r3,zero,12a5c <__sflush_r+0xf4>
   12b40:	80801415 	stw	r2,80(r16)
   12b44:	003fc506 	br	12a5c <__sflush_r+0xf4>
   12b48:	98800017 	ldw	r2,0(r19)
   12b4c:	103fa326 	beq	r2,zero,129dc <__sflush_r+0x74>
   12b50:	10c00760 	cmpeqi	r3,r2,29
   12b54:	1800021e 	bne	r3,zero,12b60 <__sflush_r+0x1f8>
   12b58:	10800598 	cmpnei	r2,r2,22
   12b5c:	103fde1e 	bne	r2,zero,12ad8 <__sflush_r+0x170>
   12b60:	9c400015 	stw	r17,0(r19)
   12b64:	003fc506 	br	12a7c <__sflush_r+0x114>
   12b68:	283fbc1e 	bne	r5,zero,12a5c <__sflush_r+0xf4>
   12b6c:	003ff406 	br	12b40 <__sflush_r+0x1d8>

00012b70 <_fflush_r>:
   12b70:	defffd04 	addi	sp,sp,-12
   12b74:	dc000115 	stw	r16,4(sp)
   12b78:	dfc00215 	stw	ra,8(sp)
   12b7c:	2021883a 	mov	r16,r4
   12b80:	20000226 	beq	r4,zero,12b8c <_fflush_r+0x1c>
   12b84:	20800d17 	ldw	r2,52(r4)
   12b88:	10000c26 	beq	r2,zero,12bbc <_fflush_r+0x4c>
   12b8c:	2880030f 	ldh	r2,12(r5)
   12b90:	1000051e 	bne	r2,zero,12ba8 <_fflush_r+0x38>
   12b94:	0005883a 	mov	r2,zero
   12b98:	dfc00217 	ldw	ra,8(sp)
   12b9c:	dc000117 	ldw	r16,4(sp)
   12ba0:	dec00304 	addi	sp,sp,12
   12ba4:	f800283a 	ret
   12ba8:	8009883a 	mov	r4,r16
   12bac:	dfc00217 	ldw	ra,8(sp)
   12bb0:	dc000117 	ldw	r16,4(sp)
   12bb4:	dec00304 	addi	sp,sp,12
   12bb8:	00129681 	jmpi	12968 <__sflush_r>
   12bbc:	d9400015 	stw	r5,0(sp)
   12bc0:	001077c0 	call	1077c <__sinit>
   12bc4:	d9400017 	ldw	r5,0(sp)
   12bc8:	003ff006 	br	12b8c <_fflush_r+0x1c>

00012bcc <fflush>:
   12bcc:	20001826 	beq	r4,zero,12c30 <fflush+0x64>
   12bd0:	00800074 	movhi	r2,1
   12bd4:	200b883a 	mov	r5,r4
   12bd8:	111bab17 	ldw	r4,28332(r2)
   12bdc:	20000226 	beq	r4,zero,12be8 <fflush+0x1c>
   12be0:	20800d17 	ldw	r2,52(r4)
   12be4:	10000526 	beq	r2,zero,12bfc <fflush+0x30>
   12be8:	2880030f 	ldh	r2,12(r5)
   12bec:	1000021e 	bne	r2,zero,12bf8 <fflush+0x2c>
   12bf0:	0005883a 	mov	r2,zero
   12bf4:	f800283a 	ret
   12bf8:	00129681 	jmpi	12968 <__sflush_r>
   12bfc:	defffd04 	addi	sp,sp,-12
   12c00:	d9400115 	stw	r5,4(sp)
   12c04:	d9000015 	stw	r4,0(sp)
   12c08:	dfc00215 	stw	ra,8(sp)
   12c0c:	001077c0 	call	1077c <__sinit>
   12c10:	d9400117 	ldw	r5,4(sp)
   12c14:	d9000017 	ldw	r4,0(sp)
   12c18:	2880030f 	ldh	r2,12(r5)
   12c1c:	10000b1e 	bne	r2,zero,12c4c <fflush+0x80>
   12c20:	0005883a 	mov	r2,zero
   12c24:	dfc00217 	ldw	ra,8(sp)
   12c28:	dec00304 	addi	sp,sp,12
   12c2c:	f800283a 	ret
   12c30:	01800074 	movhi	r6,1
   12c34:	01400074 	movhi	r5,1
   12c38:	01000074 	movhi	r4,1
   12c3c:	31962404 	addi	r6,r6,22672
   12c40:	294adc04 	addi	r5,r5,11120
   12c44:	2115dd04 	addi	r4,r4,22388
   12c48:	0010c7c1 	jmpi	10c7c <_fwalk_sglue>
   12c4c:	dfc00217 	ldw	ra,8(sp)
   12c50:	dec00304 	addi	sp,sp,12
   12c54:	00129681 	jmpi	12968 <__sflush_r>

00012c58 <__smakebuf_r>:
   12c58:	2880030b 	ldhu	r2,12(r5)
   12c5c:	deffe904 	addi	sp,sp,-92
   12c60:	dc001215 	stw	r16,72(sp)
   12c64:	dfc01615 	stw	ra,88(sp)
   12c68:	dcc01515 	stw	r19,84(sp)
   12c6c:	dc801415 	stw	r18,80(sp)
   12c70:	dc401315 	stw	r17,76(sp)
   12c74:	10c0008c 	andi	r3,r2,2
   12c78:	2821883a 	mov	r16,r5
   12c7c:	18000c26 	beq	r3,zero,12cb0 <__smakebuf_r+0x58>
   12c80:	288010c4 	addi	r2,r5,67
   12c84:	28800015 	stw	r2,0(r5)
   12c88:	28800415 	stw	r2,16(r5)
   12c8c:	00800044 	movi	r2,1
   12c90:	28800515 	stw	r2,20(r5)
   12c94:	dfc01617 	ldw	ra,88(sp)
   12c98:	dcc01517 	ldw	r19,84(sp)
   12c9c:	dc801417 	ldw	r18,80(sp)
   12ca0:	dc401317 	ldw	r17,76(sp)
   12ca4:	dc001217 	ldw	r16,72(sp)
   12ca8:	dec01704 	addi	sp,sp,92
   12cac:	f800283a 	ret
   12cb0:	2940038f 	ldh	r5,14(r5)
   12cb4:	2023883a 	mov	r17,r4
   12cb8:	28002816 	blt	r5,zero,12d5c <__smakebuf_r+0x104>
   12cbc:	d80d883a 	mov	r6,sp
   12cc0:	0012e8c0 	call	12e8c <_fstat_r>
   12cc4:	10002416 	blt	r2,zero,12d58 <__smakebuf_r+0x100>
   12cc8:	d8800117 	ldw	r2,4(sp)
   12ccc:	10bc000c 	andi	r2,r2,61440
   12cd0:	10880018 	cmpnei	r2,r2,8192
   12cd4:	1000471e 	bne	r2,zero,12df4 <__smakebuf_r+0x19c>
   12cd8:	8140038f 	ldh	r5,14(r16)
   12cdc:	8809883a 	mov	r4,r17
   12ce0:	0012eec0 	call	12eec <_isatty_r>
   12ce4:	10000826 	beq	r2,zero,12d08 <__smakebuf_r+0xb0>
   12ce8:	8080030b 	ldhu	r2,12(r16)
   12cec:	80c010c4 	addi	r3,r16,67
   12cf0:	80c00015 	stw	r3,0(r16)
   12cf4:	10800054 	ori	r2,r2,1
   12cf8:	8080030d 	sth	r2,12(r16)
   12cfc:	00800044 	movi	r2,1
   12d00:	80c00415 	stw	r3,16(r16)
   12d04:	80800515 	stw	r2,20(r16)
   12d08:	01410004 	movi	r5,1024
   12d0c:	8809883a 	mov	r4,r17
   12d10:	0011ab40 	call	11ab4 <_malloc_r>
   12d14:	10002626 	beq	r2,zero,12db0 <__smakebuf_r+0x158>
   12d18:	80c0030b 	ldhu	r3,12(r16)
   12d1c:	8140038f 	ldh	r5,14(r16)
   12d20:	80800015 	stw	r2,0(r16)
   12d24:	18c02014 	ori	r3,r3,128
   12d28:	80800415 	stw	r2,16(r16)
   12d2c:	00810004 	movi	r2,1024
   12d30:	80c0030d 	sth	r3,12(r16)
   12d34:	80800515 	stw	r2,20(r16)
   12d38:	8809883a 	mov	r4,r17
   12d3c:	0012eec0 	call	12eec <_isatty_r>
   12d40:	80c0030b 	ldhu	r3,12(r16)
   12d44:	1000271e 	bne	r2,zero,12de4 <__smakebuf_r+0x18c>
   12d48:	00820004 	movi	r2,2048
   12d4c:	10c4b03a 	or	r2,r2,r3
   12d50:	8080030d 	sth	r2,12(r16)
   12d54:	003fcf06 	br	12c94 <__smakebuf_r+0x3c>
   12d58:	8080030b 	ldhu	r2,12(r16)
   12d5c:	1080200c 	andi	r2,r2,128
   12d60:	10000d1e 	bne	r2,zero,12d98 <__smakebuf_r+0x140>
   12d64:	04c10004 	movi	r19,1024
   12d68:	0025883a 	mov	r18,zero
   12d6c:	980b883a 	mov	r5,r19
   12d70:	8809883a 	mov	r4,r17
   12d74:	0011ab40 	call	11ab4 <_malloc_r>
   12d78:	10000d26 	beq	r2,zero,12db0 <__smakebuf_r+0x158>
   12d7c:	80c0030b 	ldhu	r3,12(r16)
   12d80:	80800015 	stw	r2,0(r16)
   12d84:	80800415 	stw	r2,16(r16)
   12d88:	18c02014 	ori	r3,r3,128
   12d8c:	84c00515 	stw	r19,20(r16)
   12d90:	9005883a 	mov	r2,r18
   12d94:	003fed06 	br	12d4c <__smakebuf_r+0xf4>
   12d98:	04c01004 	movi	r19,64
   12d9c:	980b883a 	mov	r5,r19
   12da0:	8809883a 	mov	r4,r17
   12da4:	0025883a 	mov	r18,zero
   12da8:	0011ab40 	call	11ab4 <_malloc_r>
   12dac:	103ff31e 	bne	r2,zero,12d7c <__smakebuf_r+0x124>
   12db0:	8080030b 	ldhu	r2,12(r16)
   12db4:	10c0800c 	andi	r3,r2,512
   12db8:	183fb61e 	bne	r3,zero,12c94 <__smakebuf_r+0x3c>
   12dbc:	00ffff04 	movi	r3,-4
   12dc0:	10c4703a 	and	r2,r2,r3
   12dc4:	10800094 	ori	r2,r2,2
   12dc8:	80c010c4 	addi	r3,r16,67
   12dcc:	8080030d 	sth	r2,12(r16)
   12dd0:	00800044 	movi	r2,1
   12dd4:	80c00015 	stw	r3,0(r16)
   12dd8:	80c00415 	stw	r3,16(r16)
   12ddc:	80800515 	stw	r2,20(r16)
   12de0:	003fac06 	br	12c94 <__smakebuf_r+0x3c>
   12de4:	18ffff0c 	andi	r3,r3,65532
   12de8:	00820004 	movi	r2,2048
   12dec:	18c00054 	ori	r3,r3,1
   12df0:	003fd606 	br	12d4c <__smakebuf_r+0xf4>
   12df4:	04c10004 	movi	r19,1024
   12df8:	04820004 	movi	r18,2048
   12dfc:	003fdb06 	br	12d6c <__smakebuf_r+0x114>

00012e00 <__swhatbuf_r>:
   12e00:	deffea04 	addi	sp,sp,-88
   12e04:	dc001215 	stw	r16,72(sp)
   12e08:	2821883a 	mov	r16,r5
   12e0c:	2940038f 	ldh	r5,14(r5)
   12e10:	dc801415 	stw	r18,80(sp)
   12e14:	dc401315 	stw	r17,76(sp)
   12e18:	dfc01515 	stw	ra,84(sp)
   12e1c:	3023883a 	mov	r17,r6
   12e20:	3825883a 	mov	r18,r7
   12e24:	28001016 	blt	r5,zero,12e68 <__swhatbuf_r+0x68>
   12e28:	d80d883a 	mov	r6,sp
   12e2c:	0012e8c0 	call	12e8c <_fstat_r>
   12e30:	10000d16 	blt	r2,zero,12e68 <__swhatbuf_r+0x68>
   12e34:	d8c00117 	ldw	r3,4(sp)
   12e38:	01010004 	movi	r4,1024
   12e3c:	00820004 	movi	r2,2048
   12e40:	18fc000c 	andi	r3,r3,61440
   12e44:	18c80020 	cmpeqi	r3,r3,8192
   12e48:	90c00015 	stw	r3,0(r18)
   12e4c:	89000015 	stw	r4,0(r17)
   12e50:	dfc01517 	ldw	ra,84(sp)
   12e54:	dc801417 	ldw	r18,80(sp)
   12e58:	dc401317 	ldw	r17,76(sp)
   12e5c:	dc001217 	ldw	r16,72(sp)
   12e60:	dec01604 	addi	sp,sp,88
   12e64:	f800283a 	ret
   12e68:	8080030b 	ldhu	r2,12(r16)
   12e6c:	0007883a 	mov	r3,zero
   12e70:	1080200c 	andi	r2,r2,128
   12e74:	10000326 	beq	r2,zero,12e84 <__swhatbuf_r+0x84>
   12e78:	01001004 	movi	r4,64
   12e7c:	0005883a 	mov	r2,zero
   12e80:	003ff106 	br	12e48 <__swhatbuf_r+0x48>
   12e84:	01010004 	movi	r4,1024
   12e88:	003fef06 	br	12e48 <__swhatbuf_r+0x48>

00012e8c <_fstat_r>:
   12e8c:	2807883a 	mov	r3,r5
   12e90:	defffe04 	addi	sp,sp,-8
   12e94:	dc000015 	stw	r16,0(sp)
   12e98:	008000b4 	movhi	r2,2
   12e9c:	300b883a 	mov	r5,r6
   12ea0:	2021883a 	mov	r16,r4
   12ea4:	1809883a 	mov	r4,r3
   12ea8:	dfc00115 	stw	ra,4(sp)
   12eac:	10219315 	stw	zero,-31156(r2)
   12eb0:	001344c0 	call	1344c <fstat>
   12eb4:	10ffffd8 	cmpnei	r3,r2,-1
   12eb8:	18000426 	beq	r3,zero,12ecc <_fstat_r+0x40>
   12ebc:	dfc00117 	ldw	ra,4(sp)
   12ec0:	dc000017 	ldw	r16,0(sp)
   12ec4:	dec00204 	addi	sp,sp,8
   12ec8:	f800283a 	ret
   12ecc:	00c000b4 	movhi	r3,2
   12ed0:	18e19317 	ldw	r3,-31156(r3)
   12ed4:	183ff926 	beq	r3,zero,12ebc <_fstat_r+0x30>
   12ed8:	80c00015 	stw	r3,0(r16)
   12edc:	dfc00117 	ldw	ra,4(sp)
   12ee0:	dc000017 	ldw	r16,0(sp)
   12ee4:	dec00204 	addi	sp,sp,8
   12ee8:	f800283a 	ret

00012eec <_isatty_r>:
   12eec:	defffe04 	addi	sp,sp,-8
   12ef0:	dc000015 	stw	r16,0(sp)
   12ef4:	008000b4 	movhi	r2,2
   12ef8:	2021883a 	mov	r16,r4
   12efc:	2809883a 	mov	r4,r5
   12f00:	dfc00115 	stw	ra,4(sp)
   12f04:	10219315 	stw	zero,-31156(r2)
   12f08:	00135440 	call	13544 <isatty>
   12f0c:	10ffffd8 	cmpnei	r3,r2,-1
   12f10:	18000426 	beq	r3,zero,12f24 <_isatty_r+0x38>
   12f14:	dfc00117 	ldw	ra,4(sp)
   12f18:	dc000017 	ldw	r16,0(sp)
   12f1c:	dec00204 	addi	sp,sp,8
   12f20:	f800283a 	ret
   12f24:	00c000b4 	movhi	r3,2
   12f28:	18e19317 	ldw	r3,-31156(r3)
   12f2c:	183ff926 	beq	r3,zero,12f14 <_isatty_r+0x28>
   12f30:	80c00015 	stw	r3,0(r16)
   12f34:	dfc00117 	ldw	ra,4(sp)
   12f38:	dc000017 	ldw	r16,0(sp)
   12f3c:	dec00204 	addi	sp,sp,8
   12f40:	f800283a 	ret

00012f44 <_sbrk_r>:
   12f44:	defffe04 	addi	sp,sp,-8
   12f48:	dc000015 	stw	r16,0(sp)
   12f4c:	008000b4 	movhi	r2,2
   12f50:	2021883a 	mov	r16,r4
   12f54:	2809883a 	mov	r4,r5
   12f58:	dfc00115 	stw	ra,4(sp)
   12f5c:	10219315 	stw	zero,-31156(r2)
   12f60:	0013a740 	call	13a74 <sbrk>
   12f64:	10ffffd8 	cmpnei	r3,r2,-1
   12f68:	18000426 	beq	r3,zero,12f7c <_sbrk_r+0x38>
   12f6c:	dfc00117 	ldw	ra,4(sp)
   12f70:	dc000017 	ldw	r16,0(sp)
   12f74:	dec00204 	addi	sp,sp,8
   12f78:	f800283a 	ret
   12f7c:	00c000b4 	movhi	r3,2
   12f80:	18e19317 	ldw	r3,-31156(r3)
   12f84:	183ff926 	beq	r3,zero,12f6c <_sbrk_r+0x28>
   12f88:	80c00015 	stw	r3,0(r16)
   12f8c:	dfc00117 	ldw	ra,4(sp)
   12f90:	dc000017 	ldw	r16,0(sp)
   12f94:	dec00204 	addi	sp,sp,8
   12f98:	f800283a 	ret

00012f9c <__call_exitprocs>:
   12f9c:	defff804 	addi	sp,sp,-32
   12fa0:	008000b4 	movhi	r2,2
   12fa4:	dc800215 	stw	r18,8(sp)
   12fa8:	14a19817 	ldw	r18,-31136(r2)
   12fac:	dfc00715 	stw	ra,28(sp)
   12fb0:	dd800615 	stw	r22,24(sp)
   12fb4:	dd400515 	stw	r21,20(sp)
   12fb8:	dd000415 	stw	r20,16(sp)
   12fbc:	dcc00315 	stw	r19,12(sp)
   12fc0:	dc400115 	stw	r17,4(sp)
   12fc4:	dc000015 	stw	r16,0(sp)
   12fc8:	90001026 	beq	r18,zero,1300c <__call_exitprocs+0x70>
   12fcc:	2029883a 	mov	r20,r4
   12fd0:	282b883a 	mov	r21,r5
   12fd4:	04c00044 	movi	r19,1
   12fd8:	94000117 	ldw	r16,4(r18)
   12fdc:	847fffc4 	addi	r17,r16,-1
   12fe0:	88000a16 	blt	r17,zero,1300c <__call_exitprocs+0x70>
   12fe4:	84000044 	addi	r16,r16,1
   12fe8:	802090ba 	slli	r16,r16,2
   12fec:	9421883a 	add	r16,r18,r16
   12ff0:	a8001026 	beq	r21,zero,13034 <__call_exitprocs+0x98>
   12ff4:	80804017 	ldw	r2,256(r16)
   12ff8:	15400e26 	beq	r2,r21,13034 <__call_exitprocs+0x98>
   12ffc:	8c7fffc4 	addi	r17,r17,-1
   13000:	88bfffd8 	cmpnei	r2,r17,-1
   13004:	843fff04 	addi	r16,r16,-4
   13008:	103ff91e 	bne	r2,zero,12ff0 <__call_exitprocs+0x54>
   1300c:	dfc00717 	ldw	ra,28(sp)
   13010:	dd800617 	ldw	r22,24(sp)
   13014:	dd400517 	ldw	r21,20(sp)
   13018:	dd000417 	ldw	r20,16(sp)
   1301c:	dcc00317 	ldw	r19,12(sp)
   13020:	dc800217 	ldw	r18,8(sp)
   13024:	dc400117 	ldw	r17,4(sp)
   13028:	dc000017 	ldw	r16,0(sp)
   1302c:	dec00804 	addi	sp,sp,32
   13030:	f800283a 	ret
   13034:	90800117 	ldw	r2,4(r18)
   13038:	81800017 	ldw	r6,0(r16)
   1303c:	10bfffc4 	addi	r2,r2,-1
   13040:	14401826 	beq	r2,r17,130a4 <__call_exitprocs+0x108>
   13044:	80000015 	stw	zero,0(r16)
   13048:	303fec26 	beq	r6,zero,12ffc <__call_exitprocs+0x60>
   1304c:	9c46983a 	sll	r3,r19,r17
   13050:	90806217 	ldw	r2,392(r18)
   13054:	95800117 	ldw	r22,4(r18)
   13058:	1884703a 	and	r2,r3,r2
   1305c:	1000091e 	bne	r2,zero,13084 <__call_exitprocs+0xe8>
   13060:	303ee83a 	callr	r6
   13064:	90c00117 	ldw	r3,4(r18)
   13068:	008000b4 	movhi	r2,2
   1306c:	10a19817 	ldw	r2,-31136(r2)
   13070:	1d80011e 	bne	r3,r22,13078 <__call_exitprocs+0xdc>
   13074:	14bfe126 	beq	r2,r18,12ffc <__call_exitprocs+0x60>
   13078:	103fe426 	beq	r2,zero,1300c <__call_exitprocs+0x70>
   1307c:	1025883a 	mov	r18,r2
   13080:	003fd506 	br	12fd8 <__call_exitprocs+0x3c>
   13084:	90806317 	ldw	r2,396(r18)
   13088:	81002017 	ldw	r4,128(r16)
   1308c:	1886703a 	and	r3,r3,r2
   13090:	1800061e 	bne	r3,zero,130ac <__call_exitprocs+0x110>
   13094:	200b883a 	mov	r5,r4
   13098:	a009883a 	mov	r4,r20
   1309c:	303ee83a 	callr	r6
   130a0:	003ff006 	br	13064 <__call_exitprocs+0xc8>
   130a4:	94400115 	stw	r17,4(r18)
   130a8:	003fe706 	br	13048 <__call_exitprocs+0xac>
   130ac:	303ee83a 	callr	r6
   130b0:	003fec06 	br	13064 <__call_exitprocs+0xc8>

000130b4 <__divsi3>:
   130b4:	20001a16 	blt	r4,zero,13120 <__divsi3+0x6c>
   130b8:	000f883a 	mov	r7,zero
   130bc:	2800020e 	bge	r5,zero,130c8 <__divsi3+0x14>
   130c0:	014bc83a 	sub	r5,zero,r5
   130c4:	39c0005c 	xori	r7,r7,1
   130c8:	200d883a 	mov	r6,r4
   130cc:	00c00044 	movi	r3,1
   130d0:	2900092e 	bgeu	r5,r4,130f8 <__divsi3+0x44>
   130d4:	00800804 	movi	r2,32
   130d8:	00c00044 	movi	r3,1
   130dc:	00000106 	br	130e4 <__divsi3+0x30>
   130e0:	10001226 	beq	r2,zero,1312c <__divsi3+0x78>
   130e4:	294b883a 	add	r5,r5,r5
   130e8:	10bfffc4 	addi	r2,r2,-1
   130ec:	18c7883a 	add	r3,r3,r3
   130f0:	293ffb36 	bltu	r5,r4,130e0 <__divsi3+0x2c>
   130f4:	18000d26 	beq	r3,zero,1312c <__divsi3+0x78>
   130f8:	0005883a 	mov	r2,zero
   130fc:	31400236 	bltu	r6,r5,13108 <__divsi3+0x54>
   13100:	314dc83a 	sub	r6,r6,r5
   13104:	10c4b03a 	or	r2,r2,r3
   13108:	1806d07a 	srli	r3,r3,1
   1310c:	280ad07a 	srli	r5,r5,1
   13110:	183ffa1e 	bne	r3,zero,130fc <__divsi3+0x48>
   13114:	38000126 	beq	r7,zero,1311c <__divsi3+0x68>
   13118:	0085c83a 	sub	r2,zero,r2
   1311c:	f800283a 	ret
   13120:	0109c83a 	sub	r4,zero,r4
   13124:	01c00044 	movi	r7,1
   13128:	003fe406 	br	130bc <__divsi3+0x8>
   1312c:	0005883a 	mov	r2,zero
   13130:	003ff806 	br	13114 <__divsi3+0x60>

00013134 <__modsi3>:
   13134:	20001716 	blt	r4,zero,13194 <__modsi3+0x60>
   13138:	000f883a 	mov	r7,zero
   1313c:	2005883a 	mov	r2,r4
   13140:	2800010e 	bge	r5,zero,13148 <__modsi3+0x14>
   13144:	014bc83a 	sub	r5,zero,r5
   13148:	00c00044 	movi	r3,1
   1314c:	2900092e 	bgeu	r5,r4,13174 <__modsi3+0x40>
   13150:	01800804 	movi	r6,32
   13154:	00c00044 	movi	r3,1
   13158:	00000106 	br	13160 <__modsi3+0x2c>
   1315c:	30001026 	beq	r6,zero,131a0 <__modsi3+0x6c>
   13160:	294b883a 	add	r5,r5,r5
   13164:	31bfffc4 	addi	r6,r6,-1
   13168:	18c7883a 	add	r3,r3,r3
   1316c:	293ffb36 	bltu	r5,r4,1315c <__modsi3+0x28>
   13170:	18000b26 	beq	r3,zero,131a0 <__modsi3+0x6c>
   13174:	1806d07a 	srli	r3,r3,1
   13178:	11400136 	bltu	r2,r5,13180 <__modsi3+0x4c>
   1317c:	1145c83a 	sub	r2,r2,r5
   13180:	280ad07a 	srli	r5,r5,1
   13184:	183ffb1e 	bne	r3,zero,13174 <__modsi3+0x40>
   13188:	38000126 	beq	r7,zero,13190 <__modsi3+0x5c>
   1318c:	0085c83a 	sub	r2,zero,r2
   13190:	f800283a 	ret
   13194:	0109c83a 	sub	r4,zero,r4
   13198:	01c00044 	movi	r7,1
   1319c:	003fe706 	br	1313c <__modsi3+0x8>
   131a0:	2005883a 	mov	r2,r4
   131a4:	003ff806 	br	13188 <__modsi3+0x54>

000131a8 <__udivsi3>:
   131a8:	200d883a 	mov	r6,r4
   131ac:	2900152e 	bgeu	r5,r4,13204 <__udivsi3+0x5c>
   131b0:	28001416 	blt	r5,zero,13204 <__udivsi3+0x5c>
   131b4:	00800804 	movi	r2,32
   131b8:	00c00044 	movi	r3,1
   131bc:	00000206 	br	131c8 <__udivsi3+0x20>
   131c0:	10000e26 	beq	r2,zero,131fc <__udivsi3+0x54>
   131c4:	28000416 	blt	r5,zero,131d8 <__udivsi3+0x30>
   131c8:	294b883a 	add	r5,r5,r5
   131cc:	10bfffc4 	addi	r2,r2,-1
   131d0:	18c7883a 	add	r3,r3,r3
   131d4:	293ffa36 	bltu	r5,r4,131c0 <__udivsi3+0x18>
   131d8:	18000826 	beq	r3,zero,131fc <__udivsi3+0x54>
   131dc:	0005883a 	mov	r2,zero
   131e0:	31400236 	bltu	r6,r5,131ec <__udivsi3+0x44>
   131e4:	314dc83a 	sub	r6,r6,r5
   131e8:	10c4b03a 	or	r2,r2,r3
   131ec:	1806d07a 	srli	r3,r3,1
   131f0:	280ad07a 	srli	r5,r5,1
   131f4:	183ffa1e 	bne	r3,zero,131e0 <__udivsi3+0x38>
   131f8:	f800283a 	ret
   131fc:	0005883a 	mov	r2,zero
   13200:	f800283a 	ret
   13204:	00c00044 	movi	r3,1
   13208:	003ff406 	br	131dc <__udivsi3+0x34>

0001320c <__umodsi3>:
   1320c:	2005883a 	mov	r2,r4
   13210:	2900132e 	bgeu	r5,r4,13260 <__umodsi3+0x54>
   13214:	28001216 	blt	r5,zero,13260 <__umodsi3+0x54>
   13218:	01800804 	movi	r6,32
   1321c:	00c00044 	movi	r3,1
   13220:	00000206 	br	1322c <__umodsi3+0x20>
   13224:	30000c26 	beq	r6,zero,13258 <__umodsi3+0x4c>
   13228:	28000416 	blt	r5,zero,1323c <__umodsi3+0x30>
   1322c:	294b883a 	add	r5,r5,r5
   13230:	31bfffc4 	addi	r6,r6,-1
   13234:	18c7883a 	add	r3,r3,r3
   13238:	293ffa36 	bltu	r5,r4,13224 <__umodsi3+0x18>
   1323c:	18000626 	beq	r3,zero,13258 <__umodsi3+0x4c>
   13240:	1806d07a 	srli	r3,r3,1
   13244:	11400136 	bltu	r2,r5,1324c <__umodsi3+0x40>
   13248:	1145c83a 	sub	r2,r2,r5
   1324c:	280ad07a 	srli	r5,r5,1
   13250:	183ffb1e 	bne	r3,zero,13240 <__umodsi3+0x34>
   13254:	f800283a 	ret
   13258:	2005883a 	mov	r2,r4
   1325c:	f800283a 	ret
   13260:	00c00044 	movi	r3,1
   13264:	003ff606 	br	13240 <__umodsi3+0x34>

00013268 <__mulsi3>:
   13268:	0005883a 	mov	r2,zero
   1326c:	20000726 	beq	r4,zero,1328c <__mulsi3+0x24>
   13270:	20c0004c 	andi	r3,r4,1
   13274:	2008d07a 	srli	r4,r4,1
   13278:	18000126 	beq	r3,zero,13280 <__mulsi3+0x18>
   1327c:	1145883a 	add	r2,r2,r5
   13280:	294b883a 	add	r5,r5,r5
   13284:	203ffa1e 	bne	r4,zero,13270 <__mulsi3+0x8>
   13288:	f800283a 	ret
   1328c:	f800283a 	ret

00013290 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
   13290:	defffe04 	addi	sp,sp,-8
   13294:	dfc00115 	stw	ra,4(sp)
   13298:	df000015 	stw	fp,0(sp)
   1329c:	d839883a 	mov	fp,sp
     */
   132a0:	d0a00817 	ldw	r2,-32736(gp)
   132a4:	10000326 	beq	r2,zero,132b4 <alt_get_errno+0x24>
   132a8:	d0a00817 	ldw	r2,-32736(gp)
   132ac:	103ee83a 	callr	r2
   132b0:	00000106 	br	132b8 <alt_get_errno+0x28>
   132b4:	d0a5e804 	addi	r2,gp,-26720

   132b8:	e037883a 	mov	sp,fp
   132bc:	dfc00117 	ldw	ra,4(sp)
   132c0:	df000017 	ldw	fp,0(sp)
   132c4:	dec00204 	addi	sp,sp,8
   132c8:	f800283a 	ret

000132cc <close>:
{
   132cc:	defffb04 	addi	sp,sp,-20
   132d0:	dfc00415 	stw	ra,16(sp)
   132d4:	df000315 	stw	fp,12(sp)
   132d8:	df000304 	addi	fp,sp,12
   132dc:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   132e0:	e0bffd17 	ldw	r2,-12(fp)
   132e4:	10000916 	blt	r2,zero,1330c <close+0x40>
   132e8:	e0fffd17 	ldw	r3,-12(fp)
   132ec:	1805883a 	mov	r2,r3
   132f0:	1085883a 	add	r2,r2,r2
   132f4:	10c5883a 	add	r2,r2,r3
   132f8:	100490ba 	slli	r2,r2,2
   132fc:	00c00074 	movhi	r3,1
   13300:	18d73304 	addi	r3,r3,23756
   13304:	10c5883a 	add	r2,r2,r3
   13308:	00000106 	br	13310 <close+0x44>
   1330c:	0005883a 	mov	r2,zero
   13310:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
   13314:	e0bfff17 	ldw	r2,-4(fp)
   13318:	10001926 	beq	r2,zero,13380 <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1331c:	e0bfff17 	ldw	r2,-4(fp)
   13320:	10800017 	ldw	r2,0(r2)
   13324:	10800417 	ldw	r2,16(r2)
   13328:	10000626 	beq	r2,zero,13344 <close+0x78>
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	10800017 	ldw	r2,0(r2)
   13334:	10800417 	ldw	r2,16(r2)
   13338:	e13fff17 	ldw	r4,-4(fp)
   1333c:	103ee83a 	callr	r2
   13340:	00000106 	br	13348 <close+0x7c>
   13344:	0005883a 	mov	r2,zero
   13348:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1334c:	e13ffd17 	ldw	r4,-12(fp)
   13350:	0013a040 	call	13a04 <alt_release_fd>
    if (rval < 0)
   13354:	e0bffe17 	ldw	r2,-8(fp)
   13358:	1000070e 	bge	r2,zero,13378 <close+0xac>
    {
      ALT_ERRNO = -rval;
   1335c:	00132900 	call	13290 <alt_get_errno>
   13360:	1007883a 	mov	r3,r2
   13364:	e0bffe17 	ldw	r2,-8(fp)
   13368:	0085c83a 	sub	r2,zero,r2
   1336c:	18800015 	stw	r2,0(r3)
      return -1;
   13370:	00bfffc4 	movi	r2,-1
   13374:	00000706 	br	13394 <close+0xc8>
    }
    return 0;
   13378:	0005883a 	mov	r2,zero
   1337c:	00000506 	br	13394 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13380:	00132900 	call	13290 <alt_get_errno>
   13384:	1007883a 	mov	r3,r2
   13388:	00801444 	movi	r2,81
   1338c:	18800015 	stw	r2,0(r3)
    return -1;
   13390:	00bfffc4 	movi	r2,-1
  }
}
   13394:	e037883a 	mov	sp,fp
   13398:	dfc00117 	ldw	ra,4(sp)
   1339c:	df000017 	ldw	fp,0(sp)
   133a0:	dec00204 	addi	sp,sp,8
   133a4:	f800283a 	ret

000133a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   133a8:	defffc04 	addi	sp,sp,-16
   133ac:	df000315 	stw	fp,12(sp)
   133b0:	df000304 	addi	fp,sp,12
   133b4:	e13fff15 	stw	r4,-4(fp)
   133b8:	e17ffe15 	stw	r5,-8(fp)
   133bc:	e1bffd15 	stw	r6,-12(fp)
  return len;
   133c0:	e0bffd17 	ldw	r2,-12(fp)
}
   133c4:	e037883a 	mov	sp,fp
   133c8:	df000017 	ldw	fp,0(sp)
   133cc:	dec00104 	addi	sp,sp,4
   133d0:	f800283a 	ret

000133d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   133d4:	defffd04 	addi	sp,sp,-12
   133d8:	df000215 	stw	fp,8(sp)
   133dc:	df000204 	addi	fp,sp,8
   133e0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   133e4:	0001883a 	nop
   133e8:	e0bffe17 	ldw	r2,-8(fp)
   133ec:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   133f0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   133f4:	10000226 	beq	r2,zero,13400 <_exit+0x2c>
    ALT_SIM_FAIL();
   133f8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   133fc:	00000106 	br	13404 <_exit+0x30>
    ALT_SIM_PASS();
   13400:	002af0b0 	cmpltui	zero,zero,43970
}
   13404:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13408:	0001883a 	nop
   1340c:	003ffe06 	br	13408 <_exit+0x34>

00013410 <alt_get_errno>:
        return 0;
    default:
        return -1;
    }

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
   13410:	defffe04 	addi	sp,sp,-8
   13414:	dfc00115 	stw	ra,4(sp)
   13418:	df000015 	stw	fp,0(sp)
   1341c:	d839883a 	mov	fp,sp
    /* Generate a link time warning, should this function ever be called. */
   13420:	d0a00817 	ldw	r2,-32736(gp)
   13424:	10000326 	beq	r2,zero,13434 <alt_get_errno+0x24>
   13428:	d0a00817 	ldw	r2,-32736(gp)
   1342c:	103ee83a 	callr	r2
   13430:	00000106 	br	13438 <alt_get_errno+0x28>
   13434:	d0a5e804 	addi	r2,gp,-26720
    ALT_STUB_WARNING(fstat);
   13438:	e037883a 	mov	sp,fp
   1343c:	dfc00117 	ldw	ra,4(sp)
   13440:	df000017 	ldw	fp,0(sp)
   13444:	dec00204 	addi	sp,sp,8
   13448:	f800283a 	ret

0001344c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1344c:	defffb04 	addi	sp,sp,-20
   13450:	dfc00415 	stw	ra,16(sp)
   13454:	df000315 	stw	fp,12(sp)
   13458:	df000304 	addi	fp,sp,12
   1345c:	e13ffe15 	stw	r4,-8(fp)
   13460:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13464:	e0bffe17 	ldw	r2,-8(fp)
   13468:	10000916 	blt	r2,zero,13490 <fstat+0x44>
   1346c:	e0fffe17 	ldw	r3,-8(fp)
   13470:	1805883a 	mov	r2,r3
   13474:	1085883a 	add	r2,r2,r2
   13478:	10c5883a 	add	r2,r2,r3
   1347c:	100490ba 	slli	r2,r2,2
   13480:	00c00074 	movhi	r3,1
   13484:	18d73304 	addi	r3,r3,23756
   13488:	10c5883a 	add	r2,r2,r3
   1348c:	00000106 	br	13494 <fstat+0x48>
   13490:	0005883a 	mov	r2,zero
   13494:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13498:	e0bfff17 	ldw	r2,-4(fp)
   1349c:	10001026 	beq	r2,zero,134e0 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   134a0:	e0bfff17 	ldw	r2,-4(fp)
   134a4:	10800017 	ldw	r2,0(r2)
   134a8:	10800817 	ldw	r2,32(r2)
   134ac:	10000726 	beq	r2,zero,134cc <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   134b0:	e0bfff17 	ldw	r2,-4(fp)
   134b4:	10800017 	ldw	r2,0(r2)
   134b8:	10800817 	ldw	r2,32(r2)
   134bc:	e17ffd17 	ldw	r5,-12(fp)
   134c0:	e13fff17 	ldw	r4,-4(fp)
   134c4:	103ee83a 	callr	r2
   134c8:	00000a06 	br	134f4 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   134cc:	e0bffd17 	ldw	r2,-12(fp)
   134d0:	00c80004 	movi	r3,8192
   134d4:	10c00115 	stw	r3,4(r2)
      return 0;
   134d8:	0005883a 	mov	r2,zero
   134dc:	00000506 	br	134f4 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134e0:	00134100 	call	13410 <alt_get_errno>
   134e4:	1007883a 	mov	r3,r2
   134e8:	00801444 	movi	r2,81
   134ec:	18800015 	stw	r2,0(r3)
    return -1;
   134f0:	00bfffc4 	movi	r2,-1
  }
}
   134f4:	e037883a 	mov	sp,fp
   134f8:	dfc00117 	ldw	ra,4(sp)
   134fc:	df000017 	ldw	fp,0(sp)
   13500:	dec00204 	addi	sp,sp,8
   13504:	f800283a 	ret

00013508 <alt_get_errno>:
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
   13508:	defffe04 	addi	sp,sp,-8
   1350c:	dfc00115 	stw	ra,4(sp)
   13510:	df000015 	stw	fp,0(sp)
   13514:	d839883a 	mov	fp,sp
int ALT_ISATTY (int file)
   13518:	d0a00817 	ldw	r2,-32736(gp)
   1351c:	10000326 	beq	r2,zero,1352c <alt_get_errno+0x24>
   13520:	d0a00817 	ldw	r2,-32736(gp)
   13524:	103ee83a 	callr	r2
   13528:	00000106 	br	13530 <alt_get_errno+0x28>
   1352c:	d0a5e804 	addi	r2,gp,-26720
{
   13530:	e037883a 	mov	sp,fp
   13534:	dfc00117 	ldw	ra,4(sp)
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00204 	addi	sp,sp,8
   13540:	f800283a 	ret

00013544 <isatty>:
   13544:	deffea04 	addi	sp,sp,-88
   13548:	dfc01515 	stw	ra,84(sp)
   1354c:	df001415 	stw	fp,80(sp)
   13550:	df001404 	addi	fp,sp,80
   13554:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13558:	e0bfec17 	ldw	r2,-80(fp)
   1355c:	10000916 	blt	r2,zero,13584 <isatty+0x40>
   13560:	e0ffec17 	ldw	r3,-80(fp)
   13564:	1805883a 	mov	r2,r3
   13568:	1085883a 	add	r2,r2,r2
   1356c:	10c5883a 	add	r2,r2,r3
   13570:	100490ba 	slli	r2,r2,2
   13574:	00c00074 	movhi	r3,1
   13578:	18d73304 	addi	r3,r3,23756
   1357c:	10c5883a 	add	r2,r2,r3
   13580:	00000106 	br	13588 <isatty+0x44>
   13584:	0005883a 	mov	r2,zero
   13588:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1358c:	e0bfff17 	ldw	r2,-4(fp)
   13590:	10000e26 	beq	r2,zero,135cc <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13594:	e0bfff17 	ldw	r2,-4(fp)
   13598:	10800017 	ldw	r2,0(r2)
   1359c:	10800817 	ldw	r2,32(r2)
   135a0:	1000021e 	bne	r2,zero,135ac <isatty+0x68>
    {
      return 1;
   135a4:	00800044 	movi	r2,1
   135a8:	00000d06 	br	135e0 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   135ac:	e0bfed04 	addi	r2,fp,-76
   135b0:	100b883a 	mov	r5,r2
   135b4:	e13fec17 	ldw	r4,-80(fp)
   135b8:	001344c0 	call	1344c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   135bc:	e0bfee17 	ldw	r2,-72(fp)
   135c0:	10880020 	cmpeqi	r2,r2,8192
   135c4:	10803fcc 	andi	r2,r2,255
   135c8:	00000506 	br	135e0 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   135cc:	00135080 	call	13508 <alt_get_errno>
   135d0:	1007883a 	mov	r3,r2
   135d4:	00801444 	movi	r2,81
   135d8:	18800015 	stw	r2,0(r3)
    return 0;
   135dc:	0005883a 	mov	r2,zero
  }
}
   135e0:	e037883a 	mov	sp,fp
   135e4:	dfc00117 	ldw	ra,4(sp)
   135e8:	df000017 	ldw	fp,0(sp)
   135ec:	dec00204 	addi	sp,sp,8
   135f0:	f800283a 	ret

000135f4 <alt_load_section>:
   135f4:	defffc04 	addi	sp,sp,-16
   135f8:	df000315 	stw	fp,12(sp)
   135fc:	df000304 	addi	fp,sp,12
   13600:	e13fff15 	stw	r4,-4(fp)
   13604:	e17ffe15 	stw	r5,-8(fp)
   13608:	e1bffd15 	stw	r6,-12(fp)
   1360c:	e0fffe17 	ldw	r3,-8(fp)
   13610:	e0bfff17 	ldw	r2,-4(fp)
   13614:	18800c26 	beq	r3,r2,13648 <alt_load_section+0x54>
   13618:	00000806 	br	1363c <alt_load_section+0x48>
   1361c:	e0ffff17 	ldw	r3,-4(fp)
   13620:	18800104 	addi	r2,r3,4
   13624:	e0bfff15 	stw	r2,-4(fp)
   13628:	e0bffe17 	ldw	r2,-8(fp)
   1362c:	11000104 	addi	r4,r2,4
   13630:	e13ffe15 	stw	r4,-8(fp)
   13634:	18c00017 	ldw	r3,0(r3)
   13638:	10c00015 	stw	r3,0(r2)
   1363c:	e0fffe17 	ldw	r3,-8(fp)
   13640:	e0bffd17 	ldw	r2,-12(fp)
   13644:	18bff51e 	bne	r3,r2,1361c <alt_load_section+0x28>
   13648:	0001883a 	nop
   1364c:	e037883a 	mov	sp,fp
   13650:	df000017 	ldw	fp,0(sp)
   13654:	dec00104 	addi	sp,sp,4
   13658:	f800283a 	ret

0001365c <alt_load>:
   1365c:	defffe04 	addi	sp,sp,-8
   13660:	dfc00115 	stw	ra,4(sp)
   13664:	df000015 	stw	fp,0(sp)
   13668:	d839883a 	mov	fp,sp
   1366c:	01800074 	movhi	r6,1
   13670:	319bb804 	addi	r6,r6,28384
   13674:	01400074 	movhi	r5,1
   13678:	2955dd04 	addi	r5,r5,22388
   1367c:	01000074 	movhi	r4,1
   13680:	211bb804 	addi	r4,r4,28384
   13684:	00135f40 	call	135f4 <alt_load_section>
   13688:	01800074 	movhi	r6,1
   1368c:	31808904 	addi	r6,r6,548
   13690:	01400074 	movhi	r5,1
   13694:	29400804 	addi	r5,r5,32
   13698:	01000074 	movhi	r4,1
   1369c:	21000804 	addi	r4,r4,32
   136a0:	00135f40 	call	135f4 <alt_load_section>
   136a4:	01800074 	movhi	r6,1
   136a8:	3195dd04 	addi	r6,r6,22388
   136ac:	01400074 	movhi	r5,1
   136b0:	2955cb04 	addi	r5,r5,22316
   136b4:	01000074 	movhi	r4,1
   136b8:	2115cb04 	addi	r4,r4,22316
   136bc:	00135f40 	call	135f4 <alt_load_section>
   136c0:	00149080 	call	14908 <alt_dcache_flush_all>
   136c4:	0014ad40 	call	14ad4 <alt_icache_flush_all>
   136c8:	0001883a 	nop
   136cc:	e037883a 	mov	sp,fp
   136d0:	dfc00117 	ldw	ra,4(sp)
   136d4:	df000017 	ldw	fp,0(sp)
   136d8:	dec00204 	addi	sp,sp,8
   136dc:	f800283a 	ret

000136e0 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   136e0:	defffe04 	addi	sp,sp,-8
   136e4:	dfc00115 	stw	ra,4(sp)
   136e8:	df000015 	stw	fp,0(sp)
   136ec:	d839883a 	mov	fp,sp
  
   136f0:	d0a00817 	ldw	r2,-32736(gp)
   136f4:	10000326 	beq	r2,zero,13704 <alt_get_errno+0x24>
   136f8:	d0a00817 	ldw	r2,-32736(gp)
   136fc:	103ee83a 	callr	r2
   13700:	00000106 	br	13708 <alt_get_errno+0x28>
   13704:	d0a5e804 	addi	r2,gp,-26720
  if (fd) 
   13708:	e037883a 	mov	sp,fp
   1370c:	dfc00117 	ldw	ra,4(sp)
   13710:	df000017 	ldw	fp,0(sp)
   13714:	dec00204 	addi	sp,sp,8
   13718:	f800283a 	ret

0001371c <lseek>:
{
   1371c:	defff904 	addi	sp,sp,-28
   13720:	dfc00615 	stw	ra,24(sp)
   13724:	df000515 	stw	fp,20(sp)
   13728:	df000504 	addi	fp,sp,20
   1372c:	e13ffd15 	stw	r4,-12(fp)
   13730:	e17ffc15 	stw	r5,-16(fp)
   13734:	e1bffb15 	stw	r6,-20(fp)
  off_t   rc = 0; 
   13738:	e03fff15 	stw	zero,-4(fp)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1373c:	e0bffd17 	ldw	r2,-12(fp)
   13740:	10000916 	blt	r2,zero,13768 <lseek+0x4c>
   13744:	e0fffd17 	ldw	r3,-12(fp)
   13748:	1805883a 	mov	r2,r3
   1374c:	1085883a 	add	r2,r2,r2
   13750:	10c5883a 	add	r2,r2,r3
   13754:	100490ba 	slli	r2,r2,2
   13758:	00c00074 	movhi	r3,1
   1375c:	18d73304 	addi	r3,r3,23756
   13760:	10c5883a 	add	r2,r2,r3
   13764:	00000106 	br	1376c <lseek+0x50>
   13768:	0005883a 	mov	r2,zero
   1376c:	e0bffe15 	stw	r2,-8(fp)
  if (fd) 
   13770:	e0bffe17 	ldw	r2,-8(fp)
   13774:	10001026 	beq	r2,zero,137b8 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13778:	e0bffe17 	ldw	r2,-8(fp)
   1377c:	10800017 	ldw	r2,0(r2)
   13780:	10800717 	ldw	r2,28(r2)
   13784:	10000926 	beq	r2,zero,137ac <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13788:	e0bffe17 	ldw	r2,-8(fp)
   1378c:	10800017 	ldw	r2,0(r2)
   13790:	10800717 	ldw	r2,28(r2)
   13794:	e1bffb17 	ldw	r6,-20(fp)
   13798:	e17ffc17 	ldw	r5,-16(fp)
   1379c:	e13ffe17 	ldw	r4,-8(fp)
   137a0:	103ee83a 	callr	r2
   137a4:	e0bfff15 	stw	r2,-4(fp)
   137a8:	00000506 	br	137c0 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   137ac:	00bfde84 	movi	r2,-134
   137b0:	e0bfff15 	stw	r2,-4(fp)
   137b4:	00000206 	br	137c0 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   137b8:	00bfebc4 	movi	r2,-81
   137bc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	1000070e 	bge	r2,zero,137e4 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   137c8:	00136e00 	call	136e0 <alt_get_errno>
   137cc:	1007883a 	mov	r3,r2
   137d0:	e0bfff17 	ldw	r2,-4(fp)
   137d4:	0085c83a 	sub	r2,zero,r2
   137d8:	18800015 	stw	r2,0(r3)
    rc = -1;
   137dc:	00bfffc4 	movi	r2,-1
   137e0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   137e4:	e0bfff17 	ldw	r2,-4(fp)
}
   137e8:	e037883a 	mov	sp,fp
   137ec:	dfc00117 	ldw	ra,4(sp)
   137f0:	df000017 	ldw	fp,0(sp)
   137f4:	dec00204 	addi	sp,sp,8
   137f8:	f800283a 	ret

000137fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   137fc:	defffd04 	addi	sp,sp,-12
   13800:	dfc00215 	stw	ra,8(sp)
   13804:	df000115 	stw	fp,4(sp)
   13808:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1380c:	0009883a 	mov	r4,zero
   13810:	0013ca00 	call	13ca0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13814:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13818:	0013cdc0 	call	13cdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1381c:	01800074 	movhi	r6,1
   13820:	3195d304 	addi	r6,r6,22348
   13824:	01400074 	movhi	r5,1
   13828:	2955d304 	addi	r5,r5,22348
   1382c:	01000074 	movhi	r4,1
   13830:	2115d304 	addi	r4,r4,22348
   13834:	0014e600 	call	14e60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13838:	0014a0c0 	call	14a0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1383c:	01000074 	movhi	r4,1
   13840:	21129c04 	addi	r4,r4,19056
   13844:	001560c0 	call	1560c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13848:	d0a5ee17 	ldw	r2,-26696(gp)
   1384c:	d0e5ef17 	ldw	r3,-26692(gp)
   13850:	d125f017 	ldw	r4,-26688(gp)
   13854:	200d883a 	mov	r6,r4
   13858:	180b883a 	mov	r5,r3
   1385c:	1009883a 	mov	r4,r2
   13860:	00102600 	call	10260 <main>
   13864:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13868:	01000044 	movi	r4,1
   1386c:	00132cc0 	call	132cc <close>
  exit (result);
   13870:	e13fff17 	ldw	r4,-4(fp)
   13874:	00116580 	call	11658 <exit>

00013878 <__malloc_lock>:
   13878:	defffe04 	addi	sp,sp,-8
   1387c:	df000115 	stw	fp,4(sp)
   13880:	df000104 	addi	fp,sp,4
   13884:	e13fff15 	stw	r4,-4(fp)
   13888:	0001883a 	nop
   1388c:	e037883a 	mov	sp,fp
   13890:	df000017 	ldw	fp,0(sp)
   13894:	dec00104 	addi	sp,sp,4
   13898:	f800283a 	ret

0001389c <__malloc_unlock>:
   1389c:	defffe04 	addi	sp,sp,-8
   138a0:	df000115 	stw	fp,4(sp)
   138a4:	df000104 	addi	fp,sp,4
   138a8:	e13fff15 	stw	r4,-4(fp)
   138ac:	0001883a 	nop
   138b0:	e037883a 	mov	sp,fp
   138b4:	df000017 	ldw	fp,0(sp)
   138b8:	dec00104 	addi	sp,sp,4
   138bc:	f800283a 	ret

000138c0 <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

   138c0:	defffe04 	addi	sp,sp,-8
   138c4:	dfc00115 	stw	ra,4(sp)
   138c8:	df000015 	stw	fp,0(sp)
   138cc:	d839883a 	mov	fp,sp
int ALT_READ (int file, void *ptr, size_t len)
   138d0:	d0a00817 	ldw	r2,-32736(gp)
   138d4:	10000326 	beq	r2,zero,138e4 <alt_get_errno+0x24>
   138d8:	d0a00817 	ldw	r2,-32736(gp)
   138dc:	103ee83a 	callr	r2
   138e0:	00000106 	br	138e8 <alt_get_errno+0x28>
   138e4:	d0a5e804 	addi	r2,gp,-26720
{
   138e8:	e037883a 	mov	sp,fp
   138ec:	dfc00117 	ldw	ra,4(sp)
   138f0:	df000017 	ldw	fp,0(sp)
   138f4:	dec00204 	addi	sp,sp,8
   138f8:	f800283a 	ret

000138fc <read>:
   138fc:	defff904 	addi	sp,sp,-28
   13900:	dfc00615 	stw	ra,24(sp)
   13904:	df000515 	stw	fp,20(sp)
   13908:	df000504 	addi	fp,sp,20
   1390c:	e13ffd15 	stw	r4,-12(fp)
   13910:	e17ffc15 	stw	r5,-16(fp)
   13914:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13918:	e0bffd17 	ldw	r2,-12(fp)
   1391c:	10000916 	blt	r2,zero,13944 <read+0x48>
   13920:	e0fffd17 	ldw	r3,-12(fp)
   13924:	1805883a 	mov	r2,r3
   13928:	1085883a 	add	r2,r2,r2
   1392c:	10c5883a 	add	r2,r2,r3
   13930:	100490ba 	slli	r2,r2,2
   13934:	00c00074 	movhi	r3,1
   13938:	18d73304 	addi	r3,r3,23756
   1393c:	10c5883a 	add	r2,r2,r3
   13940:	00000106 	br	13948 <read+0x4c>
   13944:	0005883a 	mov	r2,zero
   13948:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1394c:	e0bfff17 	ldw	r2,-4(fp)
   13950:	10002226 	beq	r2,zero,139dc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13954:	e0bfff17 	ldw	r2,-4(fp)
   13958:	10800217 	ldw	r2,8(r2)
   1395c:	108000cc 	andi	r2,r2,3
   13960:	10800060 	cmpeqi	r2,r2,1
   13964:	1000181e 	bne	r2,zero,139c8 <read+0xcc>
        (fd->dev->read))
   13968:	e0bfff17 	ldw	r2,-4(fp)
   1396c:	10800017 	ldw	r2,0(r2)
   13970:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13974:	10001426 	beq	r2,zero,139c8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13978:	e0bfff17 	ldw	r2,-4(fp)
   1397c:	10800017 	ldw	r2,0(r2)
   13980:	10800517 	ldw	r2,20(r2)
   13984:	e0fffb17 	ldw	r3,-20(fp)
   13988:	180d883a 	mov	r6,r3
   1398c:	e17ffc17 	ldw	r5,-16(fp)
   13990:	e13fff17 	ldw	r4,-4(fp)
   13994:	103ee83a 	callr	r2
   13998:	e0bffe15 	stw	r2,-8(fp)
   1399c:	e0bffe17 	ldw	r2,-8(fp)
   139a0:	1000070e 	bge	r2,zero,139c0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   139a4:	00138c00 	call	138c0 <alt_get_errno>
   139a8:	1007883a 	mov	r3,r2
   139ac:	e0bffe17 	ldw	r2,-8(fp)
   139b0:	0085c83a 	sub	r2,zero,r2
   139b4:	18800015 	stw	r2,0(r3)
          return -1;
   139b8:	00bfffc4 	movi	r2,-1
   139bc:	00000c06 	br	139f0 <read+0xf4>
        }
        return rval;
   139c0:	e0bffe17 	ldw	r2,-8(fp)
   139c4:	00000a06 	br	139f0 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   139c8:	00138c00 	call	138c0 <alt_get_errno>
   139cc:	1007883a 	mov	r3,r2
   139d0:	00800344 	movi	r2,13
   139d4:	18800015 	stw	r2,0(r3)
   139d8:	00000406 	br	139ec <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   139dc:	00138c00 	call	138c0 <alt_get_errno>
   139e0:	1007883a 	mov	r3,r2
   139e4:	00801444 	movi	r2,81
   139e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   139ec:	00bfffc4 	movi	r2,-1
}
   139f0:	e037883a 	mov	sp,fp
   139f4:	dfc00117 	ldw	ra,4(sp)
   139f8:	df000017 	ldw	fp,0(sp)
   139fc:	dec00204 	addi	sp,sp,8
   13a00:	f800283a 	ret

00013a04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13a04:	defffe04 	addi	sp,sp,-8
   13a08:	df000115 	stw	fp,4(sp)
   13a0c:	df000104 	addi	fp,sp,4
   13a10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13a14:	e0bfff17 	ldw	r2,-4(fp)
   13a18:	108000d0 	cmplti	r2,r2,3
   13a1c:	1000101e 	bne	r2,zero,13a60 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   13a20:	e0ffff17 	ldw	r3,-4(fp)
   13a24:	1805883a 	mov	r2,r3
   13a28:	1085883a 	add	r2,r2,r2
   13a2c:	10c5883a 	add	r2,r2,r3
   13a30:	100490ba 	slli	r2,r2,2
   13a34:	00c00074 	movhi	r3,1
   13a38:	10c7883a 	add	r3,r2,r3
   13a3c:	18173515 	stw	zero,23764(r3)
    alt_fd_list[fd].dev      = 0;
   13a40:	e0ffff17 	ldw	r3,-4(fp)
   13a44:	1805883a 	mov	r2,r3
   13a48:	1085883a 	add	r2,r2,r2
   13a4c:	10c5883a 	add	r2,r2,r3
   13a50:	100490ba 	slli	r2,r2,2
   13a54:	00c00074 	movhi	r3,1
   13a58:	10c7883a 	add	r3,r2,r3
   13a5c:	18173315 	stw	zero,23756(r3)
  }
}
   13a60:	0001883a 	nop
   13a64:	e037883a 	mov	sp,fp
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00104 	addi	sp,sp,4
   13a70:	f800283a 	ret

00013a74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13a74:	defff904 	addi	sp,sp,-28
   13a78:	df000615 	stw	fp,24(sp)
   13a7c:	df000604 	addi	fp,sp,24
   13a80:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   13a84:	0005303a 	rdctl	r2,status
   13a88:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a8c:	e0fffd17 	ldw	r3,-12(fp)
   13a90:	00bfff84 	movi	r2,-2
   13a94:	1884703a 	and	r2,r3,r2
   13a98:	1001703a 	wrctl	status,r2
  return context;
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13aa0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13aa4:	d0a00917 	ldw	r2,-32732(gp)
   13aa8:	10c000c4 	addi	r3,r2,3
   13aac:	00bfff04 	movi	r2,-4
   13ab0:	1884703a 	and	r2,r3,r2
   13ab4:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13ab8:	d0e00917 	ldw	r3,-32732(gp)
   13abc:	e0bffa17 	ldw	r2,-24(fp)
   13ac0:	1887883a 	add	r3,r3,r2
   13ac4:	008000b4 	movhi	r2,2
   13ac8:	10b00004 	addi	r2,r2,-16384
   13acc:	10c0072e 	bgeu	r2,r3,13aec <sbrk+0x78>
   13ad0:	e0bfff17 	ldw	r2,-4(fp)
   13ad4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
   13adc:	1001703a 	wrctl	status,r2
}
   13ae0:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13ae4:	00bfffc4 	movi	r2,-1
   13ae8:	00000c06 	br	13b1c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13aec:	d0a00917 	ldw	r2,-32732(gp)
   13af0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   13af4:	d0e00917 	ldw	r3,-32732(gp)
   13af8:	e0bffa17 	ldw	r2,-24(fp)
   13afc:	1885883a 	add	r2,r3,r2
   13b00:	d0a00915 	stw	r2,-32732(gp)
   13b04:	e0bfff17 	ldw	r2,-4(fp)
   13b08:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   13b0c:	e0bffb17 	ldw	r2,-20(fp)
   13b10:	1001703a 	wrctl	status,r2
}
   13b14:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13b18:	e0bffe17 	ldw	r2,-8(fp)
} 
   13b1c:	e037883a 	mov	sp,fp
   13b20:	df000017 	ldw	fp,0(sp)
   13b24:	dec00104 	addi	sp,sp,4
   13b28:	f800283a 	ret

00013b2c <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
   13b2c:	defffe04 	addi	sp,sp,-8
   13b30:	dfc00115 	stw	ra,4(sp)
   13b34:	df000015 	stw	fp,0(sp)
   13b38:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   13b3c:	d0a00817 	ldw	r2,-32736(gp)
   13b40:	10000326 	beq	r2,zero,13b50 <alt_get_errno+0x24>
   13b44:	d0a00817 	ldw	r2,-32736(gp)
   13b48:	103ee83a 	callr	r2
   13b4c:	00000106 	br	13b54 <alt_get_errno+0x28>
   13b50:	d0a5e804 	addi	r2,gp,-26720
#endif /* ALT_STDERR_PRESENT */
   13b54:	e037883a 	mov	sp,fp
   13b58:	dfc00117 	ldw	ra,4(sp)
   13b5c:	df000017 	ldw	fp,0(sp)
   13b60:	dec00204 	addi	sp,sp,8
   13b64:	f800283a 	ret

00013b68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13b68:	defff904 	addi	sp,sp,-28
   13b6c:	dfc00615 	stw	ra,24(sp)
   13b70:	df000515 	stw	fp,20(sp)
   13b74:	df000504 	addi	fp,sp,20
   13b78:	e13ffd15 	stw	r4,-12(fp)
   13b7c:	e17ffc15 	stw	r5,-16(fp)
   13b80:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13b84:	e0bffd17 	ldw	r2,-12(fp)
   13b88:	10000916 	blt	r2,zero,13bb0 <write+0x48>
   13b8c:	e0fffd17 	ldw	r3,-12(fp)
   13b90:	1805883a 	mov	r2,r3
   13b94:	1085883a 	add	r2,r2,r2
   13b98:	10c5883a 	add	r2,r2,r3
   13b9c:	100490ba 	slli	r2,r2,2
   13ba0:	00c00074 	movhi	r3,1
   13ba4:	18d73304 	addi	r3,r3,23756
   13ba8:	10c5883a 	add	r2,r2,r3
   13bac:	00000106 	br	13bb4 <write+0x4c>
   13bb0:	0005883a 	mov	r2,zero
   13bb4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13bb8:	e0bfff17 	ldw	r2,-4(fp)
   13bbc:	10002126 	beq	r2,zero,13c44 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13bc0:	e0bfff17 	ldw	r2,-4(fp)
   13bc4:	10800217 	ldw	r2,8(r2)
   13bc8:	108000cc 	andi	r2,r2,3
   13bcc:	10001826 	beq	r2,zero,13c30 <write+0xc8>
   13bd0:	e0bfff17 	ldw	r2,-4(fp)
   13bd4:	10800017 	ldw	r2,0(r2)
   13bd8:	10800617 	ldw	r2,24(r2)
   13bdc:	10001426 	beq	r2,zero,13c30 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13be0:	e0bfff17 	ldw	r2,-4(fp)
   13be4:	10800017 	ldw	r2,0(r2)
   13be8:	10800617 	ldw	r2,24(r2)
   13bec:	e0fffb17 	ldw	r3,-20(fp)
   13bf0:	180d883a 	mov	r6,r3
   13bf4:	e17ffc17 	ldw	r5,-16(fp)
   13bf8:	e13fff17 	ldw	r4,-4(fp)
   13bfc:	103ee83a 	callr	r2
   13c00:	e0bffe15 	stw	r2,-8(fp)
   13c04:	e0bffe17 	ldw	r2,-8(fp)
   13c08:	1000070e 	bge	r2,zero,13c28 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   13c0c:	0013b2c0 	call	13b2c <alt_get_errno>
   13c10:	1007883a 	mov	r3,r2
   13c14:	e0bffe17 	ldw	r2,-8(fp)
   13c18:	0085c83a 	sub	r2,zero,r2
   13c1c:	18800015 	stw	r2,0(r3)
        return -1;
   13c20:	00bfffc4 	movi	r2,-1
   13c24:	00000c06 	br	13c58 <write+0xf0>
      }
      return rval;
   13c28:	e0bffe17 	ldw	r2,-8(fp)
   13c2c:	00000a06 	br	13c58 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13c30:	0013b2c0 	call	13b2c <alt_get_errno>
   13c34:	1007883a 	mov	r3,r2
   13c38:	00800344 	movi	r2,13
   13c3c:	18800015 	stw	r2,0(r3)
   13c40:	00000406 	br	13c54 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13c44:	0013b2c0 	call	13b2c <alt_get_errno>
   13c48:	1007883a 	mov	r3,r2
   13c4c:	00801444 	movi	r2,81
   13c50:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13c54:	00bfffc4 	movi	r2,-1
}
   13c58:	e037883a 	mov	sp,fp
   13c5c:	dfc00117 	ldw	ra,4(sp)
   13c60:	df000017 	ldw	fp,0(sp)
   13c64:	dec00204 	addi	sp,sp,8
   13c68:	f800283a 	ret

00013c6c <alt_dev_reg>:
   13c6c:	defffd04 	addi	sp,sp,-12
   13c70:	dfc00215 	stw	ra,8(sp)
   13c74:	df000115 	stw	fp,4(sp)
   13c78:	df000104 	addi	fp,sp,4
   13c7c:	e13fff15 	stw	r4,-4(fp)
   13c80:	d1600504 	addi	r5,gp,-32748
   13c84:	e13fff17 	ldw	r4,-4(fp)
   13c88:	00149640 	call	14964 <alt_dev_llist_insert>
   13c8c:	e037883a 	mov	sp,fp
   13c90:	dfc00117 	ldw	ra,4(sp)
   13c94:	df000017 	ldw	fp,0(sp)
   13c98:	dec00204 	addi	sp,sp,8
   13c9c:	f800283a 	ret

00013ca0 <alt_irq_init>:
{
   13ca0:	defffd04 	addi	sp,sp,-12
   13ca4:	dfc00215 	stw	ra,8(sp)
   13ca8:	df000115 	stw	fp,4(sp)
   13cac:	df000104 	addi	fp,sp,4
   13cb0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13cb4:	00153240 	call	15324 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13cb8:	00800044 	movi	r2,1
   13cbc:	1001703a 	wrctl	status,r2
}
   13cc0:	0001883a 	nop
}
   13cc4:	0001883a 	nop
   13cc8:	e037883a 	mov	sp,fp
   13ccc:	dfc00117 	ldw	ra,4(sp)
   13cd0:	df000017 	ldw	fp,0(sp)
   13cd4:	dec00204 	addi	sp,sp,8
   13cd8:	f800283a 	ret

00013cdc <alt_sys_init>:
{
   13cdc:	defffe04 	addi	sp,sp,-8
   13ce0:	dfc00115 	stw	ra,4(sp)
   13ce4:	df000015 	stw	fp,0(sp)
   13ce8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13cec:	000d883a 	mov	r6,zero
   13cf0:	000b883a 	mov	r5,zero
   13cf4:	01000074 	movhi	r4,1
   13cf8:	21179d04 	addi	r4,r4,24180
   13cfc:	0013e880 	call	13e88 <altera_avalon_jtag_uart_init>
   13d00:	01000074 	movhi	r4,1
   13d04:	21179304 	addi	r4,r4,24140
   13d08:	0013c6c0 	call	13c6c <alt_dev_reg>
}
   13d0c:	0001883a 	nop
   13d10:	e037883a 	mov	sp,fp
   13d14:	dfc00117 	ldw	ra,4(sp)
   13d18:	df000017 	ldw	fp,0(sp)
   13d1c:	dec00204 	addi	sp,sp,8
   13d20:	f800283a 	ret

00013d24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13d24:	defffa04 	addi	sp,sp,-24
   13d28:	dfc00515 	stw	ra,20(sp)
   13d2c:	df000415 	stw	fp,16(sp)
   13d30:	df000404 	addi	fp,sp,16
   13d34:	e13ffe15 	stw	r4,-8(fp)
   13d38:	e17ffd15 	stw	r5,-12(fp)
   13d3c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13d40:	e0bffe17 	ldw	r2,-8(fp)
   13d44:	10800017 	ldw	r2,0(r2)
   13d48:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13d4c:	e0bfff17 	ldw	r2,-4(fp)
   13d50:	10c00a04 	addi	r3,r2,40
   13d54:	e0bffe17 	ldw	r2,-8(fp)
   13d58:	10800217 	ldw	r2,8(r2)
   13d5c:	100f883a 	mov	r7,r2
   13d60:	e1bffc17 	ldw	r6,-16(fp)
   13d64:	e17ffd17 	ldw	r5,-12(fp)
   13d68:	1809883a 	mov	r4,r3
   13d6c:	00143600 	call	14360 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13d70:	e037883a 	mov	sp,fp
   13d74:	dfc00117 	ldw	ra,4(sp)
   13d78:	df000017 	ldw	fp,0(sp)
   13d7c:	dec00204 	addi	sp,sp,8
   13d80:	f800283a 	ret

00013d84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13d84:	defffa04 	addi	sp,sp,-24
   13d88:	dfc00515 	stw	ra,20(sp)
   13d8c:	df000415 	stw	fp,16(sp)
   13d90:	df000404 	addi	fp,sp,16
   13d94:	e13ffe15 	stw	r4,-8(fp)
   13d98:	e17ffd15 	stw	r5,-12(fp)
   13d9c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13da0:	e0bffe17 	ldw	r2,-8(fp)
   13da4:	10800017 	ldw	r2,0(r2)
   13da8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13dac:	e0bfff17 	ldw	r2,-4(fp)
   13db0:	10c00a04 	addi	r3,r2,40
   13db4:	e0bffe17 	ldw	r2,-8(fp)
   13db8:	10800217 	ldw	r2,8(r2)
   13dbc:	100f883a 	mov	r7,r2
   13dc0:	e1bffc17 	ldw	r6,-16(fp)
   13dc4:	e17ffd17 	ldw	r5,-12(fp)
   13dc8:	1809883a 	mov	r4,r3
   13dcc:	00145800 	call	14580 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13dd0:	e037883a 	mov	sp,fp
   13dd4:	dfc00117 	ldw	ra,4(sp)
   13dd8:	df000017 	ldw	fp,0(sp)
   13ddc:	dec00204 	addi	sp,sp,8
   13de0:	f800283a 	ret

00013de4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13de4:	defffc04 	addi	sp,sp,-16
   13de8:	dfc00315 	stw	ra,12(sp)
   13dec:	df000215 	stw	fp,8(sp)
   13df0:	df000204 	addi	fp,sp,8
   13df4:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13df8:	e0bffe17 	ldw	r2,-8(fp)
   13dfc:	10800017 	ldw	r2,0(r2)
   13e00:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13e04:	e0bfff17 	ldw	r2,-4(fp)
   13e08:	10c00a04 	addi	r3,r2,40
   13e0c:	e0bffe17 	ldw	r2,-8(fp)
   13e10:	10800217 	ldw	r2,8(r2)
   13e14:	100b883a 	mov	r5,r2
   13e18:	1809883a 	mov	r4,r3
   13e1c:	00142040 	call	14204 <altera_avalon_jtag_uart_close>
}
   13e20:	e037883a 	mov	sp,fp
   13e24:	dfc00117 	ldw	ra,4(sp)
   13e28:	df000017 	ldw	fp,0(sp)
   13e2c:	dec00204 	addi	sp,sp,8
   13e30:	f800283a 	ret

00013e34 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13e34:	defffa04 	addi	sp,sp,-24
   13e38:	dfc00515 	stw	ra,20(sp)
   13e3c:	df000415 	stw	fp,16(sp)
   13e40:	df000404 	addi	fp,sp,16
   13e44:	e13ffe15 	stw	r4,-8(fp)
   13e48:	e17ffd15 	stw	r5,-12(fp)
   13e4c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13e50:	e0bffe17 	ldw	r2,-8(fp)
   13e54:	10800017 	ldw	r2,0(r2)
   13e58:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13e5c:	e0bfff17 	ldw	r2,-4(fp)
   13e60:	10800a04 	addi	r2,r2,40
   13e64:	e1bffc17 	ldw	r6,-16(fp)
   13e68:	e17ffd17 	ldw	r5,-12(fp)
   13e6c:	1009883a 	mov	r4,r2
   13e70:	001426c0 	call	1426c <altera_avalon_jtag_uart_ioctl>
}
   13e74:	e037883a 	mov	sp,fp
   13e78:	dfc00117 	ldw	ra,4(sp)
   13e7c:	df000017 	ldw	fp,0(sp)
   13e80:	dec00204 	addi	sp,sp,8
   13e84:	f800283a 	ret

00013e88 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13e88:	defffa04 	addi	sp,sp,-24
   13e8c:	dfc00515 	stw	ra,20(sp)
   13e90:	df000415 	stw	fp,16(sp)
   13e94:	df000404 	addi	fp,sp,16
   13e98:	e13fff15 	stw	r4,-4(fp)
   13e9c:	e17ffe15 	stw	r5,-8(fp)
   13ea0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13ea4:	e0bfff17 	ldw	r2,-4(fp)
   13ea8:	00c00044 	movi	r3,1
   13eac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13eb0:	e0bfff17 	ldw	r2,-4(fp)
   13eb4:	10800017 	ldw	r2,0(r2)
   13eb8:	10800104 	addi	r2,r2,4
   13ebc:	1007883a 	mov	r3,r2
   13ec0:	e0bfff17 	ldw	r2,-4(fp)
   13ec4:	10800817 	ldw	r2,32(r2)
   13ec8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13ecc:	e0bffe17 	ldw	r2,-8(fp)
   13ed0:	e0fffd17 	ldw	r3,-12(fp)
   13ed4:	d8000015 	stw	zero,0(sp)
   13ed8:	e1ffff17 	ldw	r7,-4(fp)
   13edc:	01800074 	movhi	r6,1
   13ee0:	318fd204 	addi	r6,r6,16200
   13ee4:	180b883a 	mov	r5,r3
   13ee8:	1009883a 	mov	r4,r2
   13eec:	0014af40 	call	14af4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13ef0:	e0bfff17 	ldw	r2,-4(fp)
   13ef4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13ef8:	e0bfff17 	ldw	r2,-4(fp)
   13efc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13f00:	d0e5f217 	ldw	r3,-26680(gp)
   13f04:	e1ffff17 	ldw	r7,-4(fp)
   13f08:	01800074 	movhi	r6,1
   13f0c:	31905704 	addi	r6,r6,16732
   13f10:	180b883a 	mov	r5,r3
   13f14:	1009883a 	mov	r4,r2
   13f18:	00147a80 	call	147a8 <alt_alarm_start>
   13f1c:	1000040e 	bge	r2,zero,13f30 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13f20:	e0ffff17 	ldw	r3,-4(fp)
   13f24:	00a00034 	movhi	r2,32768
   13f28:	10bfffc4 	addi	r2,r2,-1
   13f2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13f30:	0001883a 	nop
   13f34:	e037883a 	mov	sp,fp
   13f38:	dfc00117 	ldw	ra,4(sp)
   13f3c:	df000017 	ldw	fp,0(sp)
   13f40:	dec00204 	addi	sp,sp,8
   13f44:	f800283a 	ret

00013f48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13f48:	defff704 	addi	sp,sp,-36
   13f4c:	df000815 	stw	fp,32(sp)
   13f50:	df000804 	addi	fp,sp,32
   13f54:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13f58:	e0bff817 	ldw	r2,-32(fp)
   13f5c:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   13f60:	e0bffc17 	ldw	r2,-16(fp)
   13f64:	10800017 	ldw	r2,0(r2)
   13f68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   13f6c:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f70:	e0bffb17 	ldw	r2,-20(fp)
   13f74:	10800104 	addi	r2,r2,4
   13f78:	10800037 	ldwio	r2,0(r2)
   13f7c:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13f80:	e0bffa17 	ldw	r2,-24(fp)
   13f84:	1080c00c 	andi	r2,r2,768
   13f88:	10006e26 	beq	r2,zero,14144 <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13f8c:	e0bffa17 	ldw	r2,-24(fp)
   13f90:	1080400c 	andi	r2,r2,256
   13f94:	10003526 	beq	r2,zero,1406c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13f98:	00800074 	movhi	r2,1
   13f9c:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13fa0:	e0bffc17 	ldw	r2,-16(fp)
   13fa4:	10800a17 	ldw	r2,40(r2)
   13fa8:	10800044 	addi	r2,r2,1
   13fac:	1081ffcc 	andi	r2,r2,2047
   13fb0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	10800b17 	ldw	r2,44(r2)
   13fbc:	e0fff917 	ldw	r3,-28(fp)
   13fc0:	18801526 	beq	r3,r2,14018 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13fc4:	e0bffb17 	ldw	r2,-20(fp)
   13fc8:	10800037 	ldwio	r2,0(r2)
   13fcc:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13fd0:	e0bffe17 	ldw	r2,-8(fp)
   13fd4:	10a0000c 	andi	r2,r2,32768
   13fd8:	10001126 	beq	r2,zero,14020 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13fdc:	e0bffc17 	ldw	r2,-16(fp)
   13fe0:	10800a17 	ldw	r2,40(r2)
   13fe4:	e0fffe17 	ldw	r3,-8(fp)
   13fe8:	1809883a 	mov	r4,r3
   13fec:	e0fffc17 	ldw	r3,-16(fp)
   13ff0:	1885883a 	add	r2,r3,r2
   13ff4:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ff8:	e0bffc17 	ldw	r2,-16(fp)
   13ffc:	10800a17 	ldw	r2,40(r2)
   14000:	10800044 	addi	r2,r2,1
   14004:	10c1ffcc 	andi	r3,r2,2047
   14008:	e0bffc17 	ldw	r2,-16(fp)
   1400c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   14010:	0001883a 	nop
      {
   14014:	003fe206 	br	13fa0 <altera_avalon_jtag_uart_irq+0x58>
          break;
   14018:	0001883a 	nop
   1401c:	00000106 	br	14024 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   14020:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14024:	e0bffe17 	ldw	r2,-8(fp)
   14028:	00ffffd4 	movui	r3,65535
   1402c:	18800f2e 	bgeu	r3,r2,1406c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14030:	e0bffc17 	ldw	r2,-16(fp)
   14034:	10c00817 	ldw	r3,32(r2)
   14038:	00bfff84 	movi	r2,-2
   1403c:	1886703a 	and	r3,r3,r2
   14040:	e0bffc17 	ldw	r2,-16(fp)
   14044:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14048:	e0bffb17 	ldw	r2,-20(fp)
   1404c:	10800104 	addi	r2,r2,4
   14050:	1007883a 	mov	r3,r2
   14054:	e0bffc17 	ldw	r2,-16(fp)
   14058:	10800817 	ldw	r2,32(r2)
   1405c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14060:	e0bffb17 	ldw	r2,-20(fp)
   14064:	10800104 	addi	r2,r2,4
   14068:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1406c:	e0bffa17 	ldw	r2,-24(fp)
   14070:	1080800c 	andi	r2,r2,512
   14074:	103fbe26 	beq	r2,zero,13f70 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14078:	e0bffa17 	ldw	r2,-24(fp)
   1407c:	1004d43a 	srli	r2,r2,16
   14080:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14084:	00001506 	br	140dc <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14088:	e0bffb17 	ldw	r2,-20(fp)
   1408c:	e0fffc17 	ldw	r3,-16(fp)
   14090:	18c00d17 	ldw	r3,52(r3)
   14094:	e13ffc17 	ldw	r4,-16(fp)
   14098:	20c7883a 	add	r3,r4,r3
   1409c:	18c20e03 	ldbu	r3,2104(r3)
   140a0:	18c03fcc 	andi	r3,r3,255
   140a4:	18c0201c 	xori	r3,r3,128
   140a8:	18ffe004 	addi	r3,r3,-128
   140ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140b0:	e0bffc17 	ldw	r2,-16(fp)
   140b4:	10800d17 	ldw	r2,52(r2)
   140b8:	10800044 	addi	r2,r2,1
   140bc:	10c1ffcc 	andi	r3,r2,2047
   140c0:	e0bffc17 	ldw	r2,-16(fp)
   140c4:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   140c8:	00800044 	movi	r2,1
   140cc:	e0bfff15 	stw	r2,-4(fp)

        space--;
   140d0:	e0bffd17 	ldw	r2,-12(fp)
   140d4:	10bfffc4 	addi	r2,r2,-1
   140d8:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   140dc:	e0bffd17 	ldw	r2,-12(fp)
   140e0:	10000526 	beq	r2,zero,140f8 <altera_avalon_jtag_uart_irq+0x1b0>
   140e4:	e0bffc17 	ldw	r2,-16(fp)
   140e8:	10c00d17 	ldw	r3,52(r2)
   140ec:	e0bffc17 	ldw	r2,-16(fp)
   140f0:	10800c17 	ldw	r2,48(r2)
   140f4:	18bfe41e 	bne	r3,r2,14088 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   140f8:	e0bffd17 	ldw	r2,-12(fp)
   140fc:	103f9c26 	beq	r2,zero,13f70 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14100:	e0bffc17 	ldw	r2,-16(fp)
   14104:	10c00817 	ldw	r3,32(r2)
   14108:	00bfff44 	movi	r2,-3
   1410c:	1886703a 	and	r3,r3,r2
   14110:	e0bffc17 	ldw	r2,-16(fp)
   14114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14118:	e0bffc17 	ldw	r2,-16(fp)
   1411c:	10800017 	ldw	r2,0(r2)
   14120:	10800104 	addi	r2,r2,4
   14124:	1007883a 	mov	r3,r2
   14128:	e0bffc17 	ldw	r2,-16(fp)
   1412c:	10800817 	ldw	r2,32(r2)
   14130:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14134:	e0bffb17 	ldw	r2,-20(fp)
   14138:	10800104 	addi	r2,r2,4
   1413c:	10800037 	ldwio	r2,0(r2)
  {
   14140:	003f8b06 	br	13f70 <altera_avalon_jtag_uart_irq+0x28>
      break;
   14144:	0001883a 	nop
      }
    }
  }
}
   14148:	0001883a 	nop
   1414c:	e037883a 	mov	sp,fp
   14150:	df000017 	ldw	fp,0(sp)
   14154:	dec00104 	addi	sp,sp,4
   14158:	f800283a 	ret

0001415c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1415c:	defffc04 	addi	sp,sp,-16
   14160:	df000315 	stw	fp,12(sp)
   14164:	df000304 	addi	fp,sp,12
   14168:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1416c:	e0bffd17 	ldw	r2,-12(fp)
   14170:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14174:	e0bfff17 	ldw	r2,-4(fp)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	10800104 	addi	r2,r2,4
   14180:	10800037 	ldwio	r2,0(r2)
   14184:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14188:	e0bffe17 	ldw	r2,-8(fp)
   1418c:	1081000c 	andi	r2,r2,1024
   14190:	10000b26 	beq	r2,zero,141c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14194:	e0bfff17 	ldw	r2,-4(fp)
   14198:	10800017 	ldw	r2,0(r2)
   1419c:	10800104 	addi	r2,r2,4
   141a0:	1007883a 	mov	r3,r2
   141a4:	e0bfff17 	ldw	r2,-4(fp)
   141a8:	10800817 	ldw	r2,32(r2)
   141ac:	10810014 	ori	r2,r2,1024
   141b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   141b4:	e0bfff17 	ldw	r2,-4(fp)
   141b8:	10000915 	stw	zero,36(r2)
   141bc:	00000c06 	br	141f0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   141c0:	e0bfff17 	ldw	r2,-4(fp)
   141c4:	10c00917 	ldw	r3,36(r2)
   141c8:	00a00034 	movhi	r2,32768
   141cc:	10bfff04 	addi	r2,r2,-4
   141d0:	10c00736 	bltu	r2,r3,141f0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   141d4:	e0bfff17 	ldw	r2,-4(fp)
   141d8:	10800917 	ldw	r2,36(r2)
   141dc:	10c00044 	addi	r3,r2,1
   141e0:	e0bfff17 	ldw	r2,-4(fp)
   141e4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   141e8:	e0bfff17 	ldw	r2,-4(fp)
   141ec:	10800917 	ldw	r2,36(r2)
   141f0:	d0a5f217 	ldw	r2,-26680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   141f4:	e037883a 	mov	sp,fp
   141f8:	df000017 	ldw	fp,0(sp)
   141fc:	dec00104 	addi	sp,sp,4
   14200:	f800283a 	ret

00014204 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14204:	defffd04 	addi	sp,sp,-12
   14208:	df000215 	stw	fp,8(sp)
   1420c:	df000204 	addi	fp,sp,8
   14210:	e13fff15 	stw	r4,-4(fp)
   14214:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14218:	00000506 	br	14230 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1421c:	e0bffe17 	ldw	r2,-8(fp)
   14220:	1090000c 	andi	r2,r2,16384
   14224:	10000226 	beq	r2,zero,14230 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14228:	00bffd44 	movi	r2,-11
   1422c:	00000b06 	br	1425c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14230:	e0bfff17 	ldw	r2,-4(fp)
   14234:	10c00d17 	ldw	r3,52(r2)
   14238:	e0bfff17 	ldw	r2,-4(fp)
   1423c:	10800c17 	ldw	r2,48(r2)
   14240:	18800526 	beq	r3,r2,14258 <altera_avalon_jtag_uart_close+0x54>
   14244:	e0bfff17 	ldw	r2,-4(fp)
   14248:	10c00917 	ldw	r3,36(r2)
   1424c:	e0bfff17 	ldw	r2,-4(fp)
   14250:	10800117 	ldw	r2,4(r2)
   14254:	18bff136 	bltu	r3,r2,1421c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   14258:	0005883a 	mov	r2,zero
}
   1425c:	e037883a 	mov	sp,fp
   14260:	df000017 	ldw	fp,0(sp)
   14264:	dec00104 	addi	sp,sp,4
   14268:	f800283a 	ret

0001426c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1426c:	defffa04 	addi	sp,sp,-24
   14270:	df000515 	stw	fp,20(sp)
   14274:	df000504 	addi	fp,sp,20
   14278:	e13ffd15 	stw	r4,-12(fp)
   1427c:	e17ffc15 	stw	r5,-16(fp)
   14280:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   14284:	00bff9c4 	movi	r2,-25
   14288:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   1428c:	e0bffc17 	ldw	r2,-16(fp)
   14290:	109a8060 	cmpeqi	r2,r2,27137
   14294:	1000041e 	bne	r2,zero,142a8 <altera_avalon_jtag_uart_ioctl+0x3c>
   14298:	e0bffc17 	ldw	r2,-16(fp)
   1429c:	109a80a0 	cmpeqi	r2,r2,27138
   142a0:	1000181e 	bne	r2,zero,14304 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   142a4:	00002906 	br	1434c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   142a8:	e0bffd17 	ldw	r2,-12(fp)
   142ac:	10c00117 	ldw	r3,4(r2)
   142b0:	00a00034 	movhi	r2,32768
   142b4:	10bfffc4 	addi	r2,r2,-1
   142b8:	18802126 	beq	r3,r2,14340 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   142bc:	e0bffb17 	ldw	r2,-20(fp)
   142c0:	10800017 	ldw	r2,0(r2)
   142c4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   142c8:	e0bffe17 	ldw	r2,-8(fp)
   142cc:	10800090 	cmplti	r2,r2,2
   142d0:	1000061e 	bne	r2,zero,142ec <altera_avalon_jtag_uart_ioctl+0x80>
   142d4:	e0fffe17 	ldw	r3,-8(fp)
   142d8:	00a00034 	movhi	r2,32768
   142dc:	10bfffc4 	addi	r2,r2,-1
   142e0:	18800226 	beq	r3,r2,142ec <altera_avalon_jtag_uart_ioctl+0x80>
   142e4:	e0bffe17 	ldw	r2,-8(fp)
   142e8:	00000206 	br	142f4 <altera_avalon_jtag_uart_ioctl+0x88>
   142ec:	00a00034 	movhi	r2,32768
   142f0:	10bfff84 	addi	r2,r2,-2
   142f4:	e0fffd17 	ldw	r3,-12(fp)
   142f8:	18800115 	stw	r2,4(r3)
      rc = 0;
   142fc:	e03fff15 	stw	zero,-4(fp)
    break;
   14300:	00000f06 	br	14340 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   14304:	e0bffd17 	ldw	r2,-12(fp)
   14308:	10c00117 	ldw	r3,4(r2)
   1430c:	00a00034 	movhi	r2,32768
   14310:	10bfffc4 	addi	r2,r2,-1
   14314:	18800c26 	beq	r3,r2,14348 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14318:	e0bffd17 	ldw	r2,-12(fp)
   1431c:	10c00917 	ldw	r3,36(r2)
   14320:	e0bffd17 	ldw	r2,-12(fp)
   14324:	10800117 	ldw	r2,4(r2)
   14328:	1885803a 	cmpltu	r2,r3,r2
   1432c:	10c03fcc 	andi	r3,r2,255
   14330:	e0bffb17 	ldw	r2,-20(fp)
   14334:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14338:	e03fff15 	stw	zero,-4(fp)
    break;
   1433c:	00000206 	br	14348 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   14340:	0001883a 	nop
   14344:	00000106 	br	1434c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   14348:	0001883a 	nop
  }

  return rc;
   1434c:	e0bfff17 	ldw	r2,-4(fp)
}
   14350:	e037883a 	mov	sp,fp
   14354:	df000017 	ldw	fp,0(sp)
   14358:	dec00104 	addi	sp,sp,4
   1435c:	f800283a 	ret

00014360 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14360:	defff304 	addi	sp,sp,-52
   14364:	dfc00c15 	stw	ra,48(sp)
   14368:	df000b15 	stw	fp,44(sp)
   1436c:	df000b04 	addi	fp,sp,44
   14370:	e13ff815 	stw	r4,-32(fp)
   14374:	e17ff715 	stw	r5,-36(fp)
   14378:	e1bff615 	stw	r6,-40(fp)
   1437c:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   14380:	e0bff717 	ldw	r2,-36(fp)
   14384:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14388:	00004706 	br	144a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1438c:	e0bff817 	ldw	r2,-32(fp)
   14390:	10800a17 	ldw	r2,40(r2)
   14394:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   14398:	e0bff817 	ldw	r2,-32(fp)
   1439c:	10800b17 	ldw	r2,44(r2)
   143a0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   143a4:	e0fffd17 	ldw	r3,-12(fp)
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	18800536 	bltu	r3,r2,143c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   143b0:	e0fffd17 	ldw	r3,-12(fp)
   143b4:	e0bffc17 	ldw	r2,-16(fp)
   143b8:	1885c83a 	sub	r2,r3,r2
   143bc:	e0bffe15 	stw	r2,-8(fp)
   143c0:	00000406 	br	143d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   143c4:	00c20004 	movi	r3,2048
   143c8:	e0bffc17 	ldw	r2,-16(fp)
   143cc:	1885c83a 	sub	r2,r3,r2
   143d0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   143d4:	e0bffe17 	ldw	r2,-8(fp)
   143d8:	10001e26 	beq	r2,zero,14454 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   143dc:	e0fff617 	ldw	r3,-40(fp)
   143e0:	e0bffe17 	ldw	r2,-8(fp)
   143e4:	1880022e 	bgeu	r3,r2,143f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   143e8:	e0bff617 	ldw	r2,-40(fp)
   143ec:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   143f0:	e0bff817 	ldw	r2,-32(fp)
   143f4:	10c00e04 	addi	r3,r2,56
   143f8:	e0bffc17 	ldw	r2,-16(fp)
   143fc:	1885883a 	add	r2,r3,r2
   14400:	e1bffe17 	ldw	r6,-8(fp)
   14404:	100b883a 	mov	r5,r2
   14408:	e13fff17 	ldw	r4,-4(fp)
   1440c:	00110a40 	call	110a4 <memcpy>
      ptr   += n;
   14410:	e0ffff17 	ldw	r3,-4(fp)
   14414:	e0bffe17 	ldw	r2,-8(fp)
   14418:	1885883a 	add	r2,r3,r2
   1441c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   14420:	e0fff617 	ldw	r3,-40(fp)
   14424:	e0bffe17 	ldw	r2,-8(fp)
   14428:	1885c83a 	sub	r2,r3,r2
   1442c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14430:	e0fffc17 	ldw	r3,-16(fp)
   14434:	e0bffe17 	ldw	r2,-8(fp)
   14438:	1885883a 	add	r2,r3,r2
   1443c:	10c1ffcc 	andi	r3,r2,2047
   14440:	e0bff817 	ldw	r2,-32(fp)
   14444:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14448:	e0bff617 	ldw	r2,-40(fp)
   1444c:	00bfcf16 	blt	zero,r2,1438c <altera_avalon_jtag_uart_read+0x2c>
   14450:	00000106 	br	14458 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   14454:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   14458:	e0ffff17 	ldw	r3,-4(fp)
   1445c:	e0bff717 	ldw	r2,-36(fp)
   14460:	1880141e 	bne	r3,r2,144b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14464:	e0bff517 	ldw	r2,-44(fp)
   14468:	1090000c 	andi	r2,r2,16384
   1446c:	1000131e 	bne	r2,zero,144bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14470:	0001883a 	nop
   14474:	e0bff817 	ldw	r2,-32(fp)
   14478:	10800a17 	ldw	r2,40(r2)
   1447c:	e0fffd17 	ldw	r3,-12(fp)
   14480:	1880051e 	bne	r3,r2,14498 <altera_avalon_jtag_uart_read+0x138>
   14484:	e0bff817 	ldw	r2,-32(fp)
   14488:	10c00917 	ldw	r3,36(r2)
   1448c:	e0bff817 	ldw	r2,-32(fp)
   14490:	10800117 	ldw	r2,4(r2)
   14494:	18bff736 	bltu	r3,r2,14474 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14498:	e0bff817 	ldw	r2,-32(fp)
   1449c:	10800a17 	ldw	r2,40(r2)
   144a0:	e0fffd17 	ldw	r3,-12(fp)
   144a4:	18800726 	beq	r3,r2,144c4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   144a8:	e0bff617 	ldw	r2,-40(fp)
   144ac:	00bfb716 	blt	zero,r2,1438c <altera_avalon_jtag_uart_read+0x2c>
   144b0:	00000506 	br	144c8 <altera_avalon_jtag_uart_read+0x168>
      break;
   144b4:	0001883a 	nop
   144b8:	00000306 	br	144c8 <altera_avalon_jtag_uart_read+0x168>
      break;
   144bc:	0001883a 	nop
   144c0:	00000106 	br	144c8 <altera_avalon_jtag_uart_read+0x168>
      break;
   144c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   144c8:	e0ffff17 	ldw	r3,-4(fp)
   144cc:	e0bff717 	ldw	r2,-36(fp)
   144d0:	18801926 	beq	r3,r2,14538 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   144d4:	0005303a 	rdctl	r2,status
   144d8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144dc:	e0fff917 	ldw	r3,-28(fp)
   144e0:	00bfff84 	movi	r2,-2
   144e4:	1884703a 	and	r2,r3,r2
   144e8:	1001703a 	wrctl	status,r2
  return context;
   144ec:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   144f0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   144f4:	e0bff817 	ldw	r2,-32(fp)
   144f8:	10800817 	ldw	r2,32(r2)
   144fc:	10c00054 	ori	r3,r2,1
   14500:	e0bff817 	ldw	r2,-32(fp)
   14504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14508:	e0bff817 	ldw	r2,-32(fp)
   1450c:	10800017 	ldw	r2,0(r2)
   14510:	10800104 	addi	r2,r2,4
   14514:	1007883a 	mov	r3,r2
   14518:	e0bff817 	ldw	r2,-32(fp)
   1451c:	10800817 	ldw	r2,32(r2)
   14520:	18800035 	stwio	r2,0(r3)
   14524:	e0bffb17 	ldw	r2,-20(fp)
   14528:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1452c:	e0bffa17 	ldw	r2,-24(fp)
   14530:	1001703a 	wrctl	status,r2
}
   14534:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14538:	e0ffff17 	ldw	r3,-4(fp)
   1453c:	e0bff717 	ldw	r2,-36(fp)
   14540:	18800426 	beq	r3,r2,14554 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   14544:	e0ffff17 	ldw	r3,-4(fp)
   14548:	e0bff717 	ldw	r2,-36(fp)
   1454c:	1885c83a 	sub	r2,r3,r2
   14550:	00000606 	br	1456c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   14554:	e0bff517 	ldw	r2,-44(fp)
   14558:	1090000c 	andi	r2,r2,16384
   1455c:	10000226 	beq	r2,zero,14568 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   14560:	00bffd44 	movi	r2,-11
   14564:	00000106 	br	1456c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   14568:	00bffec4 	movi	r2,-5
}
   1456c:	e037883a 	mov	sp,fp
   14570:	dfc00117 	ldw	ra,4(sp)
   14574:	df000017 	ldw	fp,0(sp)
   14578:	dec00204 	addi	sp,sp,8
   1457c:	f800283a 	ret

00014580 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14580:	defff304 	addi	sp,sp,-52
   14584:	dfc00c15 	stw	ra,48(sp)
   14588:	df000b15 	stw	fp,44(sp)
   1458c:	df000b04 	addi	fp,sp,44
   14590:	e13ff815 	stw	r4,-32(fp)
   14594:	e17ff715 	stw	r5,-36(fp)
   14598:	e1bff615 	stw	r6,-40(fp)
   1459c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   145a0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   145a4:	e0bff717 	ldw	r2,-36(fp)
   145a8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   145ac:	00003706 	br	1468c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   145b0:	e0bff817 	ldw	r2,-32(fp)
   145b4:	10800c17 	ldw	r2,48(r2)
   145b8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   145bc:	e0bff817 	ldw	r2,-32(fp)
   145c0:	10800d17 	ldw	r2,52(r2)
   145c4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   145c8:	e0fffc17 	ldw	r3,-16(fp)
   145cc:	e0bfff17 	ldw	r2,-4(fp)
   145d0:	1880062e 	bgeu	r3,r2,145ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   145d4:	e0ffff17 	ldw	r3,-4(fp)
   145d8:	e0bffc17 	ldw	r2,-16(fp)
   145dc:	1885c83a 	sub	r2,r3,r2
   145e0:	10bfffc4 	addi	r2,r2,-1
   145e4:	e0bffe15 	stw	r2,-8(fp)
   145e8:	00000b06 	br	14618 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   145ec:	e0bfff17 	ldw	r2,-4(fp)
   145f0:	10000526 	beq	r2,zero,14608 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   145f4:	00c20004 	movi	r3,2048
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	1885c83a 	sub	r2,r3,r2
   14600:	e0bffe15 	stw	r2,-8(fp)
   14604:	00000406 	br	14618 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14608:	00c1ffc4 	movi	r3,2047
   1460c:	e0bffc17 	ldw	r2,-16(fp)
   14610:	1885c83a 	sub	r2,r3,r2
   14614:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   14618:	e0bffe17 	ldw	r2,-8(fp)
   1461c:	10001e26 	beq	r2,zero,14698 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14620:	e0fff617 	ldw	r3,-40(fp)
   14624:	e0bffe17 	ldw	r2,-8(fp)
   14628:	1880022e 	bgeu	r3,r2,14634 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1462c:	e0bff617 	ldw	r2,-40(fp)
   14630:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14634:	e0bff817 	ldw	r2,-32(fp)
   14638:	10c20e04 	addi	r3,r2,2104
   1463c:	e0bffc17 	ldw	r2,-16(fp)
   14640:	1885883a 	add	r2,r3,r2
   14644:	e1bffe17 	ldw	r6,-8(fp)
   14648:	e17ff717 	ldw	r5,-36(fp)
   1464c:	1009883a 	mov	r4,r2
   14650:	00110a40 	call	110a4 <memcpy>
      ptr   += n;
   14654:	e0fff717 	ldw	r3,-36(fp)
   14658:	e0bffe17 	ldw	r2,-8(fp)
   1465c:	1885883a 	add	r2,r3,r2
   14660:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   14664:	e0fff617 	ldw	r3,-40(fp)
   14668:	e0bffe17 	ldw	r2,-8(fp)
   1466c:	1885c83a 	sub	r2,r3,r2
   14670:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14674:	e0fffc17 	ldw	r3,-16(fp)
   14678:	e0bffe17 	ldw	r2,-8(fp)
   1467c:	1885883a 	add	r2,r3,r2
   14680:	10c1ffcc 	andi	r3,r2,2047
   14684:	e0bff817 	ldw	r2,-32(fp)
   14688:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   1468c:	e0bff617 	ldw	r2,-40(fp)
   14690:	00bfc716 	blt	zero,r2,145b0 <altera_avalon_jtag_uart_write+0x30>
   14694:	00000106 	br	1469c <altera_avalon_jtag_uart_write+0x11c>
        break;
   14698:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   1469c:	0005303a 	rdctl	r2,status
   146a0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146a4:	e0fff917 	ldw	r3,-28(fp)
   146a8:	00bfff84 	movi	r2,-2
   146ac:	1884703a 	and	r2,r3,r2
   146b0:	1001703a 	wrctl	status,r2
  return context;
   146b4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   146b8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   146bc:	e0bff817 	ldw	r2,-32(fp)
   146c0:	10800817 	ldw	r2,32(r2)
   146c4:	10c00094 	ori	r3,r2,2
   146c8:	e0bff817 	ldw	r2,-32(fp)
   146cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   146d0:	e0bff817 	ldw	r2,-32(fp)
   146d4:	10800017 	ldw	r2,0(r2)
   146d8:	10800104 	addi	r2,r2,4
   146dc:	1007883a 	mov	r3,r2
   146e0:	e0bff817 	ldw	r2,-32(fp)
   146e4:	10800817 	ldw	r2,32(r2)
   146e8:	18800035 	stwio	r2,0(r3)
   146ec:	e0bffb17 	ldw	r2,-20(fp)
   146f0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   146f4:	e0bffa17 	ldw	r2,-24(fp)
   146f8:	1001703a 	wrctl	status,r2
}
   146fc:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14700:	e0bff617 	ldw	r2,-40(fp)
   14704:	0080100e 	bge	zero,r2,14748 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14708:	e0bff517 	ldw	r2,-44(fp)
   1470c:	1090000c 	andi	r2,r2,16384
   14710:	1000101e 	bne	r2,zero,14754 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14714:	0001883a 	nop
   14718:	e0bff817 	ldw	r2,-32(fp)
   1471c:	10800d17 	ldw	r2,52(r2)
   14720:	e0ffff17 	ldw	r3,-4(fp)
   14724:	1880051e 	bne	r3,r2,1473c <altera_avalon_jtag_uart_write+0x1bc>
   14728:	e0bff817 	ldw	r2,-32(fp)
   1472c:	10c00917 	ldw	r3,36(r2)
   14730:	e0bff817 	ldw	r2,-32(fp)
   14734:	10800117 	ldw	r2,4(r2)
   14738:	18bff736 	bltu	r3,r2,14718 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1473c:	e0bff817 	ldw	r2,-32(fp)
   14740:	10800917 	ldw	r2,36(r2)
   14744:	1000051e 	bne	r2,zero,1475c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   14748:	e0bff617 	ldw	r2,-40(fp)
   1474c:	00bfcf16 	blt	zero,r2,1468c <altera_avalon_jtag_uart_write+0x10c>
   14750:	00000306 	br	14760 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   14754:	0001883a 	nop
   14758:	00000106 	br	14760 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   1475c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14760:	e0fff717 	ldw	r3,-36(fp)
   14764:	e0bffd17 	ldw	r2,-12(fp)
   14768:	18800426 	beq	r3,r2,1477c <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   1476c:	e0fff717 	ldw	r3,-36(fp)
   14770:	e0bffd17 	ldw	r2,-12(fp)
   14774:	1885c83a 	sub	r2,r3,r2
   14778:	00000606 	br	14794 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   1477c:	e0bff517 	ldw	r2,-44(fp)
   14780:	1090000c 	andi	r2,r2,16384
   14784:	10000226 	beq	r2,zero,14790 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   14788:	00bffd44 	movi	r2,-11
   1478c:	00000106 	br	14794 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14790:	00bffec4 	movi	r2,-5
}
   14794:	e037883a 	mov	sp,fp
   14798:	dfc00117 	ldw	ra,4(sp)
   1479c:	df000017 	ldw	fp,0(sp)
   147a0:	dec00204 	addi	sp,sp,8
   147a4:	f800283a 	ret

000147a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   147a8:	defff404 	addi	sp,sp,-48
   147ac:	df000b15 	stw	fp,44(sp)
   147b0:	df000b04 	addi	fp,sp,44
   147b4:	e13ff815 	stw	r4,-32(fp)
   147b8:	e17ff715 	stw	r5,-36(fp)
   147bc:	e1bff615 	stw	r6,-40(fp)
   147c0:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   147c4:	e03ffe15 	stw	zero,-8(fp)
   147c8:	e03fff15 	stw	zero,-4(fp)
   147cc:	d0a5f217 	ldw	r2,-26680(gp)
  
  if (alt_ticks_per_second ())
   147d0:	10004826 	beq	r2,zero,148f4 <alt_alarm_start+0x14c>
  {
    if (alarm)
   147d4:	e0bff817 	ldw	r2,-32(fp)
   147d8:	10004426 	beq	r2,zero,148ec <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   147dc:	e0bff817 	ldw	r2,-32(fp)
   147e0:	e0fff617 	ldw	r3,-40(fp)
   147e4:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   147e8:	e0bff817 	ldw	r2,-32(fp)
   147ec:	e0fff517 	ldw	r3,-44(fp)
   147f0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   147f4:	0005303a 	rdctl	r2,status
   147f8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147fc:	e0fff917 	ldw	r3,-28(fp)
   14800:	00bfff84 	movi	r2,-2
   14804:	1884703a 	and	r2,r3,r2
   14808:	1001703a 	wrctl	status,r2
  return context;
   1480c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14810:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14814:	d0a5f317 	ldw	r2,-26676(gp)
   14818:	d0e5f417 	ldw	r3,-26672(gp)
      
      current_nticks = alt_nticks();
   1481c:	e0bffe15 	stw	r2,-8(fp)
   14820:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   14824:	e0bff717 	ldw	r2,-36(fp)
   14828:	1011883a 	mov	r8,r2
   1482c:	0013883a 	mov	r9,zero
   14830:	e13ffe17 	ldw	r4,-8(fp)
   14834:	e17fff17 	ldw	r5,-4(fp)
   14838:	4105883a 	add	r2,r8,r4
   1483c:	120d803a 	cmpltu	r6,r2,r8
   14840:	4947883a 	add	r3,r9,r5
   14844:	30c9883a 	add	r4,r6,r3
   14848:	2007883a 	mov	r3,r4
   1484c:	1009883a 	mov	r4,r2
   14850:	180b883a 	mov	r5,r3
   14854:	01800044 	movi	r6,1
   14858:	000f883a 	mov	r7,zero
   1485c:	2185883a 	add	r2,r4,r6
   14860:	1111803a 	cmpltu	r8,r2,r4
   14864:	29c7883a 	add	r3,r5,r7
   14868:	40c9883a 	add	r4,r8,r3
   1486c:	2007883a 	mov	r3,r4
   14870:	1009883a 	mov	r4,r2
   14874:	180b883a 	mov	r5,r3
   14878:	e0bff817 	ldw	r2,-32(fp)
   1487c:	11000215 	stw	r4,8(r2)
   14880:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14884:	e0bff817 	ldw	r2,-32(fp)
   14888:	d0e00b04 	addi	r3,gp,-32724
   1488c:	e0fffb15 	stw	r3,-20(fp)
   14890:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14894:	e0bffa17 	ldw	r2,-24(fp)
   14898:	e0fffb17 	ldw	r3,-20(fp)
   1489c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   148a0:	e0bffb17 	ldw	r2,-20(fp)
   148a4:	10c00017 	ldw	r3,0(r2)
   148a8:	e0bffa17 	ldw	r2,-24(fp)
   148ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   148b0:	e0bffb17 	ldw	r2,-20(fp)
   148b4:	10800017 	ldw	r2,0(r2)
   148b8:	e0fffa17 	ldw	r3,-24(fp)
   148bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   148c0:	e0bffb17 	ldw	r2,-20(fp)
   148c4:	e0fffa17 	ldw	r3,-24(fp)
   148c8:	10c00015 	stw	r3,0(r2)
}
   148cc:	0001883a 	nop
   148d0:	e0bffd17 	ldw	r2,-12(fp)
   148d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   148d8:	e0bffc17 	ldw	r2,-16(fp)
   148dc:	1001703a 	wrctl	status,r2
}
   148e0:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   148e4:	0005883a 	mov	r2,zero
   148e8:	00000306 	br	148f8 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   148ec:	00bffa84 	movi	r2,-22
   148f0:	00000106 	br	148f8 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   148f4:	00bfde84 	movi	r2,-134
  }
}
   148f8:	e037883a 	mov	sp,fp
   148fc:	df000017 	ldw	fp,0(sp)
   14900:	dec00104 	addi	sp,sp,4
   14904:	f800283a 	ret

00014908 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14908:	deffff04 	addi	sp,sp,-4
   1490c:	df000015 	stw	fp,0(sp)
   14910:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14914:	0001883a 	nop
   14918:	e037883a 	mov	sp,fp
   1491c:	df000017 	ldw	fp,0(sp)
   14920:	dec00104 	addi	sp,sp,4
   14924:	f800283a 	ret

00014928 <alt_get_errno>:
   14928:	defffe04 	addi	sp,sp,-8
   1492c:	dfc00115 	stw	ra,4(sp)
   14930:	df000015 	stw	fp,0(sp)
   14934:	d839883a 	mov	fp,sp
   14938:	d0a00817 	ldw	r2,-32736(gp)
   1493c:	10000326 	beq	r2,zero,1494c <alt_get_errno+0x24>
   14940:	d0a00817 	ldw	r2,-32736(gp)
   14944:	103ee83a 	callr	r2
   14948:	00000106 	br	14950 <alt_get_errno+0x28>
   1494c:	d0a5e804 	addi	r2,gp,-26720
   14950:	e037883a 	mov	sp,fp
   14954:	dfc00117 	ldw	ra,4(sp)
   14958:	df000017 	ldw	fp,0(sp)
   1495c:	dec00204 	addi	sp,sp,8
   14960:	f800283a 	ret

00014964 <alt_dev_llist_insert>:
   14964:	defffa04 	addi	sp,sp,-24
   14968:	dfc00515 	stw	ra,20(sp)
   1496c:	df000415 	stw	fp,16(sp)
   14970:	df000404 	addi	fp,sp,16
   14974:	e13ffd15 	stw	r4,-12(fp)
   14978:	e17ffc15 	stw	r5,-16(fp)
   1497c:	e0bffd17 	ldw	r2,-12(fp)
   14980:	10000326 	beq	r2,zero,14990 <alt_dev_llist_insert+0x2c>
   14984:	e0bffd17 	ldw	r2,-12(fp)
   14988:	10800217 	ldw	r2,8(r2)
   1498c:	1000061e 	bne	r2,zero,149a8 <alt_dev_llist_insert+0x44>
   14990:	00149280 	call	14928 <alt_get_errno>
   14994:	1007883a 	mov	r3,r2
   14998:	00800584 	movi	r2,22
   1499c:	18800015 	stw	r2,0(r3)
   149a0:	00bffa84 	movi	r2,-22
   149a4:	00001406 	br	149f8 <alt_dev_llist_insert+0x94>
   149a8:	e0bffd17 	ldw	r2,-12(fp)
   149ac:	e0fffc17 	ldw	r3,-16(fp)
   149b0:	e0ffff15 	stw	r3,-4(fp)
   149b4:	e0bffe15 	stw	r2,-8(fp)
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	e0ffff17 	ldw	r3,-4(fp)
   149c0:	10c00115 	stw	r3,4(r2)
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	10c00017 	ldw	r3,0(r2)
   149cc:	e0bffe17 	ldw	r2,-8(fp)
   149d0:	10c00015 	stw	r3,0(r2)
   149d4:	e0bfff17 	ldw	r2,-4(fp)
   149d8:	10800017 	ldw	r2,0(r2)
   149dc:	e0fffe17 	ldw	r3,-8(fp)
   149e0:	10c00115 	stw	r3,4(r2)
   149e4:	e0bfff17 	ldw	r2,-4(fp)
   149e8:	e0fffe17 	ldw	r3,-8(fp)
   149ec:	10c00015 	stw	r3,0(r2)
   149f0:	0001883a 	nop
   149f4:	0005883a 	mov	r2,zero
   149f8:	e037883a 	mov	sp,fp
   149fc:	dfc00117 	ldw	ra,4(sp)
   14a00:	df000017 	ldw	fp,0(sp)
   14a04:	dec00204 	addi	sp,sp,8
   14a08:	f800283a 	ret

00014a0c <_do_ctors>:
   14a0c:	defffd04 	addi	sp,sp,-12
   14a10:	dfc00215 	stw	ra,8(sp)
   14a14:	df000115 	stw	fp,4(sp)
   14a18:	df000104 	addi	fp,sp,4
   14a1c:	00800074 	movhi	r2,1
   14a20:	1095ca04 	addi	r2,r2,22312
   14a24:	e0bfff15 	stw	r2,-4(fp)
   14a28:	00000606 	br	14a44 <_do_ctors+0x38>
   14a2c:	e0bfff17 	ldw	r2,-4(fp)
   14a30:	10800017 	ldw	r2,0(r2)
   14a34:	103ee83a 	callr	r2
   14a38:	e0bfff17 	ldw	r2,-4(fp)
   14a3c:	10bfff04 	addi	r2,r2,-4
   14a40:	e0bfff15 	stw	r2,-4(fp)
   14a44:	e0ffff17 	ldw	r3,-4(fp)
   14a48:	00800074 	movhi	r2,1
   14a4c:	1095cb04 	addi	r2,r2,22316
   14a50:	18bff62e 	bgeu	r3,r2,14a2c <_do_ctors+0x20>
   14a54:	0001883a 	nop
   14a58:	0001883a 	nop
   14a5c:	e037883a 	mov	sp,fp
   14a60:	dfc00117 	ldw	ra,4(sp)
   14a64:	df000017 	ldw	fp,0(sp)
   14a68:	dec00204 	addi	sp,sp,8
   14a6c:	f800283a 	ret

00014a70 <_do_dtors>:
   14a70:	defffd04 	addi	sp,sp,-12
   14a74:	dfc00215 	stw	ra,8(sp)
   14a78:	df000115 	stw	fp,4(sp)
   14a7c:	df000104 	addi	fp,sp,4
   14a80:	00800074 	movhi	r2,1
   14a84:	1095ca04 	addi	r2,r2,22312
   14a88:	e0bfff15 	stw	r2,-4(fp)
   14a8c:	00000606 	br	14aa8 <_do_dtors+0x38>
   14a90:	e0bfff17 	ldw	r2,-4(fp)
   14a94:	10800017 	ldw	r2,0(r2)
   14a98:	103ee83a 	callr	r2
   14a9c:	e0bfff17 	ldw	r2,-4(fp)
   14aa0:	10bfff04 	addi	r2,r2,-4
   14aa4:	e0bfff15 	stw	r2,-4(fp)
   14aa8:	e0ffff17 	ldw	r3,-4(fp)
   14aac:	00800074 	movhi	r2,1
   14ab0:	1095cb04 	addi	r2,r2,22316
   14ab4:	18bff62e 	bgeu	r3,r2,14a90 <_do_dtors+0x20>
   14ab8:	0001883a 	nop
   14abc:	0001883a 	nop
   14ac0:	e037883a 	mov	sp,fp
   14ac4:	dfc00117 	ldw	ra,4(sp)
   14ac8:	df000017 	ldw	fp,0(sp)
   14acc:	dec00204 	addi	sp,sp,8
   14ad0:	f800283a 	ret

00014ad4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14ad4:	deffff04 	addi	sp,sp,-4
   14ad8:	df000015 	stw	fp,0(sp)
   14adc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14ae0:	0001883a 	nop
   14ae4:	e037883a 	mov	sp,fp
   14ae8:	df000017 	ldw	fp,0(sp)
   14aec:	dec00104 	addi	sp,sp,4
   14af0:	f800283a 	ret

00014af4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14af4:	defff904 	addi	sp,sp,-28
   14af8:	dfc00615 	stw	ra,24(sp)
   14afc:	df000515 	stw	fp,20(sp)
   14b00:	df000504 	addi	fp,sp,20
   14b04:	e13fff15 	stw	r4,-4(fp)
   14b08:	e17ffe15 	stw	r5,-8(fp)
   14b0c:	e1bffd15 	stw	r6,-12(fp)
   14b10:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14b14:	e0800217 	ldw	r2,8(fp)
   14b18:	d8800015 	stw	r2,0(sp)
   14b1c:	e1fffc17 	ldw	r7,-16(fp)
   14b20:	e1bffd17 	ldw	r6,-12(fp)
   14b24:	e17ffe17 	ldw	r5,-8(fp)
   14b28:	e13fff17 	ldw	r4,-4(fp)
   14b2c:	0014ca40 	call	14ca4 <alt_iic_isr_register>
}  
   14b30:	e037883a 	mov	sp,fp
   14b34:	dfc00117 	ldw	ra,4(sp)
   14b38:	df000017 	ldw	fp,0(sp)
   14b3c:	dec00204 	addi	sp,sp,8
   14b40:	f800283a 	ret

00014b44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14b44:	defff904 	addi	sp,sp,-28
   14b48:	df000615 	stw	fp,24(sp)
   14b4c:	df000604 	addi	fp,sp,24
   14b50:	e13ffb15 	stw	r4,-20(fp)
   14b54:	e17ffa15 	stw	r5,-24(fp)
   14b58:	e0bffa17 	ldw	r2,-24(fp)
   14b5c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14b60:	0005303a 	rdctl	r2,status
   14b64:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b68:	e0fffe17 	ldw	r3,-8(fp)
   14b6c:	00bfff84 	movi	r2,-2
   14b70:	1884703a 	and	r2,r3,r2
   14b74:	1001703a 	wrctl	status,r2
  return context;
   14b78:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14b7c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14b80:	00c00044 	movi	r3,1
   14b84:	e0bfff17 	ldw	r2,-4(fp)
   14b88:	1884983a 	sll	r2,r3,r2
   14b8c:	1007883a 	mov	r3,r2
   14b90:	d0a5f117 	ldw	r2,-26684(gp)
   14b94:	1884b03a 	or	r2,r3,r2
   14b98:	d0a5f115 	stw	r2,-26684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14b9c:	d0a5f117 	ldw	r2,-26684(gp)
   14ba0:	100170fa 	wrctl	ienable,r2
   14ba4:	e0bffd17 	ldw	r2,-12(fp)
   14ba8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14bac:	e0bffc17 	ldw	r2,-16(fp)
   14bb0:	1001703a 	wrctl	status,r2
}
   14bb4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14bb8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14bbc:	e037883a 	mov	sp,fp
   14bc0:	df000017 	ldw	fp,0(sp)
   14bc4:	dec00104 	addi	sp,sp,4
   14bc8:	f800283a 	ret

00014bcc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14bcc:	defff904 	addi	sp,sp,-28
   14bd0:	df000615 	stw	fp,24(sp)
   14bd4:	df000604 	addi	fp,sp,24
   14bd8:	e13ffb15 	stw	r4,-20(fp)
   14bdc:	e17ffa15 	stw	r5,-24(fp)
   14be0:	e0bffa17 	ldw	r2,-24(fp)
   14be4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14be8:	0005303a 	rdctl	r2,status
   14bec:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14bf0:	e0fffe17 	ldw	r3,-8(fp)
   14bf4:	00bfff84 	movi	r2,-2
   14bf8:	1884703a 	and	r2,r3,r2
   14bfc:	1001703a 	wrctl	status,r2
  return context;
   14c00:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14c04:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14c08:	00c00044 	movi	r3,1
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	1884983a 	sll	r2,r3,r2
   14c14:	0084303a 	nor	r2,zero,r2
   14c18:	1007883a 	mov	r3,r2
   14c1c:	d0a5f117 	ldw	r2,-26684(gp)
   14c20:	1884703a 	and	r2,r3,r2
   14c24:	d0a5f115 	stw	r2,-26684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14c28:	d0a5f117 	ldw	r2,-26684(gp)
   14c2c:	100170fa 	wrctl	ienable,r2
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14c38:	e0bffc17 	ldw	r2,-16(fp)
   14c3c:	1001703a 	wrctl	status,r2
}
   14c40:	0001883a 	nop
  return 0;
   14c44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14c48:	e037883a 	mov	sp,fp
   14c4c:	df000017 	ldw	fp,0(sp)
   14c50:	dec00104 	addi	sp,sp,4
   14c54:	f800283a 	ret

00014c58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14c58:	defffc04 	addi	sp,sp,-16
   14c5c:	df000315 	stw	fp,12(sp)
   14c60:	df000304 	addi	fp,sp,12
   14c64:	e13ffe15 	stw	r4,-8(fp)
   14c68:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14c6c:	000530fa 	rdctl	r2,ienable
   14c70:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14c74:	00c00044 	movi	r3,1
   14c78:	e0bffd17 	ldw	r2,-12(fp)
   14c7c:	1884983a 	sll	r2,r3,r2
   14c80:	1007883a 	mov	r3,r2
   14c84:	e0bfff17 	ldw	r2,-4(fp)
   14c88:	1884703a 	and	r2,r3,r2
   14c8c:	1004c03a 	cmpne	r2,r2,zero
   14c90:	10803fcc 	andi	r2,r2,255
}
   14c94:	e037883a 	mov	sp,fp
   14c98:	df000017 	ldw	fp,0(sp)
   14c9c:	dec00104 	addi	sp,sp,4
   14ca0:	f800283a 	ret

00014ca4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14ca4:	defff504 	addi	sp,sp,-44
   14ca8:	dfc00a15 	stw	ra,40(sp)
   14cac:	df000915 	stw	fp,36(sp)
   14cb0:	df000904 	addi	fp,sp,36
   14cb4:	e13ffa15 	stw	r4,-24(fp)
   14cb8:	e17ff915 	stw	r5,-28(fp)
   14cbc:	e1bff815 	stw	r6,-32(fp)
   14cc0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14cc4:	00bffa84 	movi	r2,-22
   14cc8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14ccc:	e0bff917 	ldw	r2,-28(fp)
   14cd0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14cd4:	e0bffe17 	ldw	r2,-8(fp)
   14cd8:	10800808 	cmpgei	r2,r2,32
   14cdc:	1000251e 	bne	r2,zero,14d74 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14ce0:	0005303a 	rdctl	r2,status
   14ce4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ce8:	e0fffc17 	ldw	r3,-16(fp)
   14cec:	00bfff84 	movi	r2,-2
   14cf0:	1884703a 	and	r2,r3,r2
   14cf4:	1001703a 	wrctl	status,r2
  return context;
   14cf8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14cfc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14d00:	e0bffe17 	ldw	r2,-8(fp)
   14d04:	100890fa 	slli	r4,r2,3
   14d08:	e0fff817 	ldw	r3,-32(fp)
   14d0c:	008000b4 	movhi	r2,2
   14d10:	2085883a 	add	r2,r4,r2
   14d14:	10e1f915 	stw	r3,-30748(r2)
    alt_irq[id].context = isr_context;
   14d18:	e0bffe17 	ldw	r2,-8(fp)
   14d1c:	100890fa 	slli	r4,r2,3
   14d20:	e0fff717 	ldw	r3,-36(fp)
   14d24:	008000b4 	movhi	r2,2
   14d28:	2085883a 	add	r2,r4,r2
   14d2c:	10e1fa15 	stw	r3,-30744(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14d30:	e0bff817 	ldw	r2,-32(fp)
   14d34:	10000526 	beq	r2,zero,14d4c <alt_iic_isr_register+0xa8>
   14d38:	e0bffe17 	ldw	r2,-8(fp)
   14d3c:	100b883a 	mov	r5,r2
   14d40:	e13ffa17 	ldw	r4,-24(fp)
   14d44:	0014b440 	call	14b44 <alt_ic_irq_enable>
   14d48:	00000406 	br	14d5c <alt_iic_isr_register+0xb8>
   14d4c:	e0bffe17 	ldw	r2,-8(fp)
   14d50:	100b883a 	mov	r5,r2
   14d54:	e13ffa17 	ldw	r4,-24(fp)
   14d58:	0014bcc0 	call	14bcc <alt_ic_irq_disable>
   14d5c:	e0bfff15 	stw	r2,-4(fp)
   14d60:	e0bffd17 	ldw	r2,-12(fp)
   14d64:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14d68:	e0bffb17 	ldw	r2,-20(fp)
   14d6c:	1001703a 	wrctl	status,r2
}
   14d70:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14d74:	e0bfff17 	ldw	r2,-4(fp)
}
   14d78:	e037883a 	mov	sp,fp
   14d7c:	dfc00117 	ldw	ra,4(sp)
   14d80:	df000017 	ldw	fp,0(sp)
   14d84:	dec00204 	addi	sp,sp,8
   14d88:	f800283a 	ret

00014d8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14d8c:	defff904 	addi	sp,sp,-28
   14d90:	dfc00615 	stw	ra,24(sp)
   14d94:	df000515 	stw	fp,20(sp)
   14d98:	df000504 	addi	fp,sp,20
   14d9c:	e13ffe15 	stw	r4,-8(fp)
   14da0:	e17ffd15 	stw	r5,-12(fp)
   14da4:	e1bffc15 	stw	r6,-16(fp)
   14da8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   14dac:	e1bffb17 	ldw	r6,-20(fp)
   14db0:	e17ffc17 	ldw	r5,-16(fp)
   14db4:	e13ffd17 	ldw	r4,-12(fp)
   14db8:	0014ff40 	call	14ff4 <open>
   14dbc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	10002016 	blt	r2,zero,14e48 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   14dc8:	e0ffff17 	ldw	r3,-4(fp)
   14dcc:	1805883a 	mov	r2,r3
   14dd0:	1085883a 	add	r2,r2,r2
   14dd4:	10c5883a 	add	r2,r2,r3
   14dd8:	100490ba 	slli	r2,r2,2
   14ddc:	00c00074 	movhi	r3,1
   14de0:	10c7883a 	add	r3,r2,r3
   14de4:	18d73317 	ldw	r3,23756(r3)
   14de8:	e0bffe17 	ldw	r2,-8(fp)
   14dec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14df0:	e0ffff17 	ldw	r3,-4(fp)
   14df4:	1805883a 	mov	r2,r3
   14df8:	1085883a 	add	r2,r2,r2
   14dfc:	10c5883a 	add	r2,r2,r3
   14e00:	100490ba 	slli	r2,r2,2
   14e04:	00c00074 	movhi	r3,1
   14e08:	10c7883a 	add	r3,r2,r3
   14e0c:	18d73417 	ldw	r3,23760(r3)
   14e10:	e0bffe17 	ldw	r2,-8(fp)
   14e14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14e18:	e0ffff17 	ldw	r3,-4(fp)
   14e1c:	1805883a 	mov	r2,r3
   14e20:	1085883a 	add	r2,r2,r2
   14e24:	10c5883a 	add	r2,r2,r3
   14e28:	100490ba 	slli	r2,r2,2
   14e2c:	00c00074 	movhi	r3,1
   14e30:	10c7883a 	add	r3,r2,r3
   14e34:	18d73517 	ldw	r3,23764(r3)
   14e38:	e0bffe17 	ldw	r2,-8(fp)
   14e3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14e40:	e13fff17 	ldw	r4,-4(fp)
   14e44:	0013a040 	call	13a04 <alt_release_fd>
  }
} 
   14e48:	0001883a 	nop
   14e4c:	e037883a 	mov	sp,fp
   14e50:	dfc00117 	ldw	ra,4(sp)
   14e54:	df000017 	ldw	fp,0(sp)
   14e58:	dec00204 	addi	sp,sp,8
   14e5c:	f800283a 	ret

00014e60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14e60:	defffb04 	addi	sp,sp,-20
   14e64:	dfc00415 	stw	ra,16(sp)
   14e68:	df000315 	stw	fp,12(sp)
   14e6c:	df000304 	addi	fp,sp,12
   14e70:	e13fff15 	stw	r4,-4(fp)
   14e74:	e17ffe15 	stw	r5,-8(fp)
   14e78:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14e7c:	01c07fc4 	movi	r7,511
   14e80:	01800044 	movi	r6,1
   14e84:	e17fff17 	ldw	r5,-4(fp)
   14e88:	01000074 	movhi	r4,1
   14e8c:	21173604 	addi	r4,r4,23768
   14e90:	0014d8c0 	call	14d8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14e94:	01c07fc4 	movi	r7,511
   14e98:	000d883a 	mov	r6,zero
   14e9c:	e17ffe17 	ldw	r5,-8(fp)
   14ea0:	01000074 	movhi	r4,1
   14ea4:	21173304 	addi	r4,r4,23756
   14ea8:	0014d8c0 	call	14d8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14eac:	01c07fc4 	movi	r7,511
   14eb0:	01800044 	movi	r6,1
   14eb4:	e17ffd17 	ldw	r5,-12(fp)
   14eb8:	01000074 	movhi	r4,1
   14ebc:	21173904 	addi	r4,r4,23780
   14ec0:	0014d8c0 	call	14d8c <alt_open_fd>
}  
   14ec4:	0001883a 	nop
   14ec8:	e037883a 	mov	sp,fp
   14ecc:	dfc00117 	ldw	ra,4(sp)
   14ed0:	df000017 	ldw	fp,0(sp)
   14ed4:	dec00204 	addi	sp,sp,8
   14ed8:	f800283a 	ret

00014edc <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14edc:	defffe04 	addi	sp,sp,-8
   14ee0:	dfc00115 	stw	ra,4(sp)
   14ee4:	df000015 	stw	fp,0(sp)
   14ee8:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14eec:	d0a00817 	ldw	r2,-32736(gp)
   14ef0:	10000326 	beq	r2,zero,14f00 <alt_get_errno+0x24>
   14ef4:	d0a00817 	ldw	r2,-32736(gp)
   14ef8:	103ee83a 	callr	r2
   14efc:	00000106 	br	14f04 <alt_get_errno+0x28>
   14f00:	d0a5e804 	addi	r2,gp,-26720
        (&alt_fd_list[i] != fd))
   14f04:	e037883a 	mov	sp,fp
   14f08:	dfc00117 	ldw	ra,4(sp)
   14f0c:	df000017 	ldw	fp,0(sp)
   14f10:	dec00204 	addi	sp,sp,8
   14f14:	f800283a 	ret

00014f18 <alt_file_locked>:
{
   14f18:	defffd04 	addi	sp,sp,-12
   14f1c:	df000215 	stw	fp,8(sp)
   14f20:	df000204 	addi	fp,sp,8
   14f24:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
   14f28:	e0bffe17 	ldw	r2,-8(fp)
   14f2c:	10800217 	ldw	r2,8(r2)
   14f30:	10d00034 	orhi	r3,r2,16384
   14f34:	e0bffe17 	ldw	r2,-8(fp)
   14f38:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
   14f3c:	e03fff15 	stw	zero,-4(fp)
   14f40:	00002306 	br	14fd0 <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f44:	e0ffff17 	ldw	r3,-4(fp)
   14f48:	1805883a 	mov	r2,r3
   14f4c:	1085883a 	add	r2,r2,r2
   14f50:	10c5883a 	add	r2,r2,r3
   14f54:	100490ba 	slli	r2,r2,2
   14f58:	00c00074 	movhi	r3,1
   14f5c:	10c7883a 	add	r3,r2,r3
   14f60:	18d73317 	ldw	r3,23756(r3)
   14f64:	e0bffe17 	ldw	r2,-8(fp)
   14f68:	10800017 	ldw	r2,0(r2)
   14f6c:	1880151e 	bne	r3,r2,14fc4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14f70:	e0ffff17 	ldw	r3,-4(fp)
   14f74:	1805883a 	mov	r2,r3
   14f78:	1085883a 	add	r2,r2,r2
   14f7c:	10c5883a 	add	r2,r2,r3
   14f80:	100490ba 	slli	r2,r2,2
   14f84:	00c00074 	movhi	r3,1
   14f88:	10c7883a 	add	r3,r2,r3
   14f8c:	18973517 	ldw	r2,23764(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f90:	10000c0e 	bge	r2,zero,14fc4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   14f94:	e0ffff17 	ldw	r3,-4(fp)
   14f98:	1805883a 	mov	r2,r3
   14f9c:	1085883a 	add	r2,r2,r2
   14fa0:	10c5883a 	add	r2,r2,r3
   14fa4:	100490ba 	slli	r2,r2,2
   14fa8:	00c00074 	movhi	r3,1
   14fac:	18d73304 	addi	r3,r3,23756
   14fb0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14fb4:	e0fffe17 	ldw	r3,-8(fp)
   14fb8:	18800226 	beq	r3,r2,14fc4 <alt_file_locked+0xac>
    {
      return -EACCES;
   14fbc:	00bffcc4 	movi	r2,-13
   14fc0:	00000806 	br	14fe4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   14fc4:	e0bfff17 	ldw	r2,-4(fp)
   14fc8:	10800044 	addi	r2,r2,1
   14fcc:	e0bfff15 	stw	r2,-4(fp)
   14fd0:	d0a00717 	ldw	r2,-32740(gp)
   14fd4:	1007883a 	mov	r3,r2
   14fd8:	e0bfff17 	ldw	r2,-4(fp)
   14fdc:	18bfd92e 	bgeu	r3,r2,14f44 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14fe0:	0005883a 	mov	r2,zero
}
   14fe4:	e037883a 	mov	sp,fp
   14fe8:	df000017 	ldw	fp,0(sp)
   14fec:	dec00104 	addi	sp,sp,4
   14ff0:	f800283a 	ret

00014ff4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14ff4:	defff604 	addi	sp,sp,-40
   14ff8:	dfc00915 	stw	ra,36(sp)
   14ffc:	df000815 	stw	fp,32(sp)
   15000:	df000804 	addi	fp,sp,32
   15004:	e13ffa15 	stw	r4,-24(fp)
   15008:	e17ff915 	stw	r5,-28(fp)
   1500c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15010:	00bfffc4 	movi	r2,-1
   15014:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   15018:	00bffb44 	movi	r2,-19
   1501c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   15020:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15024:	d1600504 	addi	r5,gp,-32748
   15028:	e13ffa17 	ldw	r4,-24(fp)
   1502c:	00153480 	call	15348 <alt_find_dev>
   15030:	e0bfff15 	stw	r2,-4(fp)
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	1000051e 	bne	r2,zero,15050 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1503c:	e13ffa17 	ldw	r4,-24(fp)
   15040:	00153d80 	call	153d8 <alt_find_file>
   15044:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   15048:	00800044 	movi	r2,1
   1504c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15050:	e0bfff17 	ldw	r2,-4(fp)
   15054:	10002c26 	beq	r2,zero,15108 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15058:	e13fff17 	ldw	r4,-4(fp)
   1505c:	00154e00 	call	154e0 <alt_get_fd>
   15060:	e0bffe15 	stw	r2,-8(fp)
   15064:	e0bffe17 	ldw	r2,-8(fp)
   15068:	1000030e 	bge	r2,zero,15078 <open+0x84>
    {
      status = index;
   1506c:	e0bffe17 	ldw	r2,-8(fp)
   15070:	e0bffd15 	stw	r2,-12(fp)
   15074:	00002606 	br	15110 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   15078:	e0fffe17 	ldw	r3,-8(fp)
   1507c:	1805883a 	mov	r2,r3
   15080:	1085883a 	add	r2,r2,r2
   15084:	10c5883a 	add	r2,r2,r3
   15088:	100490ba 	slli	r2,r2,2
   1508c:	00c00074 	movhi	r3,1
   15090:	18d73304 	addi	r3,r3,23756
   15094:	10c5883a 	add	r2,r2,r3
   15098:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1509c:	e0fff917 	ldw	r3,-28(fp)
   150a0:	00900034 	movhi	r2,16384
   150a4:	10bfffc4 	addi	r2,r2,-1
   150a8:	1886703a 	and	r3,r3,r2
   150ac:	e0bffb17 	ldw	r2,-20(fp)
   150b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   150b4:	e0bffc17 	ldw	r2,-16(fp)
   150b8:	1000051e 	bne	r2,zero,150d0 <open+0xdc>
   150bc:	e13ffb17 	ldw	r4,-20(fp)
   150c0:	0014f180 	call	14f18 <alt_file_locked>
   150c4:	e0bffd15 	stw	r2,-12(fp)
   150c8:	e0bffd17 	ldw	r2,-12(fp)
   150cc:	10001016 	blt	r2,zero,15110 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   150d0:	e0bfff17 	ldw	r2,-4(fp)
   150d4:	10800317 	ldw	r2,12(r2)
   150d8:	10000826 	beq	r2,zero,150fc <open+0x108>
   150dc:	e0bfff17 	ldw	r2,-4(fp)
   150e0:	10800317 	ldw	r2,12(r2)
   150e4:	e1fff817 	ldw	r7,-32(fp)
   150e8:	e1bff917 	ldw	r6,-28(fp)
   150ec:	e17ffa17 	ldw	r5,-24(fp)
   150f0:	e13ffb17 	ldw	r4,-20(fp)
   150f4:	103ee83a 	callr	r2
   150f8:	00000106 	br	15100 <open+0x10c>
   150fc:	0005883a 	mov	r2,zero
   15100:	e0bffd15 	stw	r2,-12(fp)
   15104:	00000206 	br	15110 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15108:	00bffb44 	movi	r2,-19
   1510c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15110:	e0bffd17 	ldw	r2,-12(fp)
   15114:	1000090e 	bge	r2,zero,1513c <open+0x148>
  {
    alt_release_fd (index);  
   15118:	e13ffe17 	ldw	r4,-8(fp)
   1511c:	0013a040 	call	13a04 <alt_release_fd>
    ALT_ERRNO = -status;
   15120:	0014edc0 	call	14edc <alt_get_errno>
   15124:	1007883a 	mov	r3,r2
   15128:	e0bffd17 	ldw	r2,-12(fp)
   1512c:	0085c83a 	sub	r2,zero,r2
   15130:	18800015 	stw	r2,0(r3)
    return -1;
   15134:	00bfffc4 	movi	r2,-1
   15138:	00000106 	br	15140 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1513c:	e0bffe17 	ldw	r2,-8(fp)
}
   15140:	e037883a 	mov	sp,fp
   15144:	dfc00117 	ldw	ra,4(sp)
   15148:	df000017 	ldw	fp,0(sp)
   1514c:	dec00204 	addi	sp,sp,8
   15150:	f800283a 	ret

00015154 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15154:	defffa04 	addi	sp,sp,-24
   15158:	df000515 	stw	fp,20(sp)
   1515c:	df000504 	addi	fp,sp,20
   15160:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   15164:	0005303a 	rdctl	r2,status
   15168:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1516c:	e0fffc17 	ldw	r3,-16(fp)
   15170:	00bfff84 	movi	r2,-2
   15174:	1884703a 	and	r2,r3,r2
   15178:	1001703a 	wrctl	status,r2
  return context;
   1517c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15180:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   15184:	e0bffb17 	ldw	r2,-20(fp)
   15188:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1518c:	e0bffd17 	ldw	r2,-12(fp)
   15190:	10800017 	ldw	r2,0(r2)
   15194:	e0fffd17 	ldw	r3,-12(fp)
   15198:	18c00117 	ldw	r3,4(r3)
   1519c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   151a0:	e0bffd17 	ldw	r2,-12(fp)
   151a4:	10800117 	ldw	r2,4(r2)
   151a8:	e0fffd17 	ldw	r3,-12(fp)
   151ac:	18c00017 	ldw	r3,0(r3)
   151b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   151b4:	e0bffd17 	ldw	r2,-12(fp)
   151b8:	e0fffd17 	ldw	r3,-12(fp)
   151bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   151c0:	e0bffd17 	ldw	r2,-12(fp)
   151c4:	e0fffd17 	ldw	r3,-12(fp)
   151c8:	10c00015 	stw	r3,0(r2)
} 
   151cc:	0001883a 	nop
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   151d8:	e0bffe17 	ldw	r2,-8(fp)
   151dc:	1001703a 	wrctl	status,r2
}
   151e0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   151e4:	0001883a 	nop
   151e8:	e037883a 	mov	sp,fp
   151ec:	df000017 	ldw	fp,0(sp)
   151f0:	dec00104 	addi	sp,sp,4
   151f4:	f800283a 	ret

000151f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   151f8:	defff904 	addi	sp,sp,-28
   151fc:	dfc00615 	stw	ra,24(sp)
   15200:	df000515 	stw	fp,20(sp)
   15204:	dc400415 	stw	r17,16(sp)
   15208:	dc000315 	stw	r16,12(sp)
   1520c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15210:	d0a00b17 	ldw	r2,-32724(gp)
   15214:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15218:	d125f317 	ldw	r4,-26676(gp)
   1521c:	d165f417 	ldw	r5,-26672(gp)
   15220:	01800044 	movi	r6,1
   15224:	000f883a 	mov	r7,zero
   15228:	2185883a 	add	r2,r4,r6
   1522c:	1111803a 	cmpltu	r8,r2,r4
   15230:	29c7883a 	add	r3,r5,r7
   15234:	40c9883a 	add	r4,r8,r3
   15238:	2007883a 	mov	r3,r4
   1523c:	1009883a 	mov	r4,r2
   15240:	180b883a 	mov	r5,r3
   15244:	d125f315 	stw	r4,-26676(gp)
   15248:	d165f415 	stw	r5,-26672(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1524c:	00002906 	br	152f4 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   15250:	e0bffd17 	ldw	r2,-12(fp)
   15254:	10800017 	ldw	r2,0(r2)
   15258:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   1525c:	e13ffd17 	ldw	r4,-12(fp)
   15260:	20800217 	ldw	r2,8(r4)
   15264:	20c00317 	ldw	r3,12(r4)
   15268:	d125f317 	ldw	r4,-26676(gp)
   1526c:	d165f417 	ldw	r5,-26672(gp)
   15270:	28c01e36 	bltu	r5,r3,152ec <alt_tick+0xf4>
   15274:	1940011e 	bne	r3,r5,1527c <alt_tick+0x84>
   15278:	20801c36 	bltu	r4,r2,152ec <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   1527c:	e0bffd17 	ldw	r2,-12(fp)
   15280:	10800417 	ldw	r2,16(r2)
   15284:	e0fffd17 	ldw	r3,-12(fp)
   15288:	18c00517 	ldw	r3,20(r3)
   1528c:	1809883a 	mov	r4,r3
   15290:	103ee83a 	callr	r2
   15294:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15298:	e0bffb17 	ldw	r2,-20(fp)
   1529c:	1000031e 	bne	r2,zero,152ac <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   152a0:	e13ffd17 	ldw	r4,-12(fp)
   152a4:	00151540 	call	15154 <alt_alarm_stop>
   152a8:	00001006 	br	152ec <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   152ac:	e0bffd17 	ldw	r2,-12(fp)
   152b0:	11000217 	ldw	r4,8(r2)
   152b4:	11400317 	ldw	r5,12(r2)
   152b8:	e0bffb17 	ldw	r2,-20(fp)
   152bc:	1021883a 	mov	r16,r2
   152c0:	0023883a 	mov	r17,zero
   152c4:	2405883a 	add	r2,r4,r16
   152c8:	110d803a 	cmpltu	r6,r2,r4
   152cc:	2c47883a 	add	r3,r5,r17
   152d0:	30c9883a 	add	r4,r6,r3
   152d4:	2007883a 	mov	r3,r4
   152d8:	1009883a 	mov	r4,r2
   152dc:	180b883a 	mov	r5,r3
   152e0:	e0bffd17 	ldw	r2,-12(fp)
   152e4:	11000215 	stw	r4,8(r2)
   152e8:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   152ec:	e0bffc17 	ldw	r2,-16(fp)
   152f0:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   152f4:	e0fffd17 	ldw	r3,-12(fp)
   152f8:	d0a00b04 	addi	r2,gp,-32724
   152fc:	18bfd41e 	bne	r3,r2,15250 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15300:	0001883a 	nop
}
   15304:	0001883a 	nop
   15308:	e6fffe04 	addi	sp,fp,-8
   1530c:	dfc00317 	ldw	ra,12(sp)
   15310:	df000217 	ldw	fp,8(sp)
   15314:	dc400117 	ldw	r17,4(sp)
   15318:	dc000017 	ldw	r16,0(sp)
   1531c:	dec00404 	addi	sp,sp,16
   15320:	f800283a 	ret

00015324 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15324:	deffff04 	addi	sp,sp,-4
   15328:	df000015 	stw	fp,0(sp)
   1532c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15330:	000170fa 	wrctl	ienable,zero
}
   15334:	0001883a 	nop
   15338:	e037883a 	mov	sp,fp
   1533c:	df000017 	ldw	fp,0(sp)
   15340:	dec00104 	addi	sp,sp,4
   15344:	f800283a 	ret

00015348 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15348:	defffa04 	addi	sp,sp,-24
   1534c:	dfc00515 	stw	ra,20(sp)
   15350:	df000415 	stw	fp,16(sp)
   15354:	df000404 	addi	fp,sp,16
   15358:	e13ffd15 	stw	r4,-12(fp)
   1535c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15360:	e0bffc17 	ldw	r2,-16(fp)
   15364:	10800017 	ldw	r2,0(r2)
   15368:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1536c:	e13ffd17 	ldw	r4,-12(fp)
   15370:	00103b40 	call	103b4 <strlen>
   15374:	10800044 	addi	r2,r2,1
   15378:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1537c:	00000d06 	br	153b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15380:	e0bfff17 	ldw	r2,-4(fp)
   15384:	10800217 	ldw	r2,8(r2)
   15388:	e0fffe17 	ldw	r3,-8(fp)
   1538c:	180d883a 	mov	r6,r3
   15390:	e17ffd17 	ldw	r5,-12(fp)
   15394:	1009883a 	mov	r4,r2
   15398:	00156200 	call	15620 <memcmp>
   1539c:	1000021e 	bne	r2,zero,153a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   153a0:	e0bfff17 	ldw	r2,-4(fp)
   153a4:	00000706 	br	153c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   153a8:	e0bfff17 	ldw	r2,-4(fp)
   153ac:	10800017 	ldw	r2,0(r2)
   153b0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   153b4:	e0ffff17 	ldw	r3,-4(fp)
   153b8:	e0bffc17 	ldw	r2,-16(fp)
   153bc:	18bff01e 	bne	r3,r2,15380 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   153c0:	0005883a 	mov	r2,zero
}
   153c4:	e037883a 	mov	sp,fp
   153c8:	dfc00117 	ldw	ra,4(sp)
   153cc:	df000017 	ldw	fp,0(sp)
   153d0:	dec00204 	addi	sp,sp,8
   153d4:	f800283a 	ret

000153d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   153d8:	defffb04 	addi	sp,sp,-20
   153dc:	dfc00415 	stw	ra,16(sp)
   153e0:	df000315 	stw	fp,12(sp)
   153e4:	df000304 	addi	fp,sp,12
   153e8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   153ec:	d0a00317 	ldw	r2,-32756(gp)
   153f0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   153f4:	00003106 	br	154bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   153f8:	e0bfff17 	ldw	r2,-4(fp)
   153fc:	10800217 	ldw	r2,8(r2)
   15400:	1009883a 	mov	r4,r2
   15404:	00103b40 	call	103b4 <strlen>
   15408:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1540c:	e0bfff17 	ldw	r2,-4(fp)
   15410:	10c00217 	ldw	r3,8(r2)
   15414:	e0bffe17 	ldw	r2,-8(fp)
   15418:	10bfffc4 	addi	r2,r2,-1
   1541c:	1885883a 	add	r2,r3,r2
   15420:	10800003 	ldbu	r2,0(r2)
   15424:	10803fcc 	andi	r2,r2,255
   15428:	1080201c 	xori	r2,r2,128
   1542c:	10bfe004 	addi	r2,r2,-128
   15430:	10800bd8 	cmpnei	r2,r2,47
   15434:	1000031e 	bne	r2,zero,15444 <alt_find_file+0x6c>
    {
      len -= 1;
   15438:	e0bffe17 	ldw	r2,-8(fp)
   1543c:	10bfffc4 	addi	r2,r2,-1
   15440:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15444:	e0bffe17 	ldw	r2,-8(fp)
   15448:	e0fffd17 	ldw	r3,-12(fp)
   1544c:	1885883a 	add	r2,r3,r2
   15450:	10800003 	ldbu	r2,0(r2)
   15454:	10803fcc 	andi	r2,r2,255
   15458:	1080201c 	xori	r2,r2,128
   1545c:	10bfe004 	addi	r2,r2,-128
   15460:	10800be0 	cmpeqi	r2,r2,47
   15464:	1000081e 	bne	r2,zero,15488 <alt_find_file+0xb0>
   15468:	e0bffe17 	ldw	r2,-8(fp)
   1546c:	e0fffd17 	ldw	r3,-12(fp)
   15470:	1885883a 	add	r2,r3,r2
   15474:	10800003 	ldbu	r2,0(r2)
   15478:	10803fcc 	andi	r2,r2,255
   1547c:	1080201c 	xori	r2,r2,128
   15480:	10bfe004 	addi	r2,r2,-128
   15484:	10000a1e 	bne	r2,zero,154b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	10800217 	ldw	r2,8(r2)
   15490:	e0fffe17 	ldw	r3,-8(fp)
   15494:	180d883a 	mov	r6,r3
   15498:	e17ffd17 	ldw	r5,-12(fp)
   1549c:	1009883a 	mov	r4,r2
   154a0:	00156200 	call	15620 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   154a4:	1000021e 	bne	r2,zero,154b0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   154a8:	e0bfff17 	ldw	r2,-4(fp)
   154ac:	00000706 	br	154cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   154b0:	e0bfff17 	ldw	r2,-4(fp)
   154b4:	10800017 	ldw	r2,0(r2)
   154b8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   154bc:	e0ffff17 	ldw	r3,-4(fp)
   154c0:	d0a00304 	addi	r2,gp,-32756
   154c4:	18bfcc1e 	bne	r3,r2,153f8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   154c8:	0005883a 	mov	r2,zero
}
   154cc:	e037883a 	mov	sp,fp
   154d0:	dfc00117 	ldw	ra,4(sp)
   154d4:	df000017 	ldw	fp,0(sp)
   154d8:	dec00204 	addi	sp,sp,8
   154dc:	f800283a 	ret

000154e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   154e0:	defffc04 	addi	sp,sp,-16
   154e4:	df000315 	stw	fp,12(sp)
   154e8:	df000304 	addi	fp,sp,12
   154ec:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   154f0:	00bffa04 	movi	r2,-24
   154f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   154f8:	e03fff15 	stw	zero,-4(fp)
   154fc:	00001d06 	br	15574 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   15500:	e0ffff17 	ldw	r3,-4(fp)
   15504:	1805883a 	mov	r2,r3
   15508:	1085883a 	add	r2,r2,r2
   1550c:	10c5883a 	add	r2,r2,r3
   15510:	100490ba 	slli	r2,r2,2
   15514:	00c00074 	movhi	r3,1
   15518:	10c7883a 	add	r3,r2,r3
   1551c:	18973317 	ldw	r2,23756(r3)
   15520:	1000111e 	bne	r2,zero,15568 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   15524:	e0ffff17 	ldw	r3,-4(fp)
   15528:	1805883a 	mov	r2,r3
   1552c:	1085883a 	add	r2,r2,r2
   15530:	10c5883a 	add	r2,r2,r3
   15534:	100490ba 	slli	r2,r2,2
   15538:	e13ffd17 	ldw	r4,-12(fp)
   1553c:	00c00074 	movhi	r3,1
   15540:	10c7883a 	add	r3,r2,r3
   15544:	19173315 	stw	r4,23756(r3)
      if (i > alt_max_fd)
   15548:	d0e00717 	ldw	r3,-32740(gp)
   1554c:	e0bfff17 	ldw	r2,-4(fp)
   15550:	1880020e 	bge	r3,r2,1555c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   15554:	e0bfff17 	ldw	r2,-4(fp)
   15558:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15564:	00000706 	br	15584 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   15568:	e0bfff17 	ldw	r2,-4(fp)
   1556c:	10800044 	addi	r2,r2,1
   15570:	e0bfff15 	stw	r2,-4(fp)
   15574:	e0bfff17 	ldw	r2,-4(fp)
   15578:	10800810 	cmplti	r2,r2,32
   1557c:	103fe01e 	bne	r2,zero,15500 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   15580:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15584:	e0bffe17 	ldw	r2,-8(fp)
}
   15588:	e037883a 	mov	sp,fp
   1558c:	df000017 	ldw	fp,0(sp)
   15590:	dec00104 	addi	sp,sp,4
   15594:	f800283a 	ret

00015598 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15598:	defffe04 	addi	sp,sp,-8
   1559c:	df000115 	stw	fp,4(sp)
   155a0:	df000104 	addi	fp,sp,4
   155a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   155a8:	e0bfff17 	ldw	r2,-4(fp)
   155ac:	10bffe84 	addi	r2,r2,-6
   155b0:	10c00428 	cmpgeui	r3,r2,16
   155b4:	18c03fcc 	andi	r3,r3,255
   155b8:	18000f1e 	bne	r3,zero,155f8 <alt_exception_cause_generated_bad_addr+0x60>
   155bc:	00c00044 	movi	r3,1
   155c0:	1884983a 	sll	r2,r3,r2
   155c4:	10e2c8cc 	andi	r3,r2,35619
   155c8:	1806c03a 	cmpne	r3,r3,zero
   155cc:	18c03fcc 	andi	r3,r3,255
   155d0:	1800051e 	bne	r3,zero,155e8 <alt_exception_cause_generated_bad_addr+0x50>
   155d4:	1084100c 	andi	r2,r2,4160
   155d8:	1004c03a 	cmpne	r2,r2,zero
   155dc:	10803fcc 	andi	r2,r2,255
   155e0:	1000031e 	bne	r2,zero,155f0 <alt_exception_cause_generated_bad_addr+0x58>
   155e4:	00000406 	br	155f8 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   155e8:	00800044 	movi	r2,1
   155ec:	00000306 	br	155fc <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   155f0:	0005883a 	mov	r2,zero
   155f4:	00000106 	br	155fc <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   155f8:	0005883a 	mov	r2,zero
  }
}
   155fc:	e037883a 	mov	sp,fp
   15600:	df000017 	ldw	fp,0(sp)
   15604:	dec00104 	addi	sp,sp,4
   15608:	f800283a 	ret

0001560c <atexit>:
   1560c:	200b883a 	mov	r5,r4
   15610:	000f883a 	mov	r7,zero
   15614:	000d883a 	mov	r6,zero
   15618:	0009883a 	mov	r4,zero
   1561c:	00156981 	jmpi	15698 <__register_exitproc>

00015620 <memcmp>:
   15620:	30800128 	cmpgeui	r2,r6,4
   15624:	10000d26 	beq	r2,zero,1565c <memcmp+0x3c>
   15628:	2144b03a 	or	r2,r4,r5
   1562c:	108000cc 	andi	r2,r2,3
   15630:	10000726 	beq	r2,zero,15650 <memcmp+0x30>
   15634:	30bfffc4 	addi	r2,r6,-1
   15638:	00000a06 	br	15664 <memcmp+0x44>
   1563c:	31bfff04 	addi	r6,r6,-4
   15640:	30800128 	cmpgeui	r2,r6,4
   15644:	21000104 	addi	r4,r4,4
   15648:	29400104 	addi	r5,r5,4
   1564c:	10000326 	beq	r2,zero,1565c <memcmp+0x3c>
   15650:	20c00017 	ldw	r3,0(r4)
   15654:	28800017 	ldw	r2,0(r5)
   15658:	18bff826 	beq	r3,r2,1563c <memcmp+0x1c>
   1565c:	30bfffc4 	addi	r2,r6,-1
   15660:	30000b26 	beq	r6,zero,15690 <memcmp+0x70>
   15664:	11800044 	addi	r6,r2,1
   15668:	218d883a 	add	r6,r4,r6
   1566c:	00000106 	br	15674 <memcmp+0x54>
   15670:	21800726 	beq	r4,r6,15690 <memcmp+0x70>
   15674:	20800003 	ldbu	r2,0(r4)
   15678:	28c00003 	ldbu	r3,0(r5)
   1567c:	21000044 	addi	r4,r4,1
   15680:	29400044 	addi	r5,r5,1
   15684:	10fffa26 	beq	r2,r3,15670 <memcmp+0x50>
   15688:	10c5c83a 	sub	r2,r2,r3
   1568c:	f800283a 	ret
   15690:	0005883a 	mov	r2,zero
   15694:	f800283a 	ret

00015698 <__register_exitproc>:
   15698:	008000b4 	movhi	r2,2
   1569c:	10a19817 	ldw	r2,-31136(r2)
   156a0:	10001726 	beq	r2,zero,15700 <__register_exitproc+0x68>
   156a4:	10c00117 	ldw	r3,4(r2)
   156a8:	1a000808 	cmpgei	r8,r3,32
   156ac:	40001d1e 	bne	r8,zero,15724 <__register_exitproc+0x8c>
   156b0:	20000b26 	beq	r4,zero,156e0 <__register_exitproc+0x48>
   156b4:	181090ba 	slli	r8,r3,2
   156b8:	02400044 	movi	r9,1
   156bc:	48d2983a 	sll	r9,r9,r3
   156c0:	1211883a 	add	r8,r2,r8
   156c4:	41802215 	stw	r6,136(r8)
   156c8:	11806217 	ldw	r6,392(r2)
   156cc:	21000098 	cmpnei	r4,r4,2
   156d0:	324cb03a 	or	r6,r6,r9
   156d4:	11806215 	stw	r6,392(r2)
   156d8:	41c04215 	stw	r7,264(r8)
   156dc:	20000d26 	beq	r4,zero,15714 <__register_exitproc+0x7c>
   156e0:	19000084 	addi	r4,r3,2
   156e4:	200890ba 	slli	r4,r4,2
   156e8:	18c00044 	addi	r3,r3,1
   156ec:	10c00115 	stw	r3,4(r2)
   156f0:	1105883a 	add	r2,r2,r4
   156f4:	11400015 	stw	r5,0(r2)
   156f8:	0005883a 	mov	r2,zero
   156fc:	f800283a 	ret
   15700:	008000b4 	movhi	r2,2
   15704:	10a23904 	addi	r2,r2,-30492
   15708:	00c000b4 	movhi	r3,2
   1570c:	18a19815 	stw	r2,-31136(r3)
   15710:	003fe406 	br	156a4 <__register_exitproc+0xc>
   15714:	11006317 	ldw	r4,396(r2)
   15718:	2248b03a 	or	r4,r4,r9
   1571c:	11006315 	stw	r4,396(r2)
   15720:	003fef06 	br	156e0 <__register_exitproc+0x48>
   15724:	00bfffc4 	movi	r2,-1
   15728:	f800283a 	ret
